Title: "[Data Science 到底是什麼從一個完全外行角度來看][18]R語言基礎 中篇 - 1維度資料結構介紹"
Published: 2018-02-10
Modified: 2018-02-10
Image: /posts/migrate/2018-02-10-data-science-series-18-r-1-dimension-data-structure_Asset/image_thumb(77).png
Tags: ["「data science 到底是什麼從一個完全外行角度來看」","r","data science"]
RedirectFrom: 2018/02/data-science-series-18-r-1-dimension-data-structure.html
Series: ["「Data Science 到底是什麼從一個完全外行角度來看」"]
---
<section><figure><a href="https://lh3.googleusercontent.com/-rB6N9US9IdI/Wn7qelGQ4UI/AAAAAAAAXn8/d0bxYTVVnbojdMwx_EHJNBL96odr09QaQCHMYCw/s1600-h/image%255B2%255D"><img width="654" height="290" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2018-02-10-data-science-series-18-r-1-dimension-data-structure_Asset/image_thumb(77).png" border="0" class="img-responsive"></a><br><figcaption>圖片來源：                         <a href="https://pixabay.com/en/books-spine-colors-pastel-1099067/">https://pixabay.com/en/books-spine-colors-pastel-1099067/</a> 和                         <a href="https://pixabay.com/en/math-blackboard-education-classroom-1547018/">https://pixabay.com/en/math-blackboard-education-classroom-1547018/</a></figcaption></figure></section><section><p>在上一篇(<a href="http://blog.alantsai.net/2018/01/data-science-series-17-r-program-basic-language-paradigm-and-data-type.html">[17]R語言基礎 上篇 - 語言特性和資料形態</a>)提到R的Language Paradigm和R的Data Type。</p><p>裡面有提到，R其實是Vector base，換句話說一切都是vector。那vector到底有哪幾種（換句話說就是有哪些Data Structure）？     </p><p>這篇將對R裡面的<em>1維度</em>Data Structure做介紹。     </p><div class="bs-callout bs-callout-default">這篇的範例程式碼在github：         <a href="https://github.com/alantsai/blog-data-science-series/tree/master/src/chapter-18-r-1-dimension-data-structure">alantsai/blog-data-science-series 裡面的 src/chapter-18-r-1-dimension-data-structure</a>     </div></section>     <section> <a name="KMContentPageTopID" id="KMContentPageTopID"></a><div id="divKMOutline" style="border-style: groove none; margin: 10px 0px;"><ul style="margin: 0px 0px 0px 20px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518266387475833" ;="">R的Data Structure</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518266387476193" ;="">vector - 1維並且所有內容要是一樣的type</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518266387476390" ;="">如何建立vector</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518266387476319" ;="">如何使用vector</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518266387476660" ;="">如何新增和刪除資料</a><br></li></ul><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518266387476533" ;="">list - 1維 但是 內容形態可以不一樣</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518266387476364" ;="">如何建立list</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518266387476823" ;="">如何使用List</a><br></li></ul><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518266387476522" ;="">結語</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518266387477530" ;="">參考資料</a><br></li></ul></div></section>     <a name="more"></a><section><h2 id="WizKMOutline_1518266387475833">R的Data Structure</h2><p>在R裡面的Data Structure基本上可以從兩個面向來看：         </p><ol><li>幾個維度</li><li>是否整個資料屬於<em>同一個type</em></li></ol><figure><a href="https://lh3.googleusercontent.com/-Ran94uUJi-Y/Wn7qid65PNI/AAAAAAAAXoE/yQDkcyDVrCUUsBtvyUkn9IhvGvGN9V9YQCHMYCw/s1600-h/image%255B5%255D"><img width="654" height="218" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2018-02-10-data-science-series-18-r-1-dimension-data-structure_Asset/image_thumb[1](65).png" border="0" class="img-responsive"></a><br><figcaption>幾種data structure</figcaption></figure><p>如果上面的描述還是看不太懂，那麼往下看就會了解這兩個面向的意思。     </p><section><h2 id="WizKMOutline_1518266387476193">vector - 1維並且所有內容要是一樣的type</h2><p>vector是一切的基礎，像我們之前的<code>3+5</code>回傳的是一個vector，裡面<em>只有一個值 5</em>。         </p><section><h3 id="WizKMOutline_1518266387476390">如何建立vector</h3><p>如果要建立一個vector，使用的是<code>c</code>這個function，例如，假設有一組資料要代表成績： </p><pre class="brush: plain;"><code class="language-none line-numbers">score &lt;- c(20,10,50,60)
score</code></pre>結果是：<code>[1] 20 10 50 60</code><p>上面可以看到，vector只有一個維度，並且都是numeric。         </p><p>vector沒辦法混不同形態，所以假設如下面，如果最後一個分數不小心用引號包起來：             </p><pre class="brush: plain;"><code class="language-none line-numbers">scoreError &lt;- c(20,10,50,"60")
scoreError
            </code></pre>那麼最後結果會是：<code>[1] "20" "10" "50" "60"</code><div class="bs-callout bs-callout-warning">注意到了嗎，被轉換成了所有都是char - 而不是數字             </div><p>除了用<code>c</code>之外，還有一些別的方式可以建立vector，例如假設要建立1到5，可以用：             </p><pre class="brush: plain;"><code class="language-none line-numbers">oneToFive &lt;- 1:5
oneToFive
            </code></pre>執行結果：<code>[1] 1 2 3 4 5</code></section><section><h3 id="WizKMOutline_1518266387476319">如何使用vector</h3><p>如果要從vector取值，可以用中括弧(<code>[]</code>)取，不過和一般語言不一樣，它是從<em>1</em>開始算起，而不是0。         </p><p>例如上面的分數，如果要取得第三個人的分數，可以用：<code>score[3]</code></p><p>除了用取那一筆的方式取得值，也可以用logic值來說這個vector是否要取到，下面例子就是用logic vector             來取值。         </p><p>假設要找出所有分數在<em>30分以上</em>，可以用：             </p><pre class="brush: plain;"><code class="language-none line-numbers">score &gt; 30
score[score &gt; 30]
            </code></pre><figure><a href="https://lh3.googleusercontent.com/-MGlklkWBJUE/Wn7qlSx0VfI/AAAAAAAAXoM/pFQkDAgb3t0TSCZytG4tse-gTpSctnLVACHMYCw/s1600-h/image%255B8%255D"><img width="483" height="353" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2018-02-10-data-science-series-18-r-1-dimension-data-structure_Asset/image_thumb[2](53).png" border="0" class="img-responsive"></a><br><figcaption>第一個得到是一個vector logic，然後用他來取得值</figcaption></figure><p>vector logic可以有很多其他運用，舉例來說，如果要找出分數在<em>30以上的比例</em>，可以用：         </p><p><code>mean(score &gt; 30)</code>，得到的結果是<code>0.5</code></p><p>因為30以上有2筆，總共4筆，所以是百分之50. </p><p>上面那個可以work是因為，logic的<em>FALSE</em>和<em>TRUE</em>其實就是<em>0</em>和<em>1</em>。             所以直接做平均從（<code>mean</code>）就是把0和1 <em>相加然後除去總數</em>。         </p></section><section><h3 id="WizKMOutline_1518266387476660">如何新增和刪除資料</h3><p>要新增一筆資料其實非常簡單，只需要把值assign 到對應的位置即可。         </p><p>例如假設第5個人的分數是100，那麼可以這樣做：         </p><pre class="brush: plain;"><code class="language-none line-numbers">score[5] &lt;- 100
        </code></pre><p>反過來，如果要刪掉，其實就是重新assing就可以。例如把第5筆資料刪掉就會是：         </p><pre class="brush: plain;"><code class="language-none line-numbers">score &lt;- score[1:4]
        </code></pre></section><div class="bs-callout bs-callout-info">上面提到的一些使用和增刪資料和接下來的structure操作起來概念一樣，因此不會特別在介紹。     </div></section><section><h2 id="WizKMOutline_1518266387476533">list - 1維 但是 內容形態可以不一樣</h2><p>如果說資料是1個維度但是每一個資料的形態不同，那麼可以使用list。         </p><section><h3 id="WizKMOutline_1518266387476364">如何建立list</h3><p><code>c</code>是用來建立vector，而<code>list</code>就是用來建立list用。             </p><p>舉例來說，假設最後一個不知道為什麼是字串，那麼：             </p><pre class="brush: plain;"><code class="language-none line-numbers">listScore &lt;- list(20,10,50,"60")
            </code></pre><p>那麼<code>listScore</code>的值會是：             </p><pre class="brush: plain;"><code class="language-none line-numbers">[[1]]
                [1] 20
                
                [[2]]
                [1] 10
                
                [[3]]
                [1] 50
                
                [[4]]
                [1] "60"
            </code></pre><p>更合理一點的例子會是，假設要把每一個分數的對應使用者名稱也加上，就可以用兩個vector在用list組合：             </p><pre class="brush: plain;"><code class="language-none line-numbers">name &lt;- c("A", "B", "C", "D")
                scoreWithName &lt;- list(name,score)
            </code></pre><p>這個時候<code>scoreWithName</code>就會是：             </p><pre class="brush: plain;"><code class="language-none line-numbers">[[1]]
                [1] "A" "B" "C" "D"
                
                [[2]]
                [1] 20 10 50 60
            </code></pre></section><section><h3 id="WizKMOutline_1518266387476823">如何使用List</h3><p>雖然list是1維，但是因為可以不同形態，所以很有可能裡面包的是一個vector，甚至是list，因此在取值的方式上面有些許的不同。             </p><p>要取得第一個list資料用的是兩個中括弧，因此，假設想要取得第一個人的名字，用法會是：             </p><pre class="brush: plain;"><code class="language-none line-numbers">scoreWithName[[1]][1]
                # A 
            </code></pre><p>其他和一般vector沒有太大兩樣。             </p></section><div class="bs-callout bs-callout-info">以剛剛的例子，貌似要建立分數和名稱的對應需要用list，但是實際上不太建議，因為取值的時候不太方便並且不直覺。後面介紹的<em>dataframe</em>             反而會是比較適合的形態。         </div></section></section><section><h2 id="WizKMOutline_1518266387476522">結語</h2><p>在這篇介紹了R的兩種資料結構，分別為1維度同類型的<em>vector</em>及1維度但可以不同類型的<em>list</em>。     </p><p>在下一篇將會把整個資料結構做個總結，分別介紹2維度同類型的<em>matrix</em>，及2維度不同類型的<em>dataframe</em></p></section><section><h2 id="WizKMOutline_1518266387477530">參考資料</h2><dl><dt>Advanced R 裡面介紹 Data Structure</dt><dd><a href="http://adv-r.had.co.nz/Data-structures.html">http://adv-r.had.co.nz/Data-structures.html</a></dd></dl></section><section>         <div class="wlWriterEditableSmartContent" id="scid:77ECF5F8-D252-44F5-B4EB-D463C5396A79:77246517-fc7e-4cc9-87e3-6eed50445810" style="margin: 0px; padding: 0px; float: none; display: inline;">標籤: <a href="/tags/%e3%80%8cData+Science+%e5%88%b0%e5%ba%95%e6%98%af%e4%bb%80%e9%ba%bc%e5%be%9e%e4%b8%80%e5%80%8b%e5%ae%8c%e5%85%a8%e5%a4%96%e8%a1%8c%e8%a7%92%e5%ba%a6%e4%be%86%e7%9c%8b%e3%80%8d" rel="tag">「Data Science 到底是什麼從一個完全外行角度來看」</a>,<a href="/tags/data+science" rel="tag">data science</a>,<a href="/tags/R" rel="tag">R</a></div></section>