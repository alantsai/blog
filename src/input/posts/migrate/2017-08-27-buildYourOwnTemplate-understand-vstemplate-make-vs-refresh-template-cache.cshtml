Title: "[打造自己的template-建立一致性程式碼][04]了解vstemplate來微調匯出的Template和強制VS更新Template的方式"
Published: 2017-08-27
Modified: 2017-08-29
Image: /posts/migrate/2017-08-27-buildYourOwnTemplate-understand-vstemplate-make-vs-refresh-template-cache_Asset/image_thumb(27).png
Tags: ["visual studio","「打造自己的template-建立一致性程式碼」"]
RedirectFrom: 2017/08/buildYourOwnTemplate-understand-vstemplate-make-vs-refresh-template-cache.html
Series: ["「打造自己的template-建立一致性程式碼」"]
---
<section><figure><a href="https://lh3.googleusercontent.com/--B6HJjISnjU/WaKDvkPg_3I/AAAAAAAAWLs/P-U3Qdf4u-8CoNUPpuivJWMnrgj0q6h4wCHMYCw/s1600-h/image%255B2%255D"><img width="654" height="290" title="解vstemplate來微調匯出的Template和強制VS更新Template的方式" style="display: inline; background-image: none;" alt="解vstemplate來微調匯出的Template和強制VS更新Template的方式" src="/posts/migrate/2017-08-27-buildYourOwnTemplate-understand-vstemplate-make-vs-refresh-template-cache_Asset/image_thumb(27).png" border="0" class="img-responsive"></a><br><figcaption>了解vstemplate來微調匯出的Template和強制VS更新Template的方式</figcaption></figure></section><section><p>在上一篇<a href="http://blog.alantsai.net/2017/08/buildYourOwnTemplate-create-VS-template-using-export.html">[打造自己的template-建立一致性程式碼][03]透過匯出建立Project Template</a>透過匯出的方式得到了   一個zip檔案。可以透過放到對應位置來達到安裝到VS上面。   </p><p>但是匯出來的zip檔案其實有一些不如意的地方，因此在這篇將會介紹Project Template組成的原理來方便微調並且介紹如何讓VS更新Template。   </p></section>   <div class="bs-callout bs-callout-default">之前建立的sample 程式用來產生範本在 <a href="https://github.com/alantsai-samples/mhat-visualstudio-template/releases/tag/sample%2Fchapter02">github mhat-visualstudio-template sample/chapter02</a></div><section> <a name="KMContentPageTopID" id="KMContentPageTopID"></a><div id="divKMOutline" style="border-style: groove none; margin: 10px 0px;"><ul style="margin: 0px 0px 0px 20px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1503822127931551" ;="">了解匯出的zip檔案內容</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1503822127931126" ;="">vstemplate檔案內容</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1503822127931473" ;="">TemplateData</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1503822127931630" ;="">TemplateConten</a><br></li></ul><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1503822127931721" ;="">cs檔案有被調整的內容 - Parameter介紹</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1503822127931219" ;="">微調的部分</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1503822127931836" ;="">修正建立專案預設名稱</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1503822127931924" ;="">管理Project Template到某個分類</a><br></li></ul><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1503822127931725" ;="">更新template - 如何讓vs重新刷新</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1503822127931726" ;="">找到對應的VS 暫存位置</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1503822127931563" ;="">把對應的TemplateCache資料夾刪掉</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1503822127931166" ;="">重新開啟VS</a><br></li></ul><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1503822127931471" ;="">結語</a><br></li></ul></div></section>    <a name="more"></a>    <section><h2 id="WizKMOutline_1503822127931551">了解匯出的zip檔案內容</h2><p>首先，先來了解一下Visual Studio (以下簡稱VS) 匯出的zip檔案包含了什麼內容。   </p><p>如果我們把它解壓縮出來，會發現整個資料夾內容和我們專案差不多，我們專案有的內容，zip裡面也有，不過zip版本有幾個不同的地方：   </p><ol><li>多了一個 <code>MyTemplate.vstemplate</code> 的檔案</li><li>*.cs檔案有被調整過</li></ol><figure><a href="https://lh3.googleusercontent.com/-B2yI3IQ8IZE/WaKDxssZ2BI/AAAAAAAAWL0/FvELvqgZc2QAZPLkHsli2Oe1Rd1hqDhTQCHMYCw/s1600-h/image%255B5%255D"><img width="654" height="380" title="zip檔案內容" style="display: inline; background-image: none;" alt="zip檔案內容" src="/posts/migrate/2017-08-27-buildYourOwnTemplate-understand-vstemplate-make-vs-refresh-template-cache_Asset/image_thumb[1](24).png" border="0" class="img-responsive"></a><br><figcaption>zip檔案內容</figcaption></figure></section><section><h2 id="WizKMOutline_1503822127931126">vstemplate檔案內容</h2><p><code>*.vstemplate</code>基本上定義了Project Template的相關資訊和Project Template建立的時候那些檔案要被建立出來。   </p><p>這個xml的根節點是<code>VSTemplate</code>，這個根節點會定義這次的Template是那種，以我們的例子是 <code>Type="Project"</code>表示是Project Template   </p><p><code>VSTemplate</code>裡面有有幾個部分：   </p><dl><dt>     TemplateData    </dt><dd>     專案的一些meta資訊    </dd><dd></dd><dt>     TemplateConten    </dt><dd>     定義有哪些檔案要包含在Project Template裡面    </dd><dd></dd><dt>     WizardExtension    </dt><dd>     這個我們匯出的Project Template沒有，但是如果未來在Project Template建立的過程有特殊邏輯要處理，可以寫C#程式達到客制目的。哪些就會定義在這邊    </dd><dd></dd><dt>     WizardData    </dt><dd>     可以傳入到WizardExtensio的參數    </dd><dd></dd></dl><div class="bs-callout bs-callout-info">更多介紹，可以參考：<a href="https://msdn.microsoft.com/en-us/library/31cdwx28(v=vs.100).aspx">VSTemplate Element (Visual Studio Templates)</a></div><p>整個vstemplate看起來如下：   </p><pre class="brush: xml;"><code class="language-markup line-numbers"><vstemplate xmlns="http://schemas.microsoft.com/developer/vstemplate/2005" type="Project" version="3.0.0">
  <templatedata>
    <name>MHAT.Console.ProcessTemplate.ExecuteWithOption</name>
    <description>MHAT ConsoleApp ProcessTemplate 讀取參數一次性執行的Echo程式碼範例</description>
    <projecttype>CSharp</projecttype>
    <projectsubtype>
    </projectsubtype>
    <sortorder>1000</sortorder>
    <createnewfolder>true</createnewfolder>
    <defaultname>MHAT.Console.ProcessTemplate.ExecuteWithOption</defaultname>
    <providedefaultname>true</providedefaultname>
    <locationfield>Enabled</locationfield>
    <enablelocationbrowsebutton>true</enablelocationbrowsebutton>
    <icon>__TemplateIcon.ico</icon>
  </templatedata>
  <templatecontent>
    <project replaceparameters="true" file="MHAT.ConsoleWithOption.csproj" targetfilename="MHAT.ConsoleWithOption.csproj">
      <projectitem replaceparameters="true" targetfilename="App.config">App.config</projectitem>
      <folder name="Model" targetfoldername="Model">
        <projectitem replaceparameters="true" targetfilename="EchoProcessOption.cs">EchoProcessOption.cs</projectitem>
      </folder>
      <projectitem replaceparameters="true" targetfilename="packages.config">packages.config</projectitem>
      <folder name="Process" targetfoldername="Process">
        <projectitem replaceparameters="true" targetfilename="EchoProcess.cs">EchoProcess.cs</projectitem>
      </folder>
      <projectitem replaceparameters="true" targetfilename="Program.cs">Program.cs</projectitem>
      <folder name="Properties" targetfoldername="Properties">
        <projectitem replaceparameters="true" targetfilename="AssemblyInfo.cs">AssemblyInfo.cs</projectitem>
      </folder>
    </project>
  </templatecontent>
</vstemplate></code></pre><section><h3 id="WizKMOutline_1503822127931473">TemplateData</h3><p>這裡面放的是一些Project Template的meta資訊，其中有幾個比較會調整的有：    </p><dl><dt>      name     </dt><dd>      這個是在VS裡面顯示的名稱。     </dd><dd></dd><dt>      description     </dt><dd>      選中某個Project Template之後右邊呈現的訊息     </dd><dd></dd><dt>      ProjectType     </dt><dd>      顯示在那個大分類下面，<code>CSharp</code>就是顯示在<code>Visual C#</code></dd><dd></dd><dt>      defaultname     </dt><dd>      當選中Project Template的時候，預設要顯示的專案名稱     </dd><dd></dd><dt>      NumberOfParentCategoriesToRollUp          </dt><dd>      這個在我們的檔案沒有，不過意思是多少<em>層</em>以上也能夠顯示這個Project Template。等一下會提到分類這個事情，如何在上層分類也顯示下層分類的Project Template就是靠這個參數值。     </dd><dd></dd></dl><div class="bs-callout bs-callout-info">更多關於每個參數的用途，可以參考 <a href="https://msdn.microsoft.com/en-us/library/hy7dh5te(v=vs.100).aspx">TemplateData Element (Visual Studio Templates)</a></div></section><section><h3 id="WizKMOutline_1503822127931630">TemplateConten</h3><p>這邊定義的是Project Template建立的時候，那些檔案會建立出來，基本上看名稱應該可以猜的出來做什麼的，不過有幾個要提一下：    </p><dl><dt>      targetfilename     </dt><dd>      這個定義建立出來的時候這個檔案的<em>名稱</em>要是什麼。舉例來說，有可能建立的檔案前面的部分要用使用者輸入的名稱 - 就是改這個attribute     </dd><dd></dd><dt>      replaceparameters     </dt><dd>      如果建立出來的檔案有部分內容要和使用者建立時候輸入的檔案名稱對應 - 那麼就會用到特殊的<code>Parameter</code>，這個參數表示這個檔案是否要做<code>Parameter</code>替換處理。     </dd><dd></dd></dl><div class="bs-callout bs-callout-info">更多關於每個參數的作用，可以參考：<a href="https://msdn.microsoft.com/en-us/library/zfkkzb88(v=vs.100).aspx">TemplateContent Element (Visual Studio Templates)</a></div></section></section><section><h2 id="WizKMOutline_1503822127931721">cs檔案有被調整的內容 - Parameter介紹</h2><p>如果我們打開一個cs檔案，例如<code>Program.cs</code>，會注意到，有些值被改成了用錢字號包起來<code>$safeprojectname$</code>。   </p><p>這些其實是表示會被替換的<code>Parameter</code>，還記得上面有提到一個在<code>vstemplate</code>裡面，<code>replaceparameters</code>的attribute，那個值決定檔案裡面的<code>Parameter</code>是否要被替換。   </p><p>因為有了這些，我們才能夠在新增的時候，namespace會和輸入的專案名稱有關。   </p><div class="bs-callout bs-callout-info">這個<code>Parameter</code>可以用在<code>vstemplate</code>裡面的<code>targetfilename</code>，讓檔名可以和輸入的專案名稱呼應。   </div><div class="bs-callout bs-callout-info">有哪些可用的<code>Parameter</code>可以再這裡：<a href="https://docs.microsoft.com/en-us/visualstudio/ide/template-parameters">Template Parameters</a>找到資訊。   </div></section><section><h2 id="WizKMOutline_1503822127931219">微調的部分</h2><p>上面介紹了Project Template的組成，有了這些資訊，有些地方我們可以做一些微調，分別為：   </p><ol><li>修正建立專案預設名稱</li><li>管理Project Template到某個分類</li></ol><section><h3 id="WizKMOutline_1503822127931836">修正建立專案預設名稱</h3><p>在我們匯出的時候，讓我們輸入<code>Template Name</code>的值會用作於<code>選擇專案時候的名稱</code>和<code>預設專案名稱</code>。    </p><p>可是一般來說這兩個值可能不同，舉例來說，建立一個C# console，他的Template名稱是：<code>Console App （.Net Framework）</code>，但是預設專案名稱則是：<code>ConsoleApp</code></p><p>因此建議調整<code>name</code>（template名稱）和<code>defaultname</code>（專案預設名稱）    </p></section><section><h3 id="WizKMOutline_1503822127931924">管理Project Template到某個分類</h3><p>我們上篇Project Template出現的地方在<code>Visual C#</code>，如果未來我們這個專案有很多template，<code>Visual C#</code>這個節點會越積越多，造成不好查找。    </p><p>因此如果可以把相關template放在一起，到時候查找相關就很方便。    </p><p>建立分類很方便，只需要建立資料夾<em>層級</em>然後把template zip丟進去就好了。    </p><p>舉例來說，如果我這個template想要放在 <code>MHAT</code> -&gt; <code>ConsoleAppProcessTemplate</code>下面，那麼我就會把template放到對應資料夾位置。    </p><a href="https://lh3.googleusercontent.com/-8s56vmc9YwQ/WaKD0dZ_ofI/AAAAAAAAWL8/TFlPCUPcynMvhxSJdHfu5ECinG8S_0eXgCHMYCw/s1600-h/image%255B8%255D"><img width="654" height="262" title="放到正確結構" style="display: inline; background-image: none;" alt="放到正確結構" src="/posts/migrate/2017-08-27-buildYourOwnTemplate-understand-vstemplate-make-vs-refresh-template-cache_Asset/image_thumb[2](18).png" border="0" class="img-responsive"></a><figure><a href="https://lh3.googleusercontent.com/-St0Ge0lYbjI/WaKD2811D9I/AAAAAAAAWME/mnXtBKRWkhonDbEZNN-20H7YUAkhLDuLwCHMYCw/s1600-h/image%255B11%255D"><img width="654" height="220" title="在new project template可以看到分類正確" style="display: inline; background-image: none;" alt="在new project template可以看到分類正確" src="/posts/migrate/2017-08-27-buildYourOwnTemplate-understand-vstemplate-make-vs-refresh-template-cache_Asset/image_thumb[3](15).png" border="0" class="img-responsive"></a><br><figcaption>放到正確結構，在new project template可以看到分類正確</figcaption></figure><div class="bs-callout bs-callout-warning">分類只能歸在某個語言下面，例如<code>Visual C#</code>，無法建立 <code>Visual C#</code>那個層級    </div><div class="bs-callout bs-callout-info">還記得上面提到<code>NumberOfParentCategoriesToRollUp</code>，目前沒有設，所以當我們選到<code>MHAT</code>這個分類的時候，會看不到東西，如果有設定值為1，表示<em>上面1層</em>也看得到這個template。    </div></section></section><section><h2 id="WizKMOutline_1503822127931725">更新template - 如何讓vs重新刷新</h2><p>假設今天要更新template - 不管是改了<code>vstemplate</code>檔案，還是重新調整之後匯出zip檔案，丟到了對應的位置，很有可能開啟<code>new project</code>還是沒有發現template或者template建立了沒有更新的內容。   </p><p>因此這邊有個小tips可以確保template都會更新成功。   </p><p>在系統裡面，有個地方是放VS template zip解壓縮內容的地方，我們只要把那邊刪掉，重啟VS就會重新從zip裡面解壓縮出來，達到更新成功的目的。   </p><p>操作步驟如下：   </p><ol><li>找到對應的VS 暫存位置</li><li>把ProjectTemplates的部分刪掉</li><li>重新開啟VS</li></ol><section><h3 id="WizKMOutline_1503822127931726">找到對應的VS 暫存位置</h3><p>直接在檔案總管輸入：<code>%appdata%\Microsoft\VisualStudio\</code></p><p>找到你的 <code>{VS版本}_{後面幾個奇怪數字}</code>的資料夾，舉例來說在我電腦<code>15.0_00cdbf3e</code>是我的VS 2017的暫存位置    </p><div class="bs-callout bs-callout-info">如果今天是VS的Experimental Instance（後面提到用VSIX建立template會用到），那麼規則變成 <code>{VS版本}_{後面幾個奇怪數字}Exp</code>，舉例來說<code>15.0_00cdbf3eExp</code></div></section><section><h3 id="WizKMOutline_1503822127931563">把對應的TemplateCache資料夾刪掉</h3><p>舉例來說，今天如果是要重設Project Template，就是把<code>ProjectTemplatesCache</code>資料夾刪掉。如果是Item Template（下一篇提到），則是把<code>ItemTemplatesCache</code>砍掉。    </p><figure><a href="https://lh3.googleusercontent.com/-FwLLAA6al68/WaKD5uhKauI/AAAAAAAAWMM/xX3iVuyMmBIy4-MVZa1PjAiasDWrmXyIACHMYCw/s1600-h/image%255B14%255D"><img width="654" height="313" title="要刪掉的ProjectTemplateCache資料夾" style="display: inline; background-image: none;" alt="要刪掉的ProjectTemplateCache資料夾" src="/posts/migrate/2017-08-27-buildYourOwnTemplate-understand-vstemplate-make-vs-refresh-template-cache_Asset/image_thumb[4](15).png" border="0" class="img-responsive"></a><br><figcaption>要刪掉的ProjectTemplateCache資料夾</figcaption></figure></section><section><h3 id="WizKMOutline_1503822127931166">重新開啟VS</h3><p>不需要把現在有開的VS關掉，直接開一個新的，然後Project Template就會更新 - <code>ProjectTemplateCache</code>也會自動被建立出來。    </p></section></section><section><h2 id="WizKMOutline_1503822127931471">結語</h2><p>在這篇深入了解了匯出的template內容，了解了<code>vstemplate</code>的幾個重要欄位和設定，最後還了解了如何確保VS更新template。   </p><p>對於單個Project Template的建立也算告一個段落。   </p><p>在下篇，將會介紹如何建立Multi Project Template（建立出來的時候有2個project）。&nbsp;&nbsp; </p></section><section>&nbsp;<div class="wlWriterEditableSmartContent" id="scid:77ECF5F8-D252-44F5-B4EB-D463C5396A79:207819aa-4314-43a2-97b8-7fda3a467f6c" style="margin: 0px; padding: 0px; float: none; display: inline;">標籤: <a href="/tags/%e3%80%8c%e6%89%93%e9%80%a0%e8%87%aa%e5%b7%b1%e7%9a%84template-%e5%bb%ba%e7%ab%8b%e4%b8%80%e8%87%b4%e6%80%a7%e7%a8%8b%e5%bc%8f%e7%a2%bc%e3%80%8d" rel="tag">「打造自己的template-建立一致性程式碼」</a>,<a href="/tags/Visual+Studio" rel="tag">Visual Studio</a></div></section>