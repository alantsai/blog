Title: "[iThome第8屆鐵人賽 20]靜態程式碼分析之程式碼風格 - Stylecop"
Published: 2017-01-15
Modified: 2017-12-12
Image: /posts/migrate/2017-01-15-devopsSeries-stylecop_Asset/image_thumb(16).png
Tags: [".net","「ithome 第八屆鐵人賽」","devops","「從.net工程師的角度來看devops」","psake","powershell"]
RedirectFrom: 2017/01/devopsSeries-stylecop.html
Series: ["「iThome 第八屆鐵人賽」","「從.Net工程師的角度來看DevOps」"]
---
<section> <p>在上篇介紹了如何透過使用Code Analysis來達到程式碼品質的分析。 </p><p>在這一篇將會從另外一個層面介紹使用靜態程式碼分析來達到程式碼<em>風格</em>的一致性 - Stylecop。 </p><div class="bs-callout bs-callout-default">sample 程式在 <a href="https://github.com/alantsai-samples/devops-psake/releases/tag/sample%2Fchapter20">github devops-psake sample/chapter20</a> </div></section><section><a id="KMContentPageTopID" name="KMContentPageTopID"></a> <div id="divKMOutline" style="border-top-style: groove; border-bottom-style: groove; border-right-style: none; margin: 10px 0px; border-left-style: none"><ul style="margin: 0px 0px 0px 20px"><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1484418446333802" ;="">Stylecop是什麼？</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1484418446333654" ;="">Stylecop如何使用</a><br><ul style="margin: 0px 0px 0px 30px"><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1484418446333283" ;="">設定規則</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1484418446333791" ;="">執行StyleCop</a><br><ul style="margin: 0px 0px 0px 30px"><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1484418446333581" ;="">在建制的時候執行</a></li></ul></li><br></ul></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1484418446333657" ;="">整合到build script</a><br><ul style="margin: 0px 0px 0px 30px"><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1484418446333287" ;="">調整VS建制不執行StyleCop</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1484418446333662" ;="">調整build script</a></li><br></ul></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1484418446333223" ;="">結語</a></li></ul></div></section> <a name="more"></a><section> <h2 id="WizKMOutline_1484418446333802">Stylecop是什麼？</h2><p>Stylecop才是比較符合俗稱的程式碼靜態分析工具。概念和Code Analysis一樣，差別在於Stylecop是分析程式碼的<em>風格</em>，而Code Analysis則是分析程式碼的<em>邏輯或寫法</em>是否有問題。 </p><p>風格可能有點抽象，舉個簡單的例子就很容易理解，例如說兩個statement之間只能空一行，如果沒空就會報錯，或者是每一個方法都要寫註解，沒有就報錯。 </p><p>這些可能感覺很無聊，但是實際上非常重要，因為當開發者是多人的時候，大家習慣不同，很容易整個程式碼看起來很亂。 </p><div class="bs-callout bs-callout-default"><ul><li>Nuget - <a href="https://www.nuget.org/packages/StyleCop.MSBuild">https://www.nuget.org/packages/StyleCop.MSBuild</a><br></li><li>Nuget 指令 - <kbd>Install-Package StyleCop.MSBuild -Version 4.7.55</kbd><br></li><li>VS Extension - <a href="https://marketplace.visualstudio.com/items?itemName=ChrisDahlberg.StyleCop">https://marketplace.visualstudio.com/items?itemName=ChrisDahlberg.StyleCop</a><br></li><li>設定檔編輯程式 - <a href="http://stylecop.codeplex.com/releases/view/629688">http://stylecop.codeplex.com/releases/view/629688</a> - 這個主要目的是提供 程式自動關聯<code>.StyleCop</code>的檔案，並且提供界面化設定啟用的規則<br></li><li>github - <a href="https://github.com/StyleCop/StyleCop">https://github.com/StyleCop/StyleCop</a></li><br></ul></div></section><section> <h2 id="WizKMOutline_1484418446333654">Stylecop如何使用</h2><p>Stylecop分兩個部分：設定規則和執行分析。 </p><h3 id="WizKMOutline_1484418446333283">設定規則</h3><p>stylecop的設定檔預設使用<code>.stylecop</code>作為付檔名。通常檔案名稱為<code>setting.stylecop</code></p><p>可以下載設定檔編輯程式比較容易作調整 - 基本上打開就會有一個畫面能夠勾選要執行那些規則。 </p><figure><a href="https://lh3.googleusercontent.com/-jZfWzPAk4fY/WHpu-pgpoRI/AAAAAAAAVLY/J0Droyh7Ekk/s1600-h/image%25255B2%25255D.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="/posts/migrate/2017-01-15-devopsSeries-stylecop_Asset/image_thumb(16).png" width="644" height="347" class="img-responsive"></a> <figcaption>設定規則</figcaption></figure>  <p>設定檔放在solution下，就會在執行stylecop的時候自動被引用。 </p><p>有些規則其實不太符合習慣，所以也不是所有規則都要啟用，可以找一些常見的專案然後看他們都設定些什麼做參考。舉例來說，在Mvc專案的source code就可以看到啟用了那些規則： <a href="https://aspnetwebstack.codeplex.com/SourceControl/latest">Mvc最新程式碼</a></p><h3 id="WizKMOutline_1484418446333791">執行StyleCop</h3><p>執行方式有兩種： </p><ol><li>在VS上面執行 - 這個如果有安裝VS的Extension就可以呼叫<br></li><li>在建制的時候執行</li><br></ol><h4 id="WizKMOutline_1484418446333581">在建制的時候執行</h4><p>基本上，對於需要掃描stylecop的程式安裝套件<code>StyleCop.MSBuild</code>即可。 </p><p>然後在build的時候，在Warning那邊就會看到不符合規則訊息。 </p><figure><a href="https://lh3.googleusercontent.com/-j8F4sFBwJ3Q/WHpvA3SLQ0I/AAAAAAAAVLg/UCdCpWJxJAs/s1600-h/image%25255B5%25255D.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="/posts/migrate/2017-01-15-devopsSeries-stylecop_Asset/image_thumb[1](14).png" width="644" height="138" class="img-responsive"></a> <figcaption>執行結果不通過出現在warning裡面</figcaption></figure></section><section> <h2 id="WizKMOutline_1484418446333657">整合到build script</h2><p>同Code Analysis一樣，執行這種分析所花的時間也可能非常的久，因此這種類型的分析也最好是放在build server的時候執行。 </p><p>如果要把stylecop整合到build script，需要做幾件事情： </p><ol><li>先調整讓VS建制的情況下，不執行StyleCop<br></li><li>設定build script要執行StyleCop，並且把warning當做error</li><br></ol><h3 id="WizKMOutline_1484418446333287">調整VS建制不執行StyleCop</h3><p>這個要調整有要執行stylecop的專案csproj檔案 - 以這個例子是<code>Webapplication1.csproj</code>。 </p><p>用notepad打開，然後加上： </p><pre class="brush: xml;"><code class="language-markup line-numbers"><propertygroup>
 <stylecopenabled>false</stylecopenabled>
</propertygroup></code></pre><figure><a href="https://lh3.googleusercontent.com/-sXjnZ0OcKoQ/WHpvE7xI-kI/AAAAAAAAVLo/OE2HQHC5kOE/s1600-h/image%25255B8%25255D.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="/posts/migrate/2017-01-15-devopsSeries-stylecop_Asset/image_thumb[2](9).png" width="644" height="252" class="img-responsive"></a> <figcaption>調整csproj</figcaption></figure> <h3 id="WizKMOutline_1484418446333662">調整build script</h3><p>build script加入兩個參數： </p><ul><li><code>StyleCopEnabled=true</code> - 啟用StyleCop<br></li><li><code>StyleCopTreatErrorsAsWarnings=false</code> - 把StyleCop錯誤當成error類型的錯誤</li><br></ul><pre class="brush: powershell;highlight:12"><code class="language-powershell line-numbers">task Compile -depends Clean, Init -description "編譯程式碼" `
    -requiredVariables solutionFile, buildConfiguration, buildTarget, buildTempDirectory `
{ 
 Write-Host "開始建制檔案：$solutionFile"

 $buildParam = "Configuration=$buildConfiguration" +
     ";Platform=$buildTarget" + 
     ";OutDir=$buildTempDirectory"
 
 $buildParam = $buildParam + ";GenerateProjectSpecificOutputFolder=true"
 $buildParam = $buildParam + ";RunCodeAnalysis=true;CodeAnalysisRuleSet=MinimumRecommendedRules.ruleset;CodeAnalysisTreatWarningsAsErrors=true"
 $buildParam = $buildParam + ";StyleCopEnabled=true;StyleCopTreatErrorsAsWarnings=false"

 exec {msbuild $solutionFile "/p:$buildParam"}
}
</code></pre></section><section> <h2 id="WizKMOutline_1484418446333223">結語</h2><p>這篇粗略了介紹如何使用Stylecop並且如何整合到build流程的一部分。 </p><p>通過，Test coverage的Opencover確保了測試程式碼的涵蓋率；透過Code Analysis分析程式碼上面是否有一些不好的邏輯寫法；透過StyleCop讓整個程式碼的風格一致化，這些都是保持程式碼的 品質在一定水準的方法。 </p><p>品質過關之後，就要進入發佈上線的階段。 </p><p>因此，在接下去將進入到另外一個階段，到底如何準備好發佈需要的東西。 </p></section>