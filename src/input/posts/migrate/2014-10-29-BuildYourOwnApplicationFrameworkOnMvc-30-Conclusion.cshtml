Title: "[iThome 第七屆鐵人賽 30] 終篇 總結"
Published: 2014-10-29
Modified: 2014-10-29
Image: /posts/migrate/2014-10-29-BuildYourOwnApplicationFrameworkOnMvc-30-Conclusion_Asset/image_thumb[1](75).png
Tags: ["「ithome 第七屆鐵人賽」"]
RedirectFrom: 2014/10/BuildYourOwnApplicationFrameworkOnMvc-30-Conclusion.html
Series: ["「iThome 第七屆鐵人賽」"]
---
<a id="KMContentPageTopID" name="KMContentPageTopID"></a> <div id="divKMOutline" style="border-top-style: groove; border-bottom-style: groove; border-right-style: none; margin: 10px 0px; border-left-style: none"><ul style="margin: 0px 0px 0px 20px"><li><a href="#WizKMOutline_1414590577031814" ;="">整個框架結構圖</a>  <ul style="margin: 0px 0px 0px 30px"><li><a href="#WizKMOutline_1414590577032597" ;="">Autofac</a><br></li><li><a href="#WizKMOutline_1414590577032182" ;="">Log</a><br></li><li><a href="#WizKMOutline_1414590577032986" ;="">ViewModel和AutoMapper</a><br></li><li><a href="#WizKMOutline_1414590577032885" ;="">Repository和Unit of Work</a><br></li><li><a href="#WizKMOutline_1414590577032391" ;="">Alerts服務和BaseController</a><br></li><li><a href="#WizKMOutline_1414590577032252" ;="">Service層的工作</a>  <ul style="margin: 0px 0px 0px 30px"><li><a href="#WizKMOutline_1414590577032367" ;="">自動化搜索</a></li></ul></li><li><a href="#WizKMOutline_1414590577032810" ;="">資料驗證</a><br></li><li><a href="#WizKMOutline_1414590577032810" ;="">SelectListFill：下拉式選項內容自動產生</a><br></li><li><a href="#WizKMOutline_1414590577032400" ;="">ModelMetadata 和 JsonResult</a></li><br></ul></li><li><a href="#WizKMOutline_1414590577032737" ;="">結語</a></li></ul></div><p>時間過的非常快，一眨眼30天就過去了，到目前為止框架的介紹也到了一個階段，希望大家在這一系列有得到一些有幫助的內容。 </p><p>下面將會用一個同事幫忙畫的30天所介紹的框架整個架構圖，並且快速回顧一下每一個部份在那裡作了介紹。 </p><p>這一整個系列主要目的是給各位未來需要建立自己框架的時候的一個起點，框架這個東西其實是要看整個專案和團隊的需求來建制。因此，這一系列的介紹只是給各位一些思考的方向和內容。 </p><a name="more"></a> <h1 id="WizKMOutline_1414590577031814">整個框架結構圖</h1><figure><a href="http://lh3.ggpht.com/-mlV7ptTJjwQ/VFD0KHW-rXI/AAAAAAAAOJ4/4Hm51HpaebM/s1600-h/image%25255B3%25255D.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="/posts/migrate/2014-10-29-BuildYourOwnApplicationFrameworkOnMvc-30-Conclusion_Asset/image_thumb[1](75).png" width="523" height="228" class="img-responsive"></a><br><figcaption>框架結構圖</figcaption> </figure> <h2 id="WizKMOutline_1414590577032597">Autofac</h2><p>一開始就是先介紹了DI的概念和Autofac相關。整個框架的核心是DI，至於要使用什麼的DI Container是看個人喜好。 </p><p align="left"><a href="http://alantsai2007.blogspot.com/2014/09/BuildYourOwnApplicationFrameworkOnMvc-02-ioc-intro.html">[iThome 第七屆鐵人賽 02] IoC基本概念介紹</a></p><p><a href="http://alantsai2007.blogspot.com/2014/09/BuildYourOwnApplicationFrameworkOnMvc-03-Autofac-intro.html">[iThome 第七屆鐵人賽 03] Autofac基本介紹</a><br></p><p><a href="http://alantsai2007.blogspot.com/2014/09/BuildYourOwnApplicationFrameworkOnMvc-04-AutofacMvcIntegration.html">[iThome 第七屆鐵人賽 04] Autofac和Asp .Net Mvc結合</a><br></p><h2 id="WizKMOutline_1414590577032182">Log</h2><p>介紹完了Autofac之後，用了最常見的功能，Log服務來在深入介紹Autofac能夠做到什麼地步。 </p><p><a href="http://alantsai2007.blogspot.com/2014/09/BuildYourOwnApplicationFrameworkOnMvc-05-LogLibrary.html">[iThome 第七屆鐵人賽 05] 打造第一個通用服務 - Log</a><br></p><h2 id="WizKMOutline_1414590577032986">ViewModel和AutoMapper</h2><p>接下來是Mvc很常見的ViewModel和Model之間的轉換。介紹了為什麼要使用ViewModel，並且如何透過Automapper來讓ViewModel和Model之間的轉換變的簡單。 </p><p><a href="http://alantsai2007.blogspot.com/2014/09/BuildYourOwnApplicationFrameworkOnMvc-06-ViewModelIntro.html">[iThome 第七屆鐵人賽 06] ViewModel的重要性</a><br></p><p><a href="http://alantsai2007.blogspot.com/2014/09/ithome-07-automapper-entityviewmodel.html">[iThome 第七屆鐵人賽 07] AutoMapper 介紹 - 簡單化Entity和ViewModel之間的轉換</a><br></p><p><a href="http://alantsai2007.blogspot.com/2014/09/BuildYourOwnApplicationFrameworkOnMvc-08-AutoMapperConfigEasier.html">[iThome 第七屆鐵人賽 08] 框架簡化建立AutoMapper對應的設定</a></p><h2 id="WizKMOutline_1414590577032885">Repository和Unit of Work</h2><p>介紹完了Model和ViewModel之間用AutoMapper的轉換，實際看了如何實作常見的Repository + Unit Of Work來抽離Data Access Layer的功能。 </p><p><a href="http://alantsai2007.blogspot.com/2014/10/BuildYourOwnApplicationFrameworkOnMvc-09-RepositoryPattern.html">[iThome 第七屆鐵人賽 09] 用Repository Pattern抽離對Entity Framework的依賴</a><br></p><p><a href="http://alantsai2007.blogspot.com/2014/10/BuildYourOwnApplicationFrameworkOnMvc-10-UnitOfWork.html">[iThome 第七屆鐵人賽 10] 加上 Unit of Work，抽離Entity Framework的依賴就完美了</a></p><h2 id="WizKMOutline_1414590577032391">Alerts服務和BaseController</h2><p>如何有一個共通傳遞訊息到前端的方法是很重要的，並且前端想用其他方式呈現這些資訊的做法也需要考慮進去。 </p><p><a href="http://alantsai2007.blogspot.com/2014/10/BuildYourOwnApplicationFrameworkOnMvc-11-alertservice.html">[iThome 第七屆鐵人賽 11] 傳遞資訊到前端的通用型服務</a></p><p>也介紹了有一個共通Controller的重要性，不管是要增加共通方法到所有的Controller還是要把一些客制的ActionResult呼叫使用，都提供了一個很好的Wrapper。 </p><p><a href="http://alantsai2007.blogspot.com/2014/10/BuildYourOwnApplicationFrameworkOnMvc-12-importantofbasecontroller.html">[iThome 第七屆鐵人賽 12] BaseController的重要性</a></p><p><a href="http://alantsai2007.blogspot.com/2014/10/BuildYourOwnApplicationFrameworkOnMvc-29-JsonResult-Implement.html">[iThome 第七屆鐵人賽 29] Javascript和Mvc溝通 - 實作篇</a></p><h2 id="WizKMOutline_1414590577032252">Service層的工作</h2><p>SoC的概念非常重要，因此有了Service層來處理邏輯相關的內容。 </p><p><a href="http://alantsai2007.blogspot.com/2014/10/BuildYourOwnApplicationFrameworkOnMvc-13-service-intro.html">[iThome 第七屆鐵人賽 13] Service層 - 概念篇</a><br></p><p><a href="http://alantsai2007.blogspot.com/2014/10/BuildYourOwnApplicationFrameworkOnMvc-14-service-basicCRUD.html">[iThome 第七屆鐵人賽 14] 把目前的CRUD功能放到Service層</a><br></p><p>這邊介紹了如何建立自己的Service層，有了Service層之後如何把一些內容自動化。 </p><p><a href="http://alantsai2007.blogspot.com/2014/10/BuildYourOwnApplicationFrameworkOnMvc-15-FileProcess.html">[iThome 第七屆鐵人賽 15] 處理檔案上傳</a><br></p><p><a href="http://alantsai2007.blogspot.com/2014/10/BuildYourOwnApplicationFrameworkOnMvc-16-FileProcess-InService.html">[iThome 第七屆鐵人賽 16] 處理檔案上傳 2 - 放到Service層</a><br></p><h3 id="WizKMOutline_1414590577032367">自動化搜索</h3><p>任何application都需要能夠搜索，因此能夠處理共通的搜索邏輯是非常重要的，而Service能夠完全處理這些內容。 </p><p><a href="http://alantsai2007.blogspot.com/2014/10/BuildYourOwnApplicationFrameworkOnMvc-20-IndexPage-concept.html">[iThome 第七屆鐵人賽 20] 搜索頁面 - 思考篇</a><br></p><p><a href="http://alantsai2007.blogspot.com/2014/10/BuildYourOwnApplicationFrameworkOnMvc-21-IndexPage-ViewModel.html">[iThome 第七屆鐵人賽 21] 搜索頁面 - ViewModel的定義</a><br></p><p><a href="http://alantsai2007.blogspot.com/2014/10/BuildYourOwnApplicationFrameworkOnMvc-22-IndexPage-DynamicWhereLinq.html">[iThome 第七屆鐵人賽 22] 搜索頁面 - Service層的工作 -動態產生Linq條件</a><br></p><p><a href="http://alantsai2007.blogspot.com/2014/10/BuildYourOwnApplicationFrameworkOnMvc-23-IndexPage-AutomaticSsearch.html">[iThome 第七屆鐵人賽 23] 搜索頁面 - Service層的工作 - 自動套用一般搜索條件</a><br></p><p><a href="http://alantsai2007.blogspot.com/2014/10/BuildYourOwnApplicationFrameworkOnMvc-24-IndexPage-AutomaticSsearch-view.html">[iThome 第七屆鐵人賽 24] 搜索頁面 - Service層的工作 - View方面的處理</a><br></p><p><a href="http://alantsai2007.blogspot.com/2014/10/BuildYourOwnApplicationFrameworkOnMvc-25-IndexPage-AutomaticSearch-improved.html">[iThome 第七屆鐵人賽 25] 搜索頁面 - Service層的工作 - 搜索在進化</a><br></p><h2 id="WizKMOutline_1414590577032810">資料驗證</h2><p>任何Application都需要做資料驗證，因此介紹了如何把不同層級的錯誤訊息串接再起來，並且方便呈現。 </p><p><a href="http://alantsai2007.blogspot.com/2014/10/BuildYourOwnApplicationFrameworkOnMvc-17-DataValidation-concept.html">[iThome 第七屆鐵人賽 17] 資料驗證 - 思路篇</a><br></p><p><a href="http://alantsai2007.blogspot.com/2014/10/BuildYourOwnApplicationFrameworkOnMvc-18-DataValidation-implement.html">[iThome 第七屆鐵人賽 18] 資料驗證 - 實作篇</a></p><h2 id="WizKMOutline_1414590577032810">SelectListFill：下拉式選項內容自動產生</h2><p>能夠讓每一次都產生下拉式選單的內容可以避免掉一些只有在Runtime才測試的出來的問題。 </p><p><a href="http://alantsai2007.blogspot.com/2014/10/BuildYourOwnApplicationFrameworkOnMvc-19-GenerateSelectListFroDropDownList.html">[iThome 第七屆鐵人賽 19] 框架產生下拉式資料的內容</a><br></p><h2 id="WizKMOutline_1414590577032400">ModelMetadata 和 JsonResult</h2><p>ModelMetadata可以讓我們用Convention的方式來產生一致的UI。 </p><p><a href="http://alantsai2007.blogspot.com/2014/10/BuildYourOwnApplicationFrameworkOnMvc-26-ModelMetadata-Intro.html">[iThome 第七屆鐵人賽 26] View相關的處理 - Model的Metadata介紹</a><br></p><p><a href="http://alantsai2007.blogspot.com/2014/10/BuildYourOwnApplicationFrameworkOnMvc-27-ModelMetadata-Implement.html">[iThome 第七屆鐵人賽 27] View相關的處理 - 框架自動增加Model Metadata</a><br></p><p>自訂的JsonResult可以讓我們前端和後端溝通的時候變得更加容易。 </p><p><a href="http://alantsai2007.blogspot.com/2014/10/BuildYourOwnApplicationFrameworkOnMvc-28-JsonResult-Problem.html">[iThome 第七屆鐵人賽 28] Javascript和Mvc溝通 - 概念篇</a><br></p><p align="left"><a href="http://alantsai2007.blogspot.com/2014/10/BuildYourOwnApplicationFrameworkOnMvc-29-JsonResult-Implement.html">[iThome 第七屆鐵人賽 29] Javascript和Mvc溝通 - 實作篇</a><br></p><h1 id="WizKMOutline_1414590577032737">結語</h1><p>框架這個東西真的是要看團隊和看案子。並不是所有的功能都需要，也並不是所有的做法都對。框架其實只是一些個人意見和個人喜好針對某些事情的處理做包裝和把一些細節隱藏起來讓開發著專注於重要的問題：也就是解決客戶的問題，而不是一直重複debug一些疏忽的小事造成系統出問題。 </p><p>這系列的文章其實只是給大家一個起點，希望對於大家有些幫助。 </p>