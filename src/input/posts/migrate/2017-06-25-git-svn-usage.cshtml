Title: "[git]開始使用git - 用git操作svn repo"
Published: 2017-06-25
Modified: 2017-06-25
Image: /posts/migrate/2017-06-25-git-svn-usage_Asset/image_thumb(18).png
Tags: ["git"]
RedirectFrom: 2017/06/git-svn-usage.html
Series: []
---
<section><p>git作為分散式版控的一項優勢是可以在offline的情況下查到log，並且能夠隨時隨地commit；這個對於當中央repo在公司內部的時候會更加有感（因為通常內部都要透過vpn，就有可能導致速度慢，甚至有些vnp還會切斷你的外網，   沒有google要怎麼寫code XD）   </p><p>很不幸的，如果你今天被要求使用svn或者tfs，你就沒有辦法像git一樣在無連線狀態下查log。   </p><p>但是別絕望，git其實可以透過一個Bridge來和svn溝通，從外部來看，你好像還是使用svn，但是其實你實際上使用git。所以git的那些優點（local有一個版本，因此可以local commit，快速切branch等）完全可以使用。          </p><p>這是一個很好開始嘗試git的方式。   </p><div class="bs-callout bs-callout-info">題外話，我當初接觸git就是為了他的local功能，因為實在太好用了，最後慢慢就希望全部換成git。   </div><div class="bs-callout bs-callout-info"><p>昨天有幸為 <a href="http://study4.tw/Activity/Details/6">Study4的6月場次介紹git</a>，其中有學員有特別提到關於git和svn溝通的部分，    因此把當初所做的事情作了一些整理。如果有任何地方看不懂或者有缺或者漏的地方，在留言給我。    </p></div></section>    <section>     <a name="KMContentPageTopID" id="KMContentPageTopID"></a><div id="divKMOutline" style="border-style: groove none; margin: 10px 0px;"><ul style="margin: 0px 0px 0px 20px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498402191974558" ;="">這篇的情境</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498402191974422" ;="">用git作為svn的溝通需要準備什麼？</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498402191974143" ;="">準備工作 - svn使用者對照表</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498402191974301" ;="">使用工具產生</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498402191974281" ;="">用svn-migration-scripts.jar</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498402191974146" ;="">用svn log產生</a><br></li></ul></ul><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498402191974276" ;="">開始使用 git svn</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498402191974819" ;="">從svn建立git repo</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498402191975461" ;="">設定svn ignore檔案</a><br></li></ul><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498402191975201" ;="">日常版控行為</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498402191975954" ;="">從svn抓取最新</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498402191975432" ;="">把git的commit推上svn</a><br></li></ul><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498402191975912" ;="">建立一個git repo mirror</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498402191975209" ;="">結語</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498402191975863" ;="">參考資料</a><br></li></ul></div></section>      <a name="more"></a>    <section><h2 id="WizKMOutline_1498402191974558">這篇的情境</h2><p>這篇的主要的情境是：<em>作為一個開發者，我的中央版控使用的是svn，但是我希望使用git來管控應該怎麼做？</em></p><p>因此，這是一個<em>單項同步</em>的概念：svn中央庫作為<em>main repo</em>，而不是說在建立一個中央的git repo然後和中央svn做<em>雙向同步</em>。   </p><p>這篇針對的是windows環境，在linux和mac不確定是否一樣操作，但是本質應該差不多。   </p></section><section><h2 id="WizKMOutline_1498402191974422">用git作為svn的溝通需要準備什麼？</h2><p>首先有幾個程式是<em>必備</em>的：   </p><dl class="border-around"><dt>     Git for windows    </dt><dd><p>既然要用git做為和svn溝通的工具，git當然是需要安裝的程式。    </p><p>快速鏈接：<a href="https://git-scm.com/download/win">Git for windows</a></p></dd><dt>     git svn    </dt><dd>     這個是git和svn溝通的bridge - 以前需要額外下載，目前是整合在git for windows裡面    </dd><dt>     svn的command line工具    </dt><dd><p>如果有安裝TortoiseSVN（小烏龜），可以不用安裝，小烏龜有帶。    </p><p>可以再<a href="https://www.collab.net/downloads/subversion">CollabNet</a>下載到，目前最新版本是1.9.5    </p><p>快速鏈接：(<a href="https://www.collab.net/servlets/OCNDirector?id=CSVN1.9.5WINC32">x86</a>)、(<a href="https://www.collab.net/servlets/OCNDirector?id=CSVN1.9.5WINC64">x64</a>)    </p></dd></dl><p><em>非必備</em>程式：    </p><dl class="border-around"><dt>      svn-migration-scripts.jar     </dt><dd><p>這個是Atlassian提供的一個小工具，方便處理一些事情。如果要使用也需要安裝<em>java</em>。     </p><p>source位置：<a href="https://bitbucket.org/atlassian/svn-migration-scripts/downloads/?_ga=2.168637795.315027162.1498375431-502814452.1486436883">source</a></p><p>快速鏈接：<a href="https://bitbucket.org/atlassian/svn-migration-scripts/downloads/svn-migration-scripts.jar">直接下載</a></p></dd></dl><p>如果不確定是否所需要的工具都有了，可以用 <code> svn-migration-scripts.jar</code>做檢查，在command line輸入：   </p><p><kbd>java -jar svn-migration-scripts.jar verify</kbd></p><figure><a href="https://lh3.googleusercontent.com/-ZXw-plX8Q5w/WU_QhGb3sAI/AAAAAAAAV28/Dw_TvR64XvQoSvtQeuDP1v03JAKDY0yXACHMYCw/s1600-h/image%255B2%255D"><img width="654" height="151" title="執行完的結果，列出幾個工具使用的版本" style="display: inline; background-image: none;" alt="執行完的結果，列出幾個工具使用的版本" src="/posts/migrate/2017-06-25-git-svn-usage_Asset/image_thumb(18).png" border="0" class="img-responsive"></a><br><figcaption>執行完的結果，列出幾個工具使用的版本</figcaption></figure></section><section><h2 id="WizKMOutline_1498402191974143">準備工作 - svn使用者對照表</h2><p>在svn裡面，誰commit是用帳號做表現，但是在git裡面則是 姓名+email。   </p><p>很有可能目前svn和git的對應著無法直接對上，因此先建立一個對應表。   </p><p>這個對應表的格式很簡單，就是：   </p><p><code>{{svn帳號}} = {{git姓名}} &lt;{{git email}}&gt;</code></p><p>多人，就是每個人空一行。   </p><p>以我的例子來說，假設svn帳號是J00，然後要對到我，那麼這個檔案內容就會是：   </p><code>J00 = Alan Tsai &lt;alan@@alantsai.net&gt;</code><h3 id="WizKMOutline_1498402191974301">使用工具產生</h3><p>假設你的人名清單很明確可以一個一個自己手刻，但是如果很多情況下建議用產生的方式。   </p><p>產生有兩種方式：   </p><ol><li>用svn-migration-scripts.jar</li><li>用svn log搭配一些工具產生 - 需要先用svn把repo抓下來，個人覺得比較麻煩</li></ol><h4 id="WizKMOutline_1498402191974281">用svn-migration-scripts.jar</h4><p>執行 (把 <em>{{svn repo url}}</em> 換成對應的repo url)：   </p><pre class="brush: powershell;"><code class="language-powershell line-numbers">java -jar svn-migration-scripts.jar authors {{svn repo url}} &gt; author.txt</code></pre><p>會得到這個repo裡面每一個使用者的清單，在手動調整一下對應的git名稱即可，下面是我拿open source的一個svn repo的產生結果：   </p><figure><a href="https://lh3.googleusercontent.com/-F8_9IMtpfME/WU_QjxZ4-QI/AAAAAAAAV3E/w98dg9c2hQkJ1EEWXUNw_qDmmuX33EmfwCHMYCw/s1600-h/image%255B5%255D"><img width="654" height="211" title="某個open source svn的人名清單，這邊沒有pipe到檔案因此可以直接看到" style="display: inline; background-image: none;" alt="某個open source svn的人名清單，這邊沒有pipe到檔案因此可以直接看到" src="/posts/migrate/2017-06-25-git-svn-usage_Asset/image_thumb[1](18).png" border="0" class="img-responsive"></a><br><figcaption>某個open source svn的人名清單，這邊沒有pipe到檔案因此可以直接看到</figcaption></figure><h4 id="WizKMOutline_1498402191974146">用svn log產生</h4><p>這個的前期條件是已經有把那個svn repo用svn抓下來。   </p><p>在那個資料夾下面執行：   </p><pre class="brush: powershell;"><code class="language-powershell line-numbers">svn log --quiet --xml | sed -n -e "s/&lt;\/\?author&gt;//g" -e "/[&lt;&gt;]/!p" | sort | sed "$!N; /^\(.*\)\n\1$/!P; D" &gt; author.txt</code></pre><p>這個會得到一個所有svn使用者的清單。   </p><div class="bs-callout bs-callout-warning"><p>請注意建立出來的txt檔案格式，一定要是<em><strong>UTF-8 (不包含BOM)</strong> </em></p><p>這個可以用Visual Studio Code看出來，在右下角，<code>UTF-8</code>是對的。假設要改，可以點一下，然後選擇<code>Save with Encoding</code>在選擇<code>UTF-8</code>即可。 </p><figure><a href="https://lh3.googleusercontent.com/-_PIT1bWHAPs/WU_Ql6p2BjI/AAAAAAAAV3M/25LrJ-q_GT00AZYNzYHZ0iOedRii8BrSwCHMYCw/s1600-h/image%255B8%255D"><img width="579" height="112" title="看到編碼，UTF-8 with BOM是錯的" style="display: inline; background-image: none;" alt="看到編碼，UTF-8 with BOM是錯的" src="/posts/migrate/2017-06-25-git-svn-usage_Asset/image_thumb[2](12).png" border="0" class="img-responsive"></a><a href="https://lh3.googleusercontent.com/-505ljda0Zt8/WU_QpYSFpHI/AAAAAAAAV3U/dv11mOKs8LwZej2JFLnDgjun8xOcaXTlQCHMYCw/s1600-h/image%255B11%255D"><img width="654" height="119" title="選擇save with encoding" style="display: inline; background-image: none;" alt="選擇save with encoding" src="/posts/migrate/2017-06-25-git-svn-usage_Asset/image_thumb[3](9).png" border="0" class="img-responsive"></a><a href="https://lh3.googleusercontent.com/-jbD9oyrzATY/WU_QutlB3tI/AAAAAAAAV3c/BlOzPFhHHpUsLbbv99-lNyWCIREolOLGwCHMYCw/s1600-h/image%255B14%255D"><img width="654" height="306" title="選擇 UTF-8" style="display: inline; background-image: none;" alt="選擇 UTF-8" src="/posts/migrate/2017-06-25-git-svn-usage_Asset/image_thumb[4](10).png" border="0" class="img-responsive"></a><br><figcaption>選擇為UTF-8</figcaption></figure></div></section><section><h2 id="WizKMOutline_1498402191974276">開始使用 git svn</h2><p>整個的使用流程如下：   </p><ol><li>從svn建立git repo</li><li>日常git版控行為 (開branch，commit，merge master等) 這個就不說明</li><li>從svn抓取最新</li><li>把git的commit推上svn</li></ol><section><h3 id="WizKMOutline_1498402191974819">從svn建立git repo</h3><p>首先是需要把svn所有commit抓下來，這個如果svn repo很大的話，需要一些時間，因此要做好放著讓他跑的準備。   </p><p>如果你的svn repo是標準方式建立的（換句話說，會有trunk、branches和tags的話）呼叫方式如下：   </p><pre class="brush: powershell;"><code class="language-powershell line-numbers">git svn clone svn://localhost svn -A author.txt --stdlayout --prefix=svn/</code></pre><p>參數說明如下：   </p><dl><dt><code>-A</code></dt><dd>     這個傳入的是那個帳號名稱對應檔 - 在 <a href="#WizKMOutline_1498402191974143">準備工作 - svn使用者對照表</a> 篇的到的結果檔案    </dd><dt><code>--stdlayout</code></dt><dd>     表示svn使用的是標準方式建立出來，如果今天不是標準方式建立，那麼需要自己設定 trunk名稱： <code>--trunk=<trunk_subdir></trunk_subdir></code>，branch名稱：<code>--branches=<branches_subdir></branches_subdir></code>和     tag名稱：<code>--tags=<tags_subdir></tags_subdir></code></dd><dt><code>--prefix=svn/</code></dt><dd>     建立出來的svn 遠端 branch用 <code>svn/</code>作為前戳，方便區分哪些是svn那邊的remote branch。    </dd></dl><div class="bs-callout bs-callout-info"><code>git svn clone</code>其實就是：    <pre class="brush: powershell;"><code class="language-powershell line-numbers">git svn int
   git svn fetch</code></pre>的縮寫   </div><div class="bs-callout bs-callout-warning">假設呼叫clone過程不知道什麼原因停掉了，可以呼叫 <kbd>git svn fetch</kbd> - 它會從上次中斷的地方繼續往下做   </div><section><h4 id="WizKMOutline_1498402191975461">設定svn ignore檔案</h4><p>由於svn可能有自定一些ignore的規則，因此當clone完之後，建議先把ignore加進來。     </p><p>clone完直接使用：     </p><pre class="brush: powershell;"><code class="language-powershell line-numbers">git svn show-ignore &gt;&gt; .gitignore
    git add .gitignore
    git commit -m "加入svn ignore清單"</code></pre></section></section><h3 id="WizKMOutline_1498402191975201">日常版控行為</h3><p>抓下來之後，會發現其實整個svn的trunk、branch和tags都變成了git的遠端remote branch。 </p><p></p><figure><a href="https://lh3.googleusercontent.com/-h9hBdf4C6LA/WU_Wm141XJI/AAAAAAAAV3w/R0QWAD8SfscTi_xA0xx4sDX6n7-bgQq9gCHMYCw/s1600-h/image%255B3%255D"><img width="530" height="359" title="可以看到這個repo只有一個trunk，所以remote/svn/trunck" style="display: inline; background-image: none;" alt="可以看到這個repo只有一個trunk，所以remote/svn/trunck" src="/posts/migrate/2017-06-25-git-svn-usage_Asset/image_thumb[1](19).png" border="0" class="img-responsive"></a><figcaption>可以看到這個repo只有一個trunk，所以remote/svn/trunck</figcaption></figure> <p>接下來就像日常使用git的方式使用 - 也可以使用gui工具例如source tree。   </p><p>等到最後要準備上到svn的時候，需要先從svn抓最新的回來   </p><section><h3 id="WizKMOutline_1498402191975954">從svn抓取最新</h3><p>和同git遠端repo溝通一樣，在溝通前，要先做一次更新，確保本機和正式機器的版本是一樣新。   </p><p>這個時候，可以呼叫：   </p><pre class="brush: powershell;"><code class="language-powershell line-numbers">git svn rebase</code></pre><div class="bs-callout bs-callout-info"><p>這個其實類似于git裡面的<code>git pull --rebase</code>。    </p><p>所以如果有發生衝突，同等於在rebase的時候發生衝突要處理的方式一樣。    </p></div></section><section><h3 id="WizKMOutline_1498402191975432">把git的commit推上svn</h3><p>假設沒有開branch，那麼再上一個步奏svn抓取最新的時候，會自動把master對最新的做rebase，因此不用做任何處理，直接呼叫：     </p><pre class="brush: powershell"><code class="language-powershell line-numbers">git svn dcommit</code></pre>即可    <p>假設有開branch，那麼這個時候應該要用<code>rebase</code>+<code>merge</code>來達到master和branch 合併的時候會是 Fast Forward Merge：    </p><pre class="brush: powershell"><code class="language-powershell line-numbers">git checkout branch1
   git rebase master
   git checkout master
   git merge branch1
   git svn dcommit</code></pre></section></section><section><h2 id="WizKMOutline_1498402191975912">建立一個git repo mirror</h2><p>到目前為止其實會發現，git svn只是有一個特殊的branch在記錄目前svn版本在哪裡，然後只有需要和遠端溝通的時候呼叫git svn相關指令，其他操作者一般git沒有兩樣。  </p><p>這時候假設想要把目前記錄推送到某一個git repo上面，做法其實很簡單（就是一般加remote的方式）：  </p><ol><li>加入一個remote - 例如 <code>git remote add origin {{git repo url}}</code></li><li>然後push上去：<code>git push -u origin master</code></li></ol>在去哪個git repo看就會發現都上去了  </section><section><h2 id="WizKMOutline_1498402191975209">結語</h2><p>要換使用一個工具或方法通常都是因為有某些痛點和需求。因此從svn要轉git，先用這種方式，等到都確定要轉的時候，可以讓大家改成用那個git repo版本而把svn給停用掉。  </p><p>另外一個常見的版控，TFS也有類似的bridge工具可以下載 - 運作原理和git svn差不多。  </p></section><section><h2 id="WizKMOutline_1498402191975863">參考資料</h2><dl><dt><a href="https://www.atlassian.com/git/tutorials/migrating-overview">Atlassian關於從Svn到Git的說明(英文)</a></dt><dd>    很棒的一系列介紹如何從svn轉到git   </dd><dt><a href="https://git-scm.com/docs/git-svn">git svn 指令(英文)</a></dt><dd>    git svn每一個指令和參數的含義   </dd><dt><a href="https://git-scm.com/book/zh-tw/v1/Git-%E8%88%87%E5%85%B6%E4%BB%96%E7%B3%BB%E7%B5%B1-Git-%E8%88%87-Subversion">官方介紹git svn</a></dt><dd>    鏈接是中文內容   </dd><dt><a href="http://www.sailmaker.co.uk/blog/2013/05/05/migrating-from-svn-to-git-preserving-branches-and-tags-3/">Migrating from SVN to Git, preserving branches and tags</a></dt><dd>    不錯的概觀介紹。   </dd><dt><a href="https://github.com/doggy8088/Learn-Git-in-30-days/blob/master/zh-tw/29.md">第 29 天：如何將 Subversion 專案匯入到 Git 儲存庫</a></dt><dd>    保哥30天git裡面關於和svn溝通的部分   </dd></dl></section> <section> <div class="wlWriterEditableSmartContent" id="scid:77ECF5F8-D252-44F5-B4EB-D463C5396A79:c938c061-8046-46aa-a432-572585499281" style="margin: 0px; padding: 0px; float: none; display: inline;">標籤: <a href="/tags/Git" rel="tag">Git</a></div></section>