Title: "[.Net]Dll明明有在，為什麼出現找不到DLL錯誤 - 一次搞懂如何處理Dll版本問題(Dll Hell)"
Published: 2017-10-31
Modified: 2017-10-31
Image: /posts/migrate/2017-10-31-donet-dll-hell-problem-how-to-use-bindingredirect_Asset/image_thumb(50).png
Tags: ["faq",".net"]
RedirectFrom: 2017/10/donet-dll-hell-problem-how-to-use-bindingredirect.html
Series: []
---
<section><figure><a href="https://lh3.googleusercontent.com/-kMrPxEIXwSc/WfdSVvS0u2I/AAAAAAAAWw8/9C_4leKHXkwy9Q8m84NLAlh4atK2t71iQCHMYCw/s1600-h/image%255B2%255D"><img width="654" height="290" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-10-31-donet-dll-hell-problem-how-to-use-bindingredirect_Asset/image_thumb(50).png" border="0" class="img-responsive"></a><br><figcaption>圖片來源：https://pixabay.com/en/despair-alone-being-alone-archetype-513528/</figcaption></figure></section><section><p>  當系統越來越模組化，大量library開始透過nuget方式組成的時候，開始會遇到一個情況，那就是Dll版本問題（Dll Hell）。   </p><p>  如果對於Dll版本問題沒有一些了解的情況下，常常會遇到明明Dll存在bin下面，但是還是出現找不到的錯誤訊息：   </p><figure><a href="https://lh3.googleusercontent.com/-s7uuxXOnVgI/WfdSYxWJnPI/AAAAAAAAWxE/tW04O4nVww0toPr_bPTp_5XxxJ8YTpzVwCHMYCw/s1600-h/image%255B5%255D"><img width="654" height="117" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-10-31-donet-dll-hell-problem-how-to-use-bindingredirect_Asset/image_thumb[1](43).png" border="0" class="img-responsive"></a><br><figcaption>System.IO.FileLoadException: Could not load file or assembly 'Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference.</figcaption></figure><p>  這篇將對於.Net如何處理Dll Hell的問題做一些介紹。   </p></section><section><div class="bs-callout bs-callout-default">   範例程式碼在：<a href="https://github.com/alantsai-samples/dotnet-dll-hell-problem">https://github.com/alantsai-samples/dotnet-dll-hell-problem</a></div></section>   <section> <a name="KMContentPageTopID" id="KMContentPageTopID"></a><div id="divKMOutline" style="border-style: groove none; margin: 10px 0px;"><ul style="margin: 0px 0px 0px 20px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1509380152601237" ;="">解決方式 - 手動設定config - TL;DR</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1509380152602718" ;="">解決方式 - 自動設定 - TL;DR</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1509380152602610" ;="">Console自動設定binding</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1509380152602192" ;="">Web自動設定binding</a><br></li></ul><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1509380152602830" ;="">問題發生的原因</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1509380152602676" ;="">問題重現</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1509380152602967" ;="">Console</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1509380152602263" ;="">Web</a><br></li></ul><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1509380152602658" ;="">結語</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1509380152602860" ;="">參考資料</a><br></li></ul></div></section>   <a name="more"></a><section><h2 id="WizKMOutline_1509380152601237">解決方式 - 手動設定config - TL;DR</h2><p>  要解決這個問題基本上是透過在config設定<code>bindingRedirect</code>，以上面為例子是找不到<code>Newtonsoft.Json 6.0.0.0版本</code>，因此設定：   </p><dl><dt>     打開config - 如果是web就是<code>web.config</code>，如果是console就是<code>app.config</code></dt><dd>    加入以下在<code>configuration</code> -&gt;下<code>runtime</code>面：     <pre class="brush: xml;"><code class="language-markup line-numbers">&lt;assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1"&gt;
 &lt;dependentAssembly&gt;
   &lt;assemblyIdentity name="Newtonsoft.Json" culture="neutral" publicKeyToken="30ad4fe6b2a6aeed"/&gt;
   &lt;bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0"/&gt;
 &lt;/dependentAssembly&gt;
&lt;/assemblyBinding&gt;</code></pre></dd><dd></dd><dt>     每一個dll版號就加入一個<code>dependentAssembly</code></dt><dd><ul><li><code>assemblyIdentity</code> - 用來設定那個dll要對應。其他還蠻直覺，不過<code>publicKeyToken</code>可以透過:       <ol><li>Google 搜索</li><li>         用powershell - 例如 <kbd>([system.reflection.assembly]::loadfile("c:\Newtonsoft.Json.dll")).FullName</kbd> 會取得          <code>Newtonsoft.Json, Version=7.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed</code></li><li>使用 <code>sn</code>工具 - <kbd>sn -T "c:\Newtonsoft.Json.dll"</kbd> - 會取得 <code>Public key token is 30ad4fe6b2a6aeed</code></li></ol></li><li><code>bindingRedirect</code>設定版號對應       <ol><li><code>oldVersion</code> - 那些版號要對應 - 可以用 <code>-</code> 來包含版號區間。</li><li><code>newVersion</code> - 在<code>oldVersion</code>符合的版號要<em>對應</em>到那個版號</li></ol><div class="bs-callout bs-callout-warning">       注意，<code>newVersion</code>不代表一定比<code>oldVersion</code><strong><em>高</em></strong>。換句話說也有可能高版本全部要用低版本的dll（不過這種情景比較少        ，因為一般都是高版本會向下兼容）       </div><div class="bs-callout bs-callout-warning">       注意版號取得的方式，用Powershell最準，如果用 檔案總管 點 右鍵 檢查的版號不一定準。       </div></li></ul></dd><dd></dd></dl></section><section><h2 id="WizKMOutline_1509380152602718">解決方式 - 自動設定 - TL;DR</h2><p>  Visual Studio (簡稱VS) 可以幫忙自動設定正確的binding，這邊又有分console和web差異。   </p><section><h3 id="WizKMOutline_1509380152602610">Console自動設定binding</h3><dl><dt>     把console的csproj unload並且開啟修改畫面    </dt><dd><figure><a href="https://lh3.googleusercontent.com/-BEUKwSUPs78/WfdSapUJMyI/AAAAAAAAWxM/ZpBfpH9V_Y4JoTm8Pv5KvqBYvq4YBSomACHMYCw/s1600-h/image%255B8%255D"><img width="457" height="420" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-10-31-donet-dll-hell-problem-how-to-use-bindingredirect_Asset/image_thumb[2](36).png" border="0" class="img-responsive"></a><figcaption>開啟csproj修改</figcaption></figure></dd><dd></dd><dt>     加入 <code>AutoGenerateBindingRedirects</code>到<code>PropertyGroup</code></dt><dd><p>    直接加入<code>&lt;AutoGenerateBindingRedirects&gt;true&lt;/AutoGenerateBindingRedirects&gt;</code></p><figure><a href="https://lh3.googleusercontent.com/-OIc8LuTdLvI/WfdSeuFMcWI/AAAAAAAAWxU/OtP3dxVBZtYh_IDNG7_eXuPBGZOErvzdgCHMYCw/s1600-h/image%255B11%255D"><img width="654" height="292" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-10-31-donet-dll-hell-problem-how-to-use-bindingredirect_Asset/image_thumb[3](33).png" border="0" class="img-responsive"></a><figcaption>加完方式</figcaption></figure></dd><dd></dd><dt>     重新rebuild專案    </dt><dd><figure><a href="https://lh3.googleusercontent.com/-QQ6IZeYTrXk/WfdSkab5JlI/AAAAAAAAWxc/3lBXmtDkib81gyRTRT9xkredsDQGEKNnQCHMYCw/s1600-h/image%255B14%255D"><img width="654" height="214" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-10-31-donet-dll-hell-problem-how-to-use-bindingredirect_Asset/image_thumb[4](33).png" border="0" class="img-responsive"></a><figcaption>bin下面的<code>app.config</code>自動加入<code>bindingRedirect</code></figcaption></figure></dd><dd></dd></dl><div class="bs-callout bs-callout-info">   target 4.5.2的.net framework 之後的專案預設都有幫忙加入了，所以應該不用手動設定。   </div></section><section><h3 id="WizKMOutline_1509380152602192">Web自動設定binding</h3><p>   和console不同，VS不會自動調整<code>Web.config</code>，但是VS會有提示。    </p><p>   當build完之後，檢查<code>Warning</code>頁簽    </p><figure><a href="https://lh3.googleusercontent.com/-dY9nhBJyJQw/WfdSoF7XMyI/AAAAAAAAWxk/aRzD89F2ckwaBv-c4DwmVf70LR-ooddwQCHMYCw/s1600-h/image%255B17%255D"><img width="654" height="171" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-10-31-donet-dll-hell-problem-how-to-use-bindingredirect_Asset/image_thumb[5](24).png" border="0" class="img-responsive"></a><br><figcaption>可以看到有告知版本問題</figcaption></figure><p>   可以直接對warning點兩下，會自動問說要不要加入，如果要加入，會自動修改Web.confi。    </p><figure><a href="https://lh3.googleusercontent.com/-PDp8VQZoUBA/WfdSsL1RGTI/AAAAAAAAWxs/Wsla9XCptpEy_BTobwrI73Me_Z8yikY_ACHMYCw/s1600-h/image%255B20%255D"><img width="654" height="331" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-10-31-donet-dll-hell-problem-how-to-use-bindingredirect_Asset/image_thumb[6](21).png" border="0" class="img-responsive"></a><br><figcaption>是否自動加入的畫面</figcaption></figure></section>   以上就是解決Dll版本問題的處理方式，如果對於如何重現問題有興趣可以往下看。  </section><section><h2 id="WizKMOutline_1509380152602830">問題發生的原因</h2><p>  我們都知道同一個版本的dll同一時間只能夠有一個版本。   </p><p>  假設專案A使用library C的1.0版本，然後專案B使用library C的2.0版本，當build的時候，坑定只會剩下一個library C。換句話說要嘛是1.0要嘛是2.0.   </p><p>  那麼問題來了，假設留下來的是1.0，而專案B需要的是library 2.0版本，.Net runtime怎麼run的起來，2.0不存在啊！因為這樣所以炸掉。   </p><p>  因此我們需要有個東西告訴runtime，到底要用什麼版本。   </p><div class="bs-callout bs-callout-info">   dll Reference那個版本的dll其實是寫在dll裡面的，如果我們用工具像是 justDecompile 可以看到 Reference的版號資訊是寫在manifest裡面的。    <figure><a href="https://lh3.googleusercontent.com/-mMgwBOci5RM/WfdSuPh1d7I/AAAAAAAAWx0/UCEav1Kg_yg0Jy3pIfOqryKpVVrYqXQTQCHMYCw/s1600-h/image%255B23%255D"><img width="541" height="340" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-10-31-donet-dll-hell-problem-how-to-use-bindingredirect_Asset/image_thumb[7](15).png" border="0" class="img-responsive"></a><br><figcaption>看到library使用6.0.8的json.net</figcaption></figure></div></section><section><h2 id="WizKMOutline_1509380152602676">問題重現</h2><p>  要能夠了解問題和如何解決就要有一個能夠重現問題的專案，因此接下來要打造一個有問題的專案。會分廠兩個部分，console和web。   </p><section><h3 id="WizKMOutline_1509380152602967">Console</h3><p>  console的部分大概是：   </p><dl><dt>     建立個console專案    </dt><dd><figure><a href="https://lh3.googleusercontent.com/-wLQCCu3pJMQ/WfdSwaa0wrI/AAAAAAAAWx8/WavEO7XUoDkduH-g56Eadslb-OZWGSr_ACHMYCw/s1600-h/image%255B26%255D"><img width="654" height="375" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-10-31-donet-dll-hell-problem-how-to-use-bindingredirect_Asset/image_thumb[8](15).png" border="0" class="img-responsive"></a><figcaption>建立出一個console專案</figcaption></figure></dd><dd></dd><dt>     使用<code>Newtonsoft.Json</code>7.0版本    </dt><dd><figure><a href="https://lh3.googleusercontent.com/-ZqHu1pso40s/WfdS4EgCVMI/AAAAAAAAWyI/R57Lub2-9p0cQiIIbeyaxIA4wjyghOatACHMYCw/s1600-h/image%255B29%255D"><img width="654" height="221" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-10-31-donet-dll-hell-problem-how-to-use-bindingredirect_Asset/image_thumb[9](5).png" border="0" class="img-responsive"></a><figcaption>加入nuget專案</figcaption></figure></dd><dd></dd><dt>     建立一個library專案    </dt><dd><figure><a href="https://lh3.googleusercontent.com/-TAYbOsw5c1I/WfdS64GETjI/AAAAAAAAWyQ/UumiiIw7F1kMSsf9ZL06uoKVKZgLmMK3ACHMYCw/s1600-h/image%255B32%255D"><img width="654" height="375" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-10-31-donet-dll-hell-problem-how-to-use-bindingredirect_Asset/image_thumb[10](5).png" border="0" class="img-responsive"></a><figcaption>建立一個library專案</figcaption></figure></dd><dd></dd><dt>     在library專案使用<code>Newtonsoft.Json</code>6.0版本 - 並且建立一個方法    </dt><dd><figure><a href="https://lh3.googleusercontent.com/-cagAiTXQcOs/WfdS-g0pNBI/AAAAAAAAWyY/gPq32c5lwzEY3-jCY8VOauhxhp-1MvNsQCHMYCw/s1600-h/image%255B35%255D"><img width="654" height="188" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-10-31-donet-dll-hell-problem-how-to-use-bindingredirect_Asset/image_thumb[11](7).png" border="0" class="img-responsive"></a><figcaption>加入json.net 6.0.8</figcaption></figure><p>    在<code>Class1</code>加入一個<code>Convert</code>的方法：     </p><pre class="brush: csharp;"><code class="language-csharp line-numbers">public string Convert()
{
 return JsonConvert.SerializeObject(new { From = "Lib"});
}</code></pre></dd><dd></dd><dt>     在console使用library並且run起來    </dt><dd>     console的main邏輯如下： <pre class="brush: csharp;"><code class="language-csharp line-numbers">static void Main(string[] args)
{
 Console.WriteLine(JsonConvert.SerializeObject(new { From = "Console"}));
 Console.WriteLine(new Class1().Convert());
 Console.ReadLine();
}</code></pre><figure><a href="https://lh3.googleusercontent.com/-Ho0IUQaNgfA/WfdTCREv5TI/AAAAAAAAWyg/DwFkV1hljEYiDG7qUVTQWbl1zDNep7iTwCHMYCw/s1600-h/image%255B38%255D"><img width="357" height="145" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-10-31-donet-dll-hell-problem-how-to-use-bindingredirect_Asset/image_thumb[12](8).png" border="0" class="img-responsive"></a><figcaption>執行沒有問題</figcaption></figure></dd><dd></dd><dt>     拿掉<code>AutoGenerateBindingRedirects</code></dt><dd><p>     檢查產出的<code>bin\DllHellProblem.exe.config</code>發現有自動產生<code>bindingRedirect</code></p><p>    還記得上面自動設定提到VS專案會自動加入的部分，因此我們直接修改<code>DllHellProblem.csproj</code>，然後把<code>AutoGenerateBindingRedirects</code>拿掉。     </p><p>    記得先<kbd>clean</kbd>在<kbd>run</kbd>，發現直接出錯：     </p><figure><a href="https://lh3.googleusercontent.com/-snl-vcJNg-o/WfdTHWnIvAI/AAAAAAAAWyo/yxjbgFZ0bVsl3uiy6y-NvSGnfTyY0o84gCHMYCw/s1600-h/image%255B41%255D"><img width="654" height="137" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-10-31-donet-dll-hell-problem-how-to-use-bindingredirect_Asset/image_thumb[13](8).png" border="0" class="img-responsive"></a><figcaption>出現找不到dll</figcaption></figure><p>    發現bin下面的config，<code>bindingRedirect</code>沒有自己產生所以出錯。手動加入就對了。     </p></dd><dd></dd></dl><div class="bs-callout bs-callout-default"><p>   console範例完成可以再githu看到：<a href="https://github.com/alantsai-samples/dotnet-dll-hell-problem/tree/sample/console">https://github.com/alantsai-samples/dotnet-dll-hell-problem/tree/sample/console</a></p><p>   git標籤：<code>sample/console</code></p><p>   兩種方式取得：    </p><ol><li><ul><li><code>git clone https://github.com/alantsai-samples/dotnet-dll-hell-problem.git</code></li><li><code>git checkout sample/console</code></li></ul></li><li>      從github release下載：<a href="https://github.com/alantsai-samples/dotnet-dll-hell-problem/releases/tag/sample%2Fconsole">下載鏈接</a></li></ol></div></section><section><h3 id="WizKMOutline_1509380152602263">Web</h3><dl><dt>      加入一個Asp .net Mvc的專案     </dt><dd><figure><a href="https://lh3.googleusercontent.com/-KlExdCeo2LI/WfdTKkI7ygI/AAAAAAAAWyw/6IrZhVNEWcE4vzvaKS6G1pQaWUF-QlT0ACHMYCw/s1600-h/image%255B44%255D"><img width="654" height="428" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-10-31-donet-dll-hell-problem-how-to-use-bindingredirect_Asset/image_thumb[14](5).png" border="0" class="img-responsive"></a><figcaption>加入一個Mvc專案</figcaption></figure></dd><dd></dd><dt>      在<code>HomeController</code>使用class library並且把web.config的bindingRedirect拿掉     </dt><dd><p>     在<code>HomeController</code>的<code>Index</code>加入<code>new ClassLibrary1.Class1().Convert();</code></p><p>     在<code>Web.config</code>先把<code>Newtonsoft.json</code>的<code>bindingRedirect</code>拿掉。      </p></dd><dd></dd><dt>      build專案並且檢查Error List     </dt><dd><p>     build專案，檢查<code>Error List</code></p><figure><a href="https://lh3.googleusercontent.com/-AJEOcVlJrGw/WfdTPujMz6I/AAAAAAAAWy4/5HYeeLk2vvI5RZOir2B_8SKoz1IbrIiUACHMYCw/s1600-h/image%255B47%255D"><img width="654" height="333" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-10-31-donet-dll-hell-problem-how-to-use-bindingredirect_Asset/image_thumb[15](5).png" border="0" class="img-responsive"></a><figcaption>點兩下自動加入bindingRedirect</figcaption></figure></dd><dd></dd></dl><div class="bs-callout bs-callout-default"><p>   console範例完成可以再githu看到：<a href="https://github.com/alantsai-samples/dotnet-dll-hell-problem/tree/sample/web">https://github.com/alantsai-samples/dotnet-dll-hell-problem/tree/sample/web</a></p><p>   git標籤：<code>sample/web</code></p><p>   兩種方式取得：    </p><ol><li><ul><li><code>git clone https://github.com/alantsai-samples/dotnet-dll-hell-problem.git</code></li><li><code>git checkout sample/web</code></li></ul></li><li>      從github release下載：<a href="https://github.com/alantsai-samples/dotnet-dll-hell-problem/releases/tag/sample%2Fweb">下載鏈接</a></li></ol></div></section></section><section><h2 id="WizKMOutline_1509380152602658">結語</h2><p>  在Console其實非常方便，因為VS會自動幫忙處理bindingRedirect，但是web不會。   </p><p>  不過web會在<code>Error List</code>裡面以warning的方式告訴，並且方便自動加入。   </p><p>  這個故事告訴我們，<em>要好好看Warning資訊</em>。   </p><p>  希望透過這篇對於如何處理不同library使用到相同<em>但是版號</em>不同的套件不會出現找不到dll的錯誤。   </p></section><section><h2 id="WizKMOutline_1509380152602860">參考資料</h2><dl><dt>     官方介紹    </dt><dd><a href="https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/redirect-assembly-versions">https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/redirect-assembly-versions</a></dd><dd></dd><dt>     官方介紹自動binding Redirect    </dt><dd><a href="https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/how-to-enable-and-disable-automatic-binding-redirection">https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/how-to-enable-and-disable-automatic-binding-redirection</a></dd><dd></dd><dt>     黑大介紹用檔案總管檢查版號的小陷阱 - 建議還是用Powershell比較不會有問題    </dt><dd><a href="http://blog.darkthread.net/post-2015-11-25-assemblyinformationversion.aspx">http://blog.darkthread.net/post-2015-11-25-assemblyinformationversion.aspx</a></dd><dd></dd></dl></section>    <section>     <div class="wlWriterEditableSmartContent" id="scid:77ECF5F8-D252-44F5-B4EB-D463C5396A79:4909a989-fa3a-40cd-9b1c-622067bfc1ea" style="margin: 0px; padding: 0px; float: none; display: inline;">標籤: <a href="/tags/.net" rel="tag">.net</a>,<a href="/tags/FAQ" rel="tag">FAQ</a></div></section>