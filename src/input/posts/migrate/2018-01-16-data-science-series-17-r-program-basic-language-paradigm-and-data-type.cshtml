Title: "[Data Science 到底是什麼從一個完全外行角度來看][17]R語言基礎 上篇 - 語言特性和資料形態"
Published: 2018-01-16
Modified: 2018-01-16
Image: /posts/migrate/2018-01-16-data-science-series-17-r-program-basic-language-paradigm-and-data-type_Asset/image_thumb(76).png
Tags: ["「data science 到底是什麼從一個完全外行角度來看」","r","data science"]
RedirectFrom: 2018/01/data-science-series-17-r-program-basic-language-paradigm-and-data-type.html
Series: ["「Data Science 到底是什麼從一個完全外行角度來看」"]
---
<section><figure><a href="https://lh3.googleusercontent.com/-fVvknVbrq0g/Wl4ad7HFxDI/AAAAAAAAXgc/yHo92kbZMZIfzzKQ5oN6KmzusheTMU5PACHMYCw/s1600-h/image%255B2%255D"><img width="654" height="290" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2018-01-16-data-science-series-17-r-program-basic-language-paradigm-and-data-type_Asset/image_thumb(76).png" border="0" class="img-responsive"></a><br><figcaption>圖片來源：                 <a href="https://pixabay.com/en/books-spine-colors-pastel-1099067/">https://pixabay.com/en/books-spine-colors-pastel-1099067/</a> 和                 <a href="https://pixabay.com/en/math-blackboard-education-classroom-1547018/">https://pixabay.com/en/math-blackboard-education-classroom-1547018/</a></figcaption></figure></section><section><p>在上一篇(<a href="http://blog.alantsai.net/2018/01/data-science-series-16-r-hello-world-with-stock-analysis-using-quantmod.html">[16]用R來看股票，透過quantmod了解R的強大</a>)用了<code>quantmod</code>快速了解如何使用R並且用他來做資料處理的便利性。</p><p>在這篇將會更深入一點點的介紹R的語言特色、幾種不同的資料形態。     </p><div class="bs-callout bs-callout-default">這篇的範例程式碼在github：<a href="https://github.com/alantsai/blog-data-science-series/tree/master/src/chapter-17-r-language-paradigm-data-type">alantsai/blog-data-science-series 裡面的 src/chapter-17-r-language-paradigm-data-type</a></div></section>     <section> <a name="KMContentPageTopID" id="KMContentPageTopID"></a><div id="divKMOutline" style="border-style: groove none; margin: 10px 0px;"><ul style="margin: 0px 0px 0px 20px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1516113008736340" ;="">R的語言特性（Language Paradigm）</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1516113008736554" ;="">Vector Base - 一切都是向量</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1516113008736291" ;="">Functional Programming</a><br></li></ul><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1516113008736936" ;="">R的資料形態(data type)</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1516113008736383" ;="">這篇有用到的R function</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1516113008736696" ;="">結語</a><br></li></ul></div></section> <a name="more"></a>    <section><h2 id="WizKMOutline_1516113008736340">R的語言特性（Language Paradigm）</h2><p>基本上現在任何程式語言都會有多個語言特性，例如C#一開始屬於<em>Object Oriented Language</em>，不過後來吸收了一些別的特性，又多出了像是<em>Functional Language</em>的特性等。知道了語言特性之後，對於整個運作模式會比較了解。那R是屬於什麼類型呢？     </p><p>基本上，個人覺得R有兩個重要的特性：         </p><ol><li>Vector Base</li><li>Functional Programing</li></ol><section><h3 id="WizKMOutline_1516113008736554">Vector Base - 一切都是向量</h3><p>基本上在R裡面，最基本的組成是vector，因此就算一個簡單的<code>2+3</code>，最後的結果其實是一個vector：             </p><figure><a href="https://lh3.googleusercontent.com/-c3prHA6_ScI/Wl4ahEvkbBI/AAAAAAAAXgk/x05_rKVds1MafSV0Bhg5kclv3oJSd9aHQCHMYCw/s1600-h/image%255B5%255D"><img width="459" height="357" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2018-01-16-data-science-series-17-r-program-basic-language-paradigm-and-data-type_Asset/image_thumb[1](64).png" border="0" class="img-responsive"></a><br><figcaption>可以看到最後的結果是 5，不過他的值是[1] - 換句話說就是vector的<em>第一筆</em></figcaption></figure><div class="bs-callout bs-callout-info">題外話 - 在R裡面，assign variable用的是 <code>&lt;-</code>。雖然用<code>=</code>也可以，但是因為<code>=</code>在特殊地方有特殊含義，因此還是建議用<code>&lt;-</code>。         </div><p>vector為導向有什麼特別的嗎？vector為主對於做運算非常方便：             </p><dl><dt>單數運算</dt><dd><p>如果是對<em>單數</em>做加減乘除，會把所有的vector都加上那個值。                     </p><pre class="brush: plain;"><code class="language-none line-numbers">b &lt;- c(2,3)
b * 2</code></pre><figure><a href="https://lh3.googleusercontent.com/-er4xFtsL8Bg/Wl4aiyXMZ3I/AAAAAAAAXgs/9TtjLK1tck4hAbPk0PBZoFj2w0YF9BUigCHMYCw/s1600-h/image%255B8%255D"><img width="444" height="522" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2018-01-16-data-science-series-17-r-program-basic-language-paradigm-and-data-type_Asset/image_thumb[2](52).png" border="0" class="img-responsive"></a> <figcaption>可以看到，在vector裡面兩個值都被*上2</figcaption></figure></dd><dt>兩個vector運算</dt><dd><p>如果是兩個vector相加，那麼對應的位置會互加。                     </p><pre class="brush: plain;"><code class="language-none line-numbers">c &lt;- c(6,7)
b+c</code></pre><figure><a href="https://lh3.googleusercontent.com/-vwxpJ0kBWz0/Wl4an6mE6iI/AAAAAAAAXg0/2Yj37f9Ui6cnGrqtkDmIJz4bn6FrvmjPwCHMYCw/s1600-h/image%255B14%255D"><img width="373" height="414" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2018-01-16-data-science-series-17-r-program-basic-language-paradigm-and-data-type_Asset/image_thumb[4](51).png" border="0" class="img-responsive"></a> <figcaption>可以看到，對應位置的會互相加</figcaption></figure></dd></dl><div class="bs-callout bs-callout-info">要做到這種所有內容都要運算，一般語言都要用到loop才有辦法做到。不過vector base基本上就不需要，這也是為什麼雖然R有支援loop但是用到比較少。         </div></section><section><h3 id="WizKMOutline_1516113008736291">Functional Programming</h3><p>基本上R可以理解為functional programing language。因此如果很熟悉functional programming的開發方式，會覺得很親切。         </p><p>舉例來說，剛剛那個所有vector都+2的範例，如果改成functional寫法可以是：         </p><pre class="brush: plain;"><code class="language-none line-numbers">sapply(b, function(x){x + 2})</code></pre><p>得到的結果會是：<code>[1] 4 5</code></p><p>這邊的意思是，對於每一個<code>b</code>vairable的<em><strong>每一個值</strong></em>，會對他們執行一個<em>anonymous function （匿名函數）</em>，這個function就是把<em>值+2</em></p><div class="bs-callout bs-callout-info"><p><code>apply</code>類型的function很常見，例如：<code>lapply</code>、<code>sapply</code>、<code>vapply</code>等。             </p><p>基本上每一個用途差不多，差異在於<em>回傳的形態</em>。             </p></div><div class="bs-callout bs-callout-info">如果C#有習慣用lambada，會覺得其實很親切，這個其實就是C#從functional language學習到的特色之一。         </div></section><p>R還有一些別的特性，不過個人認為上面兩個最重要，並且因為這兩個的關係，所以雖然R支援loop，但是<em>使用比較少</em>(所以也不會特別介紹)。     </p><p>對於特性有點概念了之後，來看看R裡面的形態和其他資料結構。     </p></section><section><h2 id="WizKMOutline_1516113008736936">R的資料形態(data type)</h2><p>R和一般語言不一樣，在C#裡面如果有個variable是int，例如：<code>int a</code>，那麼a的形態就是integer。     </p><p>但是在R裡面，雖然資料形態是integer，但是他的底層是<em>vector</em>，這也是為什麼說R是vector base，因為一切都是vector。         integer只是代表<em>裡面</em>儲存的資料形態而已。     </p> <div class="table-responsive"><table class="table">            <tbody>                <tr>                    <th>資料形態</th>                    <th>範例值</th>                    <th>Note</th>                </tr>                <tr>                    <td>Logical</td>                    <td><br>                        <code>TRUE</code>,<br>                        <code>FALSE</code>,<br>                        <code>T</code>,<br>                        <code>F</code><br>                    </td>                    <td>注意要全大寫</td>                </tr>                <tr>                    <td>Numeric</td>                    <td><br>                        <code>10.5</code>,<br>                        <code>2.5</code><br>                    </td>                    <td></td>                </tr>                <tr>                    <td>Integer</td>                    <td><br>                        <code>1L</code>，<br>                        <code>2L</code><br>                    </td>                    <td>注意後面要加上<br>                        <code>L</code><br>                    </td>                </tr>                <tr>                    <td>Character</td>                    <td><br>                        <code>"abc"</code>,<br>                        <code>'123'</code>,<br>                        <code>"TRUE"</code><br>                    </td>                    <td>單引號<br>                        <code>'</code>或者雙引號<br>                        <code>"</code>都可以</td>                </tr>                <tr>                    <td>Complex</td>                    <td><br>                        <code>3 + 2i</code><br>                    </td>                    <td></td>                </tr>                <tr>                    <td>Raw</td>                    <td><br>                        <code>charToRaw("hello")</code><br>                    </td>                    <td></td>                </tr>                <tr>                    <td>Factor</td>                    <td><br>                        <code>factor(c("male", "female"))</code><br>                    </td>                    <td><br>                        <ul>                            <li>Factor其實就是c#的enum</li>                            <li>Factor不算data type，不過歸在這邊比較好看</li>                        </ul>                    </td>                </tr>            </tbody>        </table></div><div class="table-responsive"><table class="table">            <tbody>                <tr>                    <th>資料形態</th>                    <th>範例</th>                </tr>                <tr>                    <td>Logical</td>                    <td><br>                        <pre class="brush: plain;"><code class="language-none line-numbers">l &lt;- c(TRUE, FALSE, T, F)
class(l)
is.logical(l)
</code></pre>                    </td>                </tr>                <tr>                    <td>Numeric</td>                    <td><br>                        <pre class="brush: plain;"><code class="language-none line-numbers">n &lt;- c(10.5, 2.5)
class(n)
is.numeric(n)
                </code></pre>                    </td>                </tr>                <tr>                    <td>Integer</td>                    <td><br>                        <pre class="brush: plain;"><code class="language-none line-numbers">i &lt;- c(1L,2L)
class(i)
is.integer(i)
</code></pre>                    </td>                </tr>                <tr>                    <td>Character</td>                    <td><br>                        <pre class="brush: plain;"><code class="language-none line-numbers">char &lt;- c("abc", '123', 'TRUE')
class(char)
is.character(char)
                </code></pre>                    </td>                </tr>                <tr>                    <td>Complex</td>                    <td><br>                        <pre class="brush: plain;"><code class="language-none line-numbers">complex &lt;- c(3 + 2i)
class(complex)
is.complex(complex)
                </code></pre>                    </td>                </tr>                <tr>                    <td>Raw</td>                    <td><br>                        <pre class="brush: plain;"><code class="language-none line-numbers">raw &lt;- charToRaw("hello")
class(raw)
is.raw(raw)
                </code></pre>                    </td>                </tr>                <tr>                    <td>Factor</td>                    <td><br>                        <pre class="brush: plain;"><code class="language-none line-numbers">gender &lt;- factor(c("male", "female"))
class(gender)
is.factor(gender)
                </code></pre>                    </td>                </tr>            </tbody>        </table></div>        <div class="bs-callout bs-callout-warning"><p>要非常注意這些Data Type非常重要，之後在分析資料的時候很有可能因為形態錯誤的關係導致使用的演算法結果錯誤。         </p><p>因此了解這些基本形態會減少掉之後很多問題。         </p></div></section><section><h2 id="WizKMOutline_1516113008736383">這篇有用到的R function介紹</h2><p>在這邊用到了三個R的方法（還有<code>c</code>不過這個下一篇介紹）：         </p><dl><dt>class</dt><dd>                 這個用來看variable裡面的data type是什麼             </dd><dt>is.*</dt><dd>                 用來判斷某個variable的class符不符合。                 <div class="bs-callout bs-callout-info">有個function是<code>as.*</code>，用來做<em>轉型</em>用。                 </div></dd><dt>factor()</dt><dd>把vector轉成factor</dd></dl></section><section><h2 id="WizKMOutline_1516113008736696">結語</h2><p>在這篇首先對R的語言特性先做了介紹，了解到兩個最重要的特性：         </p><ol><li>Vector base</li><li>functional programming</li></ol><p>再來看了R裡面的每一個最小單位的不同形態。     </p><p>在下一篇將會介紹R裡面的資料結構（Data Structure），和如果有問題如何找到相關的文件。     </p></section>     <section>         <div class="wlWriterEditableSmartContent" id="scid:77ECF5F8-D252-44F5-B4EB-D463C5396A79:32e8212f-9d42-4daa-80b6-e675453f2485" style="margin: 0px; padding: 0px; float: none; display: inline;">標籤: <a href="/tags/%e3%80%8cData+Science+%e5%88%b0%e5%ba%95%e6%98%af%e4%bb%80%e9%ba%bc%e5%be%9e%e4%b8%80%e5%80%8b%e5%ae%8c%e5%85%a8%e5%a4%96%e8%a1%8c%e8%a7%92%e5%ba%a6%e4%be%86%e7%9c%8b%e3%80%8d" rel="tag">「Data Science 到底是什麼從一個完全外行角度來看」</a>,<a href="/tags/data+science" rel="tag">data science</a>,<a href="/tags/R" rel="tag">R</a></div></section>