Title: "[.net framework 工程師看.net core][04]真跨平台.Net Core介紹"
Published: 2017-10-25
Modified: 2017-10-25
Image: /posts/migrate/2017-10-25-net-framework-see-new-core-04-net-core2-intro_Asset/image_thumb(49).png
Tags: ["「net framework工程師看net core」",".net","net-core"]
RedirectFrom: 2017/10/net-framework-see-new-core-04-net-core2-intro.html
Series: ["「net framework工程師看net core」"]
---
<section><figure><a href="https://lh3.googleusercontent.com/-z-6V1TDmMEY/We9xAHkzkaI/AAAAAAAAWvc/mQ1hI7801FwRtawhej6iPUxO6qa_Lq4DwCHMYCw/s1600-h/image%255B2%255D"><img width="654" height="290" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-10-25-net-framework-see-new-core-04-net-core2-intro_Asset/image_thumb(49).png" border="0" class="img-responsive"></a><br><figcaption>圖片來源：https://pixabay.com/en/annual-report-book-brochure-686343/</figcaption></figure></section><section><section><p>  在上一篇介紹完C#之後(<a href="http://blog.alantsai.net/2017/10/net-framework-see-new-core-03-csharp-programmer-language.html">工程師的語言 C#</a>)，基本上對於.Net Framework的整個開發環境也是有個基本的了解和概念之後，在這篇將會對新的framework：.net core做個基本介紹。   </p></section>   <section>    <a name="KMContentPageTopID" id="KMContentPageTopID"></a><div id="divKMOutline" style="border-style: groove none; margin: 10px 0px;"><ul style="margin: 0px 0px 0px 20px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1508863798519473" ;="">.Net Core的組成</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1508863798519623" ;="">.Net Core和.Net Framework的不同之處</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1508863798519196" ;="">.Net Core安裝位置和內容</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1508863798519863" ;="">.Net Core可以安裝的模式</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1508863798519933" ;="">.Net Core的可安裝版本</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1508863798519662" ;="">.Net Core的安裝路徑</a><br></li></ul><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1508863798519418" ;="">.Net Core的版本</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1508863798519905" ;="">.Net Core的執行方式</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1508863798519553" ;="">結語</a><br></li></ul></div></section>   <a name="more"></a>   <section><h2 id="WizKMOutline_1508863798519473">.Net Core的組成</h2><p>  和.Net Framework一樣，當提到.Net Core的時候，這個平台提供了三個重要功能：   </p><dl><dt>     編譯/建制程式碼的工具    </dt><dd><p>    .Net core和.Net framework不同在於提供了一個所謂的<code>dotnet</code> cli工具(也可以稱為app host)，這個工具提供了一個統一的api方便對專案做一些調整，並且提供像是build或者restore package的指令。    </p><p><code>dotnet</code> cli提供的還是一個wrapper，以compiler來說，底層其實用的也是Roslyn (.net Compiler platform)    </p></dd><dd></dd><dt>     .Net Core Base Class Library (BCL)    </dt><dd><p>    .Net Core和.Net Framework一樣，有提供了所謂的BCL。不過這個BCL其實從api的角度來說是少於.Net Framework，畢竟為了跨平台有些和Windows綁的很死的像是Windows Form就不包括在.Net Core的BCL。     </p><p>    CoreBCL也稱為CoreFx，有個<a href="https://github.com/dotnet/corefx">github repo</a></p></dd><dd></dd><dt>     Core Common Language Runtime (CoreCLR)    </dt><dd>     同.Net Framework一樣，也是有個CLR用來執行.Net Core的程式，不過這個CLR和.Net Framework不同，因此稱為<em>CoreCLR</em>。    </dd><dd></dd></dl><figure><a href="https://lh3.googleusercontent.com/-tjrgktdSWpw/We9xCg3M6lI/AAAAAAAAWvk/gDYuJ8wgjEIPRJ2vwUhlbC4cSsXfiHAPgCHMYCw/s1600-h/image%255B5%255D"><img width="520" height="563" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-10-25-net-framework-see-new-core-04-net-core2-intro_Asset/image_thumb[1](42).png" border="0" class="img-responsive"></a><br><figcaption>一樣CoreBCL和CoreCLR組成通常稱為runtime，也就是.Net Core。不過比較不一樣的是，這個runtime是由一個app host run起來的 (也就是所謂的<code>dotnet</code>的工具)</figcaption></figure></section><section><h2 id="WizKMOutline_1508863798519623">.Net Core和.Net Framework的不同之處</h2><p>  .Net Core基本上是.Net Framework的重寫，最主要目的/差異是：   </p><dl><dt>     達到真的跨平台    </dt><dd>     雖然理論上只要能夠run IL的CLR .Net 的程式就可以跨平台(例如 Mono就是一個這樣的CLR)，但是微軟並沒有support。.Net Core的CLR則是有真的提供由微軟support的跨平台版本。    </dd><dd></dd><dt>     更“小”的程式組合    </dt><dd>     基本上.Net Core是一個更加模組化的平台，換句話說整體的速度和使用的資源更少。因此更符合現代化的Microservice的架構和Container模式執行的結構。    </dd><dd></dd><dt>     CLR執行方式的不同    </dt><dd>     .Net Core使用app host (dotnet cli)來吧 CoreCLR執行起來，而.Net Framework則不是用app host run起來。因此，.Net Core的console 程式發佈出來是.dll做結尾而不是.exe    </dd><dd></dd><dt>     發佈模式的不同    </dt><dd><p>    .Net Core有     </p><ul><li><em>Framework Dependent Deployment(FDD)</em></li><li><em>Self-contained Deployment(SCD)</em></li></ul>兩種模式。       <p>   FDD和以前.Net Framework一樣，只有程式本身，需要執行的話那台電腦<em>需要</em>先安裝好.Net Core runtime。     </p><p>   SCD則是把.Net core runtime和程式包在一起，達到不需要有安裝.Net Core runtime就可以執行。    </p><div class="bs-callout bs-callout-info">    FDD和SCD的差異可以參考     <a href="http://blog.alantsai.net/2017/10/event-net-conf-workshop-02-1-net-core-console-with-FDD-publish.html">[.Net Core 與 .Net Standard 實戰教學][Lab][02-1]了解Framework Dependent Deployment(FDD)執行(發佈)模式</a></div></dd><dd></dd></dl><p>  因此.Net Core在定義上面和.Net Framework不同，.Net Framework還是以Windows為主的架構並且提供豐富的api，而.Net Core則是更偏向以microservice跨平台的程式開發。   </p></section><section><h2 id="WizKMOutline_1508863798519196">.Net Core安裝位置和內容</h2><p>  這個部分有：   </p><ol><li>.Net Core可以安裝的模式</li><li>.net Core的可安裝版本</li><li>.Net Core的安裝路徑</li></ol><section><h3 id="WizKMOutline_1508863798519863">.Net Core可以安裝的模式</h3><p>  和.Net Framework不同，.Net Core在安裝的時候分了兩個模式：   </p><ul><li>.Net Core SDK</li><li>.Net Core Runtime</li></ul><p>   .Net Core SDK包含了.Net Core Runtime的所有內容，並且多了一些和開發有關的工具。因此，如果<em>要開發</em>，就安裝<em>SDK</em>模式，如果只是<em>要執行</em>.Net Core的程式，那麼<em>安裝 runtime</em>即可。   </p><p>  這個和Java的JDK vs Runtime是一樣的概念。   </p><div class="bs-callout bs-callout-info">   關於準備.Net Core開發環境可以參考：<a href="http://blog.alantsai.net/2017/10/event-net-conf-workshop-01-install-net-core-sdk.html">[.Net Core 與 .Net Standard 實戰教學][Lab][01]準備環境</a></div></section><section><h3 id="WizKMOutline_1508863798519933">.Net Core的可安裝版本</h3><p>   .Net Core和.Net Framework不同，每一個版本都可以<em>同時</em>裝在一台電腦上面，因此更加容易使用和開發一樣的版本來run程式。    </p><figure><a href="https://lh3.googleusercontent.com/-sLgCzbUTVus/We9xFAEDWCI/AAAAAAAAWvs/NGU5wQzdHpQRa3aZRuxdBK5UEeYkMzhqgCHMYCw/s1600-h/image%255B14%255D"><img width="654" height="333" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-10-25-net-framework-see-new-core-04-net-core2-intro_Asset/image_thumb[4](32).png" border="0" class="img-responsive"></a><br><figcaption>一台電腦可以安裝多個版本，並且Self Contained Deployment可以再沒有裝runtime的電腦執行起來</figcaption></figure><div class="bs-callout bs-callout-info">    .Net Core發佈模式裡面的Self Contained Deployment可以包含runtime來發佈，可以達到電腦沒有裝runtime的情況下也可以跑程式    </div></section><section><h3 id="WizKMOutline_1508863798519662">.Net Core的安裝路徑</h3><p>   預設安裝的路徑在：<code>%programfiles%\dotnet\sdk</code></p><figure><a href="https://lh3.googleusercontent.com/-403n6GfoNEU/We9xIr2QSOI/AAAAAAAAWv0/G5Y3UHFKuy8QnXZ7RUZ5mVlVSX6va2FaACHMYCw/s1600-h/image%255B17%255D"><img width="553" height="282" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-10-25-net-framework-see-new-core-04-net-core2-intro_Asset/image_thumb[5](23).png" border="0" class="img-responsive"></a><br><figcaption>這台電腦裝了3個版本的.Net Core，1.0、1.1和2.0</figcaption></figure></section></section><section><h2 id="WizKMOutline_1508863798519418">.Net Core的版本</h2><p>  目前.Net Core進入到了2.0的時代，在這個版本裡面有個很重要.Net Standard也進入了2.0的版本。因此開發.Net Core變得更加容易（.net Standard在之後會在介紹）。   </p><p>  .Net Core 1.x的時代基本上處於一個比較不穩定的狀態，因為一切都還在確認中，假設有早期進入的就會發現一個很大的改變就是從csproj換到了project.json，然後又從project.json在換回了csproj。   </p><p>  因此如果有幸沒有碰過1.x時代，那麼基本上可以忽略直接從2.0進場。   </p></section><section><h2 id="WizKMOutline_1508863798519905">.Net Core的執行方式</h2><figure><a href="https://lh3.googleusercontent.com/-9aus9mRfCIo/We9xNmsiBAI/AAAAAAAAWv8/_YJc801DxmsNMnLhlE8hX6zhKIfJT2cAACHMYCw/s1600-h/image%255B20%255D"><img width="654" height="372" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-10-25-net-framework-see-new-core-04-net-core2-intro_Asset/image_thumb[6](20).png" border="0" class="img-responsive"></a><br><figcaption>從source code到執行起來的過程</figcaption></figure><ol><li>編譯程式碼 - .Net Core使用的compiler和.Net Framework一樣(至少是後來版本的一樣)，都是使用.Net Compiler Platform (Roslyn)</li><li>編譯出來的結果是IL程式碼 - 如果包含exe的模式（SCD），exe會是app host</li><li>執行起來的時候，會搭配.Net Core的base library - CoreBCL</li><li>透過CoreCLR run 起來會用RyuJIT做及時編譯 並且變成機器碼被執行 - RyuJIT和.Net Framework的JIT在效能上面有加強</li><li>如果是UWP的程式，可以再編譯的時候透過AOT-Compiler直接變成機器碼，來達到執行速度的提升</li></ol></section><section><h2 id="WizKMOutline_1508863798519553">結語</h2><p>  這篇介紹了.Net Core的一些基本情況，並且和.Net Framework做一些比較。希望透過這一篇能夠對.Net Core的整個環境有更加的了解。   </p><p>  是否目前就應該直接轉.Net Core?是否.Net Framework未來就會死掉呢？   </p><p>  基本上.Net Framework和.Net Core的對象不同因此不用擔心.Net Framework會死掉。至於是否進入.Net Core.....   </p><p>  在下一篇會對和.Net Core 2.0一起發佈的.Net Standard 2.0作介紹，如果還不確定是否要進入.Net Core，那麼可以先從擁抱.Net Standard 2.0開始。   </p></section><section>   <div class="wlWriterEditableSmartContent" id="scid:77ECF5F8-D252-44F5-B4EB-D463C5396A79:baf9e59b-74c7-4ad6-aa9e-2d04e514a311" style="margin: 0px; padding: 0px; float: none; display: inline;">標籤: <a href="/tags/%e3%80%8cnet+framework%e5%b7%a5%e7%a8%8b%e5%b8%ab%e7%9c%8bnet+core%e3%80%8d" rel="tag">「net framework工程師看net core」</a>,<a href="/tags/.net" rel="tag">.net</a>,<a href="/tags/net-core" rel="tag">net-core</a></div></section></section>