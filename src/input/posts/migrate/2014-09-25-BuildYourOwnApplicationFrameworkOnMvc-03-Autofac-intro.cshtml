Title: "[iThome 第七屆鐵人賽 03] Autofac基本介紹"
Published: 2014-09-25
Modified: 2014-11-30
Image: 2014-09-25-BuildYourOwnApplicationFrameworkOnMvc-03-Autofac-intro_Asset/image_thumb[1](71).png
Tags: ["Asp .Net Mvc","Autofac","「iThome 第七屆鐵人賽」"]
RedirectFrom: 2014/09/BuildYourOwnApplicationFrameworkOnMvc-03-Autofac-intro.html
Series: ["「iThome 第七屆鐵人賽」"]
---
<a id="KMContentPageTopID" name="KMContentPageTopID"></a> <div id="divKMOutline" style="border-top-style: groove; border-bottom-style: groove; border-right-style: none; margin: 10px 0px; border-left-style: none"> <ul style="margin: 0px 0px 0px 20px"> <li><a href="#WizKMOutline_1411655187069470" ;="">DI Container的選擇</a>  <li><a href="#WizKMOutline_1411655187069634" ;="">Autofac介紹</a>  <li><a href="#WizKMOutline_1411655187069586" ;="">Autofac 基本概念介紹</a>  <ul style="margin: 0px 0px 0px 30px"> <li><a href="#WizKMOutline_1411655187069513" ;="">第一步，建立ContainerBuilder</a>  <li><a href="#WizKMOutline_1411655187069240" ;="">第二步，註冊服務</a>  <li><a href="#WizKMOutline_1411655187069449" ;="">第三步，建立Container</a>  <li><a href="#WizKMOutline_1411655187069891" ;="">最後一步，取得我們要的Component</a></li></ul> <li><a href="#WizKMOutline_1411655187069771" ;="">Autofac 使用範例</a>  <li><a href="#WizKMOutline_1411655187069284" ;="">結語</a>  <li><a href="#WizKMOutline_1411655187069121" ;="">Reference</a></li></ul></div> <p>在上一篇：<a href="http://alantsai2007.blogspot.com/2014/09/BuildYourOwnApplicationFrameworkOnMvc-02-ioc-intro.html">IoC基本概念介紹</a>介紹了IoC和DI的概念。在最後提到了，如果沒有一個東西幫我們管理DI，那麼其實整個的彈性設計還是無法彈性起來。 </p> <p>因此在這一篇，我們就來看一下其中一個比較常用的DI Container：Autofac。 </p>  <a name='more'></a><h1 id="WizKMOutline_1411655187069470">DI Container的選擇</h1> <p>其實有很多種DI Container，它們的運作邏輯都差不多，因此假設不希望在自己的專案裡面使用Autofac，完全可以換一個用的習慣的DI Container。 </p> <div class="bs-callout bs-callout-info"> <p>之前在第一篇提到的<a href="https://github.com/MattHoneycutt/Fail-Tracker">Fail-Tracker(Github)</a>，它裏面使用的就是Structuremap這個DI Container。 </p></div> <div class="bs-callout bs-callout-primary"> <p>如果還沒有選好要用的DI Container，又想要貨比三家，可以參考這篇部落格 <a href="http://www.palmmedia.de/blog/2011/8/30/ioc-container-benchmark-performance-comparison">IoC Container Benchmark - Performance comparison</a> 看看針對比較常見的.Net DI Container做效能和功能的比較。 </p></div> <h1 id="WizKMOutline_1411655187069634">Autofac介紹</h1> <div class="bs-callout bs-callout-default"> <h4><a href="http://lh4.ggpht.com/-PpffZ-vrNRQ/VCQoaXkyRiI/AAAAAAAANZU/BdadqIdcVGQ/s1600-h/image%25255B3%25255D.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="2014-09-25-BuildYourOwnApplicationFrameworkOnMvc-03-Autofac-intro_Asset\image_thumb[1](71).png" width="50" height="45"></a>Autofac</h4> <ul> <li>官網：<a href="http://autofac.org/">http://autofac.org/</a>  <li>文件：<a href="http://autofac.readthedocs.org/en/latest/">http://autofac.readthedocs.org/en/latest/</a>  <li>Nuget上面和它有關的package：<a href="https://www.nuget.org/packages?q=Author%3A%22Autofac+Contributors%22+Owner%3A%22alexmg%22+Autofac*">Nuget網頁搜索</a>  <li>Autofac nuget 安裝指令：<kbd>Install-Package Autofac</kbd>  <li>Autofac 和asp .net mvc 5 整合的nuget 安裝指令：<kbd>Install-Package Autofac.Mvc5</kbd>  <li>其他備註：Autofac不止適合用在Mvc裡面，基本上所有類型的.Net他都有對應的整合Helper（就像上面那個就是針對mvc 5的整合helper）。 </li></ul></div> <h1 id="WizKMOutline_1411655187069586">Autofac 基本概念介紹</h1> <p>基本上來說使用Autofac的流程就是： </p><figure><figcaption><a href="http://lh4.ggpht.com/-Dp6v99pFgf4/VCQogNlP2vI/AAAAAAAANZk/dmXhkmTnnjM/s1600-h/Autofac%252520Basic%252520Flow%25255B10%25255D.png"><img title="Autofac Basic Flow" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="Autofac Basic Flow" src="2014-09-25-BuildYourOwnApplicationFrameworkOnMvc-03-Autofac-intro_Asset\Autofac Basic Flow_thumb[6].png" width="158" height="244"></a>Autofac最基本使用流程圖</figcaption> </figure> <h2 id="WizKMOutline_1411655187069513">第一步，建立ContainerBuilder</h2> <p>在第一步就是建立一個ContainerBuilder的物件。要建立DI Container，你當然需要告訴他什麽東西配對什麽，因此，這個物件會記錄你註冊進去的Service（服務）和Component（元件）- 等一下在有比較詳細介紹這兩個的意思，最後都註冊完了，就建立出一個DI Container。 </p> <h2 id="WizKMOutline_1411655187069240">第二步，註冊服務</h2> <p>第二步就是註冊服務。在Autofac裡面基本上最長看到的應該就是Service和Component： </p> <ul> <li><em>Component</em>：要註冊到Container的類別。Component基本上就是你和DI Container要東西的時候，他會new給你的類別  <li><em>Service</em>：Service就是Component會提供的服務。基本上會是interface（當然，不一定是要interface）。 </li></ul>因此，簡單來看，Service是interface，Component就是interface的實作。因此，在註冊到ContainerBuilder的時候，要告訴他，什麽service（interface），對應到什麽 component（interface實作的class）。  <p>在註冊服務這一邊，Autofac有提供所謂的module，也就是比較複雜或可重複使用的服務註冊可以把它包成一個module，這樣以後註冊起來很方便（Autofac和Mvc的結合也是用了 Module，方便註冊Mvc相關） </p> <p>在註冊服務這一方面，Autofac提供了很多種的註冊方式，可以由寫C#來註冊，也可以由讀xml來設定註冊，因此非常彈性。 </p> <div class="bs-callout bs-callout-info"> <p>在註冊這一塊其實很多細節，詳細可以參考：<a href="http://autofac.readthedocs.org/en/latest/register/index.html">Registering Component</a> </p></div> <h2 id="WizKMOutline_1411655187069449">第三步，建立Container</h2> <p>第三步就是當我們把要用的service和component都註冊完成了之後，就會呼叫ContainerBuilder.Build()。這個的東西就是我們的DI Container。 </p> <h2 id="WizKMOutline_1411655187069891">最後一步，取得我們要的Component</h2> <p>最後，有了Container，我們就可以透過Container，來取得我們需要的component。 </p> <p>這個在文件裡面稱之為<em>Resolving</em>，相關的使用方法可以參考文件的<a href="http://autofac.readthedocs.org/en/latest/resolve/index.html">Resolving Service</a>。 </p> <div class="bs-callout bs-callout-warning"> <p>Resolving我不會提太多，因為基本上多我們來說是無縫的和Mvc整合，我們不需要自己手動Resolve。因此，之後有需要請參考文件。 </p></div> <h1 id="WizKMOutline_1411655187069771">Autofac 使用範例</h1> <p>下面的範例是我從官網抄下來，裡面的注解介紹了每一個部份： </p><pre class="brush: csharp;">// 第一步，建立ContainerBuilder<br />var builder = new ContainerBuilder();<br /><br />// 開始 第二步，註冊service<br /><br />// 註冊ConsoleLogger這個class為ILogger Service的Component<br />builder.RegisterType&lt;ConsoleLogger&gt;.As&lt;ILogger&gt;();<br /><br />// 如果寫法是：builder.RegisterType&lt;ConsoleLogger&gt;(); <br />// 那麼就是ConsoleLogger這個class為ConsoleLogger Service的Component<br /><br />// 註冊自己實例化出來的物件<br />// 上面是只註冊class type（因此，用到的時候是autofac幫你new出來），這邊是直接用這個object<br />var output = new StringWriter();<br />builder.RegisterInstance(output).As&lt;TextWriter&gt;();<br /><br />// 用lambda 註冊會更有彈性，因為傳進來的c是container的instance，因此可以用c來做一些複雜的東西。<br />builder.Register(c =&gt; new ConfigReader("mysection")).As&lt;IConfigReader&gt;();<br /><br />// 假設不想要一個一個註冊，可以用scan的方式。<br />// 下面scan一個assembly所有的type，當那個type的名字最後結尾是Repository的時候，<br />// 把它註冊的service設為這個class的interface<br />builder.RegisterAssemblyTypes(myAssembly)<br /> .Where(t =&gt; t.Name.EndsWith("Repository"))<br /> .AsImplementedInterfaces();<br /><br />//結束 第二步<br /><br />// 第三步，註冊都完成了，建立自己的container<br />var container = builder.Build();<br /><br />// 第四部，從container取得對應的component。<br />// 這邊用using包起來，因為出了這個scope，一切Resolve出來的都會被釋放掉。<br />// 這部份在我們整個系列碰到並不多，因為不建議自己每一個這樣取出來，<br />// 而是用深度整合的方式來讓一切像自動發生。<br />// 詳細之後就會比較清楚<br />using(var scope = container.BeginLifetimeScope())<br />{<br />  var reader = container.Resolve&lt;IConfigReader&gt;();<br />}<br /></pre><br /><h1 id="WizKMOutline_1411655187069284">結語</h1><p>如果從來沒有使用過DI Container，看到這邊可能還是覺得很抽象，不確定怎麼用。不用擔心，之後我們在開發框架的時候會使用到，到時候在回來比照前面這些內容，相信因該會給一個不錯的起始點。 </p><p>Autofac其實細部有很多內容，我這邊只碰到了最基礎的部份，希望透過這一篇能夠打開DI Container和Autofac的一些學習曲綫，給予一個好的起始點，之後要查找問題能夠更容易一些。 </p><p>本來這一篇會介紹到Autofac如何和Asp .net Mvc整合，但在寫下去怕太長，因此Mvc的部份就留到下一次在講。 </p><h1 id="WizKMOutline_1411655187069121">Reference</h1><p>再次總結一下相關資源： </p><ul><li>第一個一定要再次介紹官網，因為裡面的文件很詳細（只不過它是英文）<a href="http://autofac.org/">官網</a> 、<a href="http://autofac.readthedocs.org/en/latest/">文件</a> <br /><li>黑大曾經有寫過一些Autofac相關：<a href="http://blog.darkthread.net/post-2011-06-07-autofac-notes-1.aspx">Autofac筆記 1</a>、 <a href="http://blog.darkthread.net/blogs/darkthreadtw/archive/tags/Autofac/default.aspx">其他Autofac相關</a> <li>DI Container 的比較和評測：<a href="http://www.palmmedia.de/blog/2011/8/30/ioc-container-benchmark-performance-comparison">IoC Container Benchmark - Performance comparison</a>&nbsp; </li></ul>  