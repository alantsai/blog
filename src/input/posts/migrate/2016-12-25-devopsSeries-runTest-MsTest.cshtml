Title: "[iThome第8屆鐵人賽 12]執行測試 3 - MSTest"
Published: 2016-12-25
Modified: 2017-12-12
Image: /posts/migrate/2016-12-25-devopsSeries-runTest-MsTest_Asset/image_thumb(10).png
Tags: [".net","「ithome 第八屆鐵人賽」","devops","「從.net工程師的角度來看devops」","psake","powershell"]
RedirectFrom: 2016/12/devopsSeries-runTest-MsTest.html
Series: ["「iThome 第八屆鐵人賽」","「從.Net工程師的角度來看DevOps」"]
---
<section> <p>在介紹完Xunit和Nunit測試之後，這篇將要來看最後一個常見的測試Framework，Visual Studio內建的MSTest。 </p><div class="bs-callout bs-callout-default">sample 程式在 <a href="https://github.com/alantsai-samples/devops-psake/releases/tag/sample%2Fchapter12">github devops-psake sample/chapter12</a></div></section><section><a id="KMContentPageTopID" name="KMContentPageTopID"></a> <div id="divKMOutline" style="border-top-style: groove; border-bottom-style: groove; border-right-style: none; margin: 10px 0px; border-left-style: none"><ul style="margin: 0px 0px 0px 20px"><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1482637147538461" ;="">MSTest 和其他測試有和不同？</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1482637147538267" ;="">準備測試專案</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1482637147538697" ;="">準備build script - task定義</a><br><ul style="margin: 0px 0px 0px 30px"><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1482637147538303" ;="">1. 定義Task</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1482637147538964" ;="">2. 準備build script - 參數定義</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1482637147538766" ;="">3. 準備執行 MSTest</a></li><br></ul></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1482637147538236" ;="">執行MSTest的測試</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1482637147538773" ;="">結語</a></li><br></ul></div></section> <a name="more"></a><section> <h2 id="WizKMOutline_1482637147538461">MSTest 和其他測試有和不同？</h2><p>MSTest和其他幾個Test Framework最大的差異在於，MSTest的console程式<em>不能額外安裝</em>，而是和Visual Studio一起安裝，所以在取得console程式的地方是比較不同。 </p><p>這篇為了完整性，也會把整個步奏記錄下來。 </p></section><section> <h2 id="WizKMOutline_1482637147538267">準備測試專案</h2><p>如果有照著一開始建立專案來做，還記得那個時候在建立Asp .net Mvc的時候有勾選建立測試的專案，因此我們不需要做任何事情就會有一個MSTest的測試專案在裡面了。 </p><p>所以可以直接進入準備script的部分。 </p></section><section> <h2 id="WizKMOutline_1482637147538697">準備build script - task定義</h2><p>這個部分會準備task要執行所需要的東西。由於MSTest的console無法獨立下載，所以我們不需要在buildProject加入任何package。 </p><h3 id="WizKMOutline_1482637147538303">1. 定義Task</h3><p>先定義好MSTest執行的Task： </p><pre class="brush: powershell;"><code class="language-powershell line-numbers">task MSTest -depends Compile -description "執行MSTest測試" `
{
 
}</code></pre><h3 id="WizKMOutline_1482637147538964">2. 準備build script - 參數定義</h3><p>要執行build script之前，我們會需要幾個參數： </p><dl><dt>取得執行MSTest的Console Runner位置 - $msTestExe  </dt><dd>這個會在visual studio安裝路徑找到  </dd><dd><br></dd><dt>測試結果要儲存的位置 - $msTestResultDirectory  </dt><dd>我們 會把不同測試Framework分開放，所以會建立一個專門放msTest  </dd><dd><br></dd><dt>要執行測試的路徑確認 - $msTestPath  </dt><dd>這個邏輯是透過看看建制出來的專案有沒有 <code>MSTest</code> 用到的dll - 有就算是要被執行。這裡面取得的結果是DirectoryInfo，原因我們稍後提到。  </dd><dd></dd></dl><pre class="brush: powershell;"><code class="language-powershell line-numbers">$msTestExe = ((Get-ChildItem("C:\Program Files (x86)\Microsoft Visual Studio*\Common7\IDE\CommonExtensions\Microsoft\TestWindow\vstest.console.exe")).FullName |
                    Sort-Object $_ | select -Last 1)

$msTestResultDirectory= "$buildTestResultDirectory\MSTest" 

$msTestPath =  Get-ChildItem $buildTempDirectory -Recurse -Filter Microsoft.VisualStudio.QualityTools.UnitTestFramework.resources.dll | 
  Select -ExpandProperty DirectoryName -Unique | 
  % { [io.directoryinfo]$_ } </code></pre><h3 id="WizKMOutline_1482637147538766">3. 準備執行 MSTest</h3><p>要執行console runner有些參數是必要傳入進去的，其中一個重要的就是要執行測試的dll清單。 </p><p>在上面參數定義我們已經找到了是ms test專案的project清單，我們就可以用這個清單來產生出要執行的dll測試路徑。 </p><p>這裡面考慮到，如果有多個的話，每個用空格分開 </p><pre class="brush: powershell;"><code class="language-powershell line-numbers"># 組執行的dll
$testDlls = $msTestPath  | % {$_.FullName + "\" + $_.Name + ".dll" }
 
$testDllsJoin = [string]::Join(" ", $testDlls)</code></pre><p>再來就是執行測試的部分 </p><p>MS Test很可惜，沒有參數能夠把結果執行別的路徑，因此我們需要自己移動進去儲存結果的路徑然後執行 </p><p>再來，MS Test預設會把測試結果放在 <code>TestResults</code>這個資料夾，因此我們會做一點處理，把測試內容移動上去 </p><pre class="brush: powershell;"><code class="language-powershell line-numbers"># MSTest 無法設定結果輸出位置，因此移動進去
Push-Location $msTestResultDirectory
exec {&amp; $msTestExe $testDllsJoin /Logger:trx}
Pop-Location

$msTestDefaultResultPath = "$msTestResultDirectory\TestResults"
$msTestResult = "$msTestResultDirectory\MsTest.trx"

Write-Host "把測試結果移動到 $msTestResult"
Move-Item -Path $msTestDefaultResultPath\*.trx -Destination $msTestResult
Remove-Item $msTestDefaultResultPath</code></pre><p>再來<code>Test</code> task加上 <code>MSTest</code> 作為相依的task </p><pre class="brush: powershell;"><code class="language-powershell line-numbers">task Test -depends Compile, Clean, XunitTest, NunitTest, MSTest -description "執行Test" { 
 Write-Host $testMsg
}</code></pre></section><section> <h2 id="WizKMOutline_1482637147538236">執行MSTest的測試</h2><p>這個時候設定都完成了，執行結匯得到結果： </p><figure><a href="https://lh3.googleusercontent.com/-a8slgsbWGCU/WF9ADkdEldI/AAAAAAAAVFI/e0MtiJp73WY/s1600-h/image%25255B2%25255D.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="/posts/migrate/2016-12-25-devopsSeries-runTest-MsTest_Asset/image_thumb(10).png" width="644" height="311" class="img-responsive"></a><figcaption>測試結果</figcaption></figure> <p>並且可以看到執行結果： </p><figure><a href="https://lh3.googleusercontent.com/-rC-i9O2zbhQ/WF9AFSvp2QI/AAAAAAAAVFQ/Ss2SMDCtMAM/s1600-h/image%25255B5%25255D.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="/posts/migrate/2016-12-25-devopsSeries-runTest-MsTest_Asset/image_thumb[1](10).png" width="467" height="174" class="img-responsive"></a><figcaption>執行結果</figcaption></figure></section><section> <h2 id="WizKMOutline_1482637147538773">結語</h2><p>到目前為止，已經介紹完了三個常見的測試framework，不過會發現其實這3個方法有很多重複性的功能。作為工程師，第一大忌就是<code>copy and paste</code>，所以為了將來更好維護， 我們將進入Refactor階段。 </p><p>下篇將會介紹如何refactor我們的task。 </p></section>