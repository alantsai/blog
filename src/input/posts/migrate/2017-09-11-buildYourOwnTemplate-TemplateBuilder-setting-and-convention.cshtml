Title: "[打造自己的template-建立一致性程式碼][11]深入了解TemplateBuilder的特殊檔案設定方式"
Published: 2017-09-11
Modified: 2017-09-11
Image: /posts/migrate/2017-09-11-buildYourOwnTemplate-TemplateBuilder-setting-and-convention_Asset/image_thumb(34).png
Tags: ["visual studio","「打造自己的template-建立一致性程式碼」"]
RedirectFrom: 2017/09/buildYourOwnTemplate-TemplateBuilder-setting-and-convention.html
Series: ["「打造自己的template-建立一致性程式碼」"]
---
<section><figure>    <a href="https://lh3.googleusercontent.com/-k_ePvij1ZgA/WbawHFrN4PI/AAAAAAAAWV8/a7EqbWqsODMJ9C5OIYpr9-4YF9XZN-sOQCHMYCw/s1600-h/image%255B2%255D"><img width="654" height="290" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-09-11-buildYourOwnTemplate-TemplateBuilder-setting-and-convention_Asset/image_thumb(34).png" border="0" class="img-responsive"></a><br><figcaption>圖片來源：https://pixabay.com/en/annual-report-book-brochure-686343/</figcaption></figure></section><section><p>  在上一篇（<a href="http://blog.alantsai.net/2017/09/buildYourOwnTemplate-use-sidewaffle-to-create-project-template.html">[10]用SideWaffle建立Project Template</a>）了解了如何用SideWaffle建立出project的方式。   </p><p>  在這一篇將會更深入的介紹TemplateBuilder裡面的一些特殊檔案的作用和如何微調讓產生出想要的Template。   </p></section><section><div class="bs-callout bs-callout-default">匯出用的範例程式碼 <a href="https://github.com/alantsai-samples/mhat-visualstudio-template/releases/tag/sample%2Fchapter11">github mhat-visualstudio-template sample/chapter11</a></div></section>   <section> <a name="KMContentPageTopID" id="KMContentPageTopID"></a><div id="divKMOutline" style="border-style: groove none; margin: 10px 0px;"><ul style="margin: 0px 0px 0px 20px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1505144311497625" ;="">TemplateBuilder的一些特殊檔案</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1505144311497610" ;="">_Definition\_project.vstemplate.xml</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1505144311497844" ;="">和*.vstemplate~的差異</a><br></li></ul><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1505144311497381" ;="">_preprocess.xml</a><br></li></ul><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1505144311497868" ;="">TemplateBuilder的Convention</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1505144311497206" ;="">結語</a><br></li></ul></div></section>     <a name="more"></a>  <section><h2 id="WizKMOutline_1505144311497625">TemplateBuilder的一些特殊檔案</h2><p>  還記得其實建立Template的背後功臣是TemplateBuilder，而TemplateBuilder透過一些特殊的檔案和習慣（Convention）來讓建立template變得簡單：   </p><ol><li>_Definition\_project.vstemplate.xml</li><li>_preprocess.xml</li></ol><section><h3 id="WizKMOutline_1505144311497610">_Definition\_project.vstemplate.xml</h3><p>   在上篇的<code>Add Template Reference</code>其中被加入的一個檔案就是<code>_Definition\_project.vstemplate.xml</code>。    </p><p>   這個檔案打開來看會發現和一般定義template用到的<code>vstemplate</code>基本一樣，唯一差異的地方是：    </p><p><em><strong><code>Project</code>的內容完全沒有（主要用來定義template要包含什麼內容）</strong></em>。    </p><p>   這其實就是<code>TemplateBuilder</code>好的地方，template要包含的內容，會由<code>csproj</code>有包含的內容整合到<code>_project.vstemplate.xml</code>檔案裡面。    </p><p>   這也是為什麼如果有改template，就像一般開發，然後直接build就好 - 原因就在於<code>TemplateBuilder</code>會在build的時候把<code>csproj</code>和<code>_project.vstemplate.xml</code>結合。    </p><div class="bs-callout bs-callout-info"><h4 id="WizKMOutline_1505144311497844">和*.vstemplate~的差異</h4><p>    在SideWaffle裡面有一個Item Template叫做<code>SideWaffle Definition Folder</code>，會建立<code>Definitions</code>資料夾，然後裡面有好幾個以<code>*.vstemplate~</code>的檔案     </p><p>    這種和<code>_project.vstemplate.xml</code>差異在於，<code>_project.vstemplate.xml</code>會結合csproj的檔案，而<code>*.vstemplate~</code>則不會，他們的作用則是快速建立     <em>不同</em>語言的template。舉例來說，今天要建立一個template用於<code>CSharp</code>和<code>VB</code>，那麼就會保留<code>CSharp.vstemplate</code>和<code>VB.vstemplate</code></p><p>    (這邊注意要把尾巴的<code>~</code>拿掉才有作用)     </p><a href="https://lh3.googleusercontent.com/-JRRtCq2Sc5Q/WbawK11IbxI/AAAAAAAAWWE/FNG8ew8rQwAbteOG5uuSUAAAASTGD8FmgCHMYCw/s1600-h/image%255B5%255D"><img width="654" height="375" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-09-11-buildYourOwnTemplate-TemplateBuilder-setting-and-convention_Asset/image_thumb[1](30).png" border="0" class="img-responsive"></a><figure>      <a href="https://lh3.googleusercontent.com/-6AuAxteCOmU/WbawM4PAHLI/AAAAAAAAWWM/UYZAEr2qJbgT6ukjEztis8dUUsEe61NKgCHMYCw/s1600-h/image%255B8%255D"><img width="308" height="149" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-09-11-buildYourOwnTemplate-TemplateBuilder-setting-and-convention_Asset/image_thumb[2](24).png" border="0" class="img-responsive"></a><br><figcaption>建立item template和建立出來的內容</figcaption></figure></div></section><section><h3 id="WizKMOutline_1505144311497381">_preprocess.xml</h3><p>   這個檔案有兩個目的：    </p><dl><dt>      設定關鍵字替換     </dt><dd><p>     上面的<code>_project.vstemplate.xml</code>讓我們不用自己手動設定說那些檔案要包含在template裡面，完全看csproj有包含的檔案。      </p><p>     但是這樣建立出來還有個問題就是，有些<em>內容希望替換掉</em>，例如namespace要改成使用者建立時候輸入的內容，這個就是這個檔案的作用。      </p><p>     以下面的範例為例：      </p><pre class="brush: xml;"><code class="language-markup line-numbers">&lt;Replacements Include="*.*" Exclude="*.vstemplate;*.csproj;*.fsproj;*.vbproj;*.jpg;*.png;*.ico;_preprocess.xml;_project.vstemplate.xml"&gt;
 &lt;add key="MHAT.ConsoleWithOption" value="$safeprojectname$"/&gt;
&lt;/Replacements&gt;</code></pre><p><code>Replacements</code>可以設定那些檔案要包含，然後那些檔案要略過，然後每一個關鍵字就是用<code>add</code>來加。      </p><p>     以這邊例子就是把目前namespace改成建立時候給的名稱。      </p><p>     可以看到，要被替換的內容可以用<code>Parameter</code></p></dd><dd></dd><dt>      設定template的分類     </dt><dd><p>     會希望建立的template在某些template的分類裡面，這個就是<code>_preprocess.xml</code>裡面的：      </p><pre class="brush: xml;"><code class="language-markup line-numbers">     &lt;TemplateInfo Path="CSharp\Web\SideWaffle"/&gt;</code></pre><p>     以上就是設定template要放在<code>C#</code>-&gt;<code>Web</code>-&gt;<code>SideWaffle</code>裡面      </p></dd><dd></dd></dl><div class="bs-callout bs-callout-info"><code>_preprocess.xml</code>是可以多個，離檔案越近的<code>_preprocess.xml</code>權重越高，可以透過這種方式來針對某些資料夾特殊處理。    </div></section></section><section><h2 id="WizKMOutline_1505144311497868">TemplateBuilder的Convention</h2><p>  TemplateBuilder其實有特殊Convention的資料夾，分別為：   </p><ul><li>ProjectTemplates</li><li>ItemTemplates</li><li>Snippet</li></ul><p>  只要建立資料夾把檔案放到對應的資料夾，就會建立出對應的template/Snippet。所以除了上篇提到的<code>Add Template Reference</code>，其實也可以用這種方式來建立。   </p><p>  以昨天的例子來說：   </p><dl><dt>     建立出Convention的資料夾結構和複製檔案    </dt><dd>    基本上就是<code>ProjectTemplates</code> -&gt; <code>ConsoleWithOption</code>和複製檔案到資料夾裡面。</dd><dd><a href="https://lh3.googleusercontent.com/-8D-hkp-JVVM/WbawPf-p7QI/AAAAAAAAWWU/T7C_V9Nz5UEJXoWA8ejJxURan2Uo0lJdQCHMYCw/s1600-h/image%255B11%255D"><img width="421" height="291" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-09-11-buildYourOwnTemplate-TemplateBuilder-setting-and-convention_Asset/image_thumb[3](21).png" border="0" class="img-responsive"></a><figure>     <a href="https://lh3.googleusercontent.com/-ZJ__CToIRuY/WbawU5H-DTI/AAAAAAAAWWc/L4e6Rwy4FRwreY2diSy7TUe7ImpGM8VJACHMYCw/s1600-h/image%255B14%255D"><img width="654" height="343" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-09-11-buildYourOwnTemplate-TemplateBuilder-setting-and-convention_Asset/image_thumb[4](21).png" border="0" class="img-responsive"></a><figcaption>建立結構</figcaption></figure></dd><dd></dd><dt>     在VS裡面加入相關檔案和csproj    </dt><dd>     VS加入相關檔案。     <figure><a href="https://lh3.googleusercontent.com/-WgFiC9THSV0/WbawXxcF3iI/AAAAAAAAWWk/N7XHFzHKAuQY4fwmBaYAto1eLlzh_g4vwCHMYCw/s1600-h/image%255B17%255D"><img width="461" height="520" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-09-11-buildYourOwnTemplate-TemplateBuilder-setting-and-convention_Asset/image_thumb[5](14).png" border="0" class="img-responsive"></a><figcaption>加入相關</figcaption></figure></dd><dd></dd><dt>     測試    </dt><dd><p>    這邊template名稱有改成<code>Convention Template</code>比較容易看     </p><figure><a href="https://lh3.googleusercontent.com/-a7VlJQNT4DI/WbawcKYmyHI/AAAAAAAAWWs/EBXjlv45psYtcwWxLEA-9tvLmQbof8NEACHMYCw/s1600-h/image%255B20%255D"><img width="654" height="301" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-09-11-buildYourOwnTemplate-TemplateBuilder-setting-and-convention_Asset/image_thumb[6](11).png" border="0" class="img-responsive"></a><figcaption>測試VS</figcaption></figure></dd><dd></dd></dl><p>  如果需要修改template，可以用另外一個VS來開啟對應的sln或者csproj，然後在那邊直接像一般開發的方式來調整template，確認好了之後，在切回到vsix專案直接build，template就更新了。   </p></section><section><h2 id="WizKMOutline_1505144311497206">結語</h2><p>  整個TemplateBuilder的精髓就在一些Convention和一些特殊檔案讓建立tempalte變得簡單。   </p><p>  雖然沒有介紹Item Template的做法，但是基本概念一樣。   </p><p>  到目前為止，TemplateBuilder快到一個段落了，不過還有一種複雜template還沒介紹，也就是Multi Project Template。   </p><p>  因此，下一篇將會介紹Multi Project Template。   </p></section> <section> <div class="wlWriterEditableSmartContent" id="scid:77ECF5F8-D252-44F5-B4EB-D463C5396A79:04aca6ea-f9e8-484c-8bbd-d541973b9e40" style="margin: 0px; padding: 0px; float: none; display: inline;">標籤: <a href="/tags/%e3%80%8c%e6%89%93%e9%80%a0%e8%87%aa%e5%b7%b1%e7%9a%84template-%e5%bb%ba%e7%ab%8b%e4%b8%80%e8%87%b4%e6%80%a7%e7%a8%8b%e5%bc%8f%e7%a2%bc%e3%80%8d" rel="tag">「打造自己的template-建立一致性程式碼」</a>,<a href="/tags/Visual+Studio" rel="tag">Visual Studio</a></div></section>