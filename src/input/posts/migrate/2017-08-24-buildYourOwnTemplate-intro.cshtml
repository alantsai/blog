Title: "[打造自己的template-建立一致性程式碼][01]開篇"
Published: 2017-08-24
Modified: 2017-08-27
Image: /posts/migrate/2017-08-24-buildYourOwnTemplate-intro_Asset/image_thumb(24).png
Tags: ["visual studio","「打造自己的template-建立一致性程式碼」"]
RedirectFrom: 2017/08/buildYourOwnTemplate-intro.html
Series: ["「打造自己的template-建立一致性程式碼」"]
---
<section><figure><a href="https://lh3.googleusercontent.com/-P9o83QiHk-M/WZ4THnpQK1I/AAAAAAAAWIw/aPzVNIErZJ8_V8ERTSMcCNs667-mgXT-wCHMYCw/s1600-h/image%255B2%255D"><img width="654" height="290" title="[打造自己的template-建立一致性程式碼][01]開篇" style="display: inline; background-image: none;" alt="[打造自己的template-建立一致性程式碼][01]開篇" src="/posts/migrate/2017-08-24-buildYourOwnTemplate-intro_Asset/image_thumb(24).png" border="0" class="img-responsive"></a><br><figcaption>圖片來源：https://pixabay.com/en/annual-report-book-brochure-686343/</figcaption></figure></section><section><p>  在公司裡面或者自己建立的套件/框架一般來說使用上都有一定的規範。例如ViewModel應該開在哪裡？建立之後要繼承什麼class？應該要有什麼namespace等。   </p><p>  如果規範沒有好好遵守，很容易一個人寫一個樣，另外一個人寫另外一樣 - 或許從最終結果來說沒有差異（會動就好XD），但是對於未來要維護的時候會造成很大困擾。   </p><p>  因此如何讓不同團隊成員有一樣概念來建立一致性專案就是一件非常麻煩的事情，而Template（範本）就是專門來解決這個問題。   </p></section><section><a name="KMContentPageTopID" id="KMContentPageTopID"></a><div id="divKMOutline" style="border-style: groove none; margin: 10px 0px;"><ul style="margin: 0px 0px 0px 20px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1503531554951590" ;="">為什麼寫這個主題？</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1503531554951298" ;="">這個系列到底包含那些內容？</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1503531554951226" ;="">結語</a><br></li></ul></div></section>  <a name="more"></a>  <section><h2 id="WizKMOutline_1503531554951590">為什麼寫這個主題？</h2><p>  曾經我也介紹過如何建立<a href="/tags/%E3%80%8CiThome%20%E7%AC%AC%E4%B8%83%E5%B1%86%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%8D">自己的Mvc框架</a>，   舉在這個框架裡面在Bll範例，會建立<code>Service</code>可以繼承   <code>GenericService</code>來減少一些boilerplate code。   </p><p>  可以想一下，假設今天有個新的同事進來想要使用，他是不是需要受到教育訓練告訴他新的Service要開在那個資料夾，然後要繼承什麼class，然後要覆寫什麼方法。   </p><p>  如果今天有一個範本，他只需要選擇<code>New Item</code>然後選擇建立Service，然後裡面自動把CS檔案建立在正確的位置，並且寫好class 繼承和應該要覆寫的方法。   </p><p>  整個教<em><strong>學習的時間成本降低</strong></em>，並且<em><strong>人為輸入錯誤的幾率也降低</strong></em>（因為沒有Template的情況下，可能是從現有的程式碼copy然後改，非常容易有缺東西）。   </p><p>  所以如何建立自己常用的範本變得非常重要，在未來可以省去很多copy和paste的時間和人為錯誤的時間。   </p><div class="bs-callout bs-callout-info"><p>   想象一下，如果今天你要學Asp .Net Mvc，而無法直接從Visual Studio開一個mvc專案，每一次建立都要自己開Controller和View的資料夾，然後設定一些routing資訊等，是不是很有可能東西會少copy到導致會花很多時間在debug上面？    </p></div></section><section><h2 id="WizKMOutline_1503531554951298">這個系列到底包含那些內容？</h2><p>  基本上會針對以下幾個部分做介紹：   </p><ul><li>在VS的世界裡，有什麼類型的Template</li><li>透過匯出的方式建立自己的Template</li><li>微調自己的Template</li><li>建立VSIX讓Template更容易讓安裝</li><li>如何使用SideWaffle讓建立範本變得更容易</li><li>dot net new - dotnet core的範本模式</li></ul></section><section><h2 id="WizKMOutline_1503531554951226">結語</h2><p>  Template其實非常的重要，但是由於要寫自己的Template還是需要了解一些學習，因此大家還是習慣用copy和paste的方式。   </p><p>  但是如同程式設計好的結構一樣，只要寫過3次就應該要整理成為方法，copy和paste 3次以上難道不用自己整合常建立內容嗎？   </p><p>  這個系列希望降低未來要建立Template的門檻。   </p><p>  目前其實還有<a href="/tags/%E3%80%8CiThome%20%E7%AC%AC%E5%85%AB%E5%B1%86%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%8D">[從.Net工程師的角度來看]</a>的系列還沒有寫完   ，但是由於最近剛好有認真的在學習一下，在還有記憶的時候做一個總結介紹。   </p><p>  下一篇會從VS到底提供哪些類型的範本和我們怎麼使用它作介紹。 </p><div class="wlWriterEditableSmartContent" id="scid:77ECF5F8-D252-44F5-B4EB-D463C5396A79:53ab2459-b5c8-4202-bc74-727049657025" style="margin: 0px; padding: 0px; float: none; display: inline;">標籤: <a href="/tags/%e3%80%8c%e6%89%93%e9%80%a0%e8%87%aa%e5%b7%b1%e7%9a%84template-%e5%bb%ba%e7%ab%8b%e4%b8%80%e8%87%b4%e6%80%a7%e7%a8%8b%e5%bc%8f%e7%a2%bc%e3%80%8d" rel="tag">「打造自己的template-建立一致性程式碼」</a></div></section>