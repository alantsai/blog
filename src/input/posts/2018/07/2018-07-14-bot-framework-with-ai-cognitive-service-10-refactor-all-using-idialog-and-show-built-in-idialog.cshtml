Title: "[chatbot + AI = 下一代操作模式][10]用IDialog全部重構 - 階段性總結"
Published: 2018-07-14 23:05
Modified: 2018-07-14 23:05
Image: "/posts/2018/07/2018-07-14-bot-framework-with-ai-cognitive-service-10-refactor-all-using-idialog-and-show-built-in-idialog/64fd12d8-96bf-4344-bcc1-898ae00dda20.jpg"
Tags: ["「chatbot + AI = 下一代操作模式」", "bot framework", "chatbot", "refactor"]
Series: ["「chatbot + AI = 下一代操作模式」"]
PostDescription: "這篇我們將把剩下的邏輯全部重構為Dialog，
并且用内建的PromptDialog看看一個包好的Dialog怎麽可以讓我們專注於開發商務邏輯，而不用管那些底層的部分"
---
<section><figure><img class="img-responsive" src="/posts/2018/07/2018-07-14-bot-framework-with-ai-cognitive-service-10-refactor-all-using-idialog-and-show-built-in-idialog/64fd12d8-96bf-4344-bcc1-898ae00dda20.jpg" border="0" alt="[chatbot + AI = 下一代操作模式][10]用IDialog全部重構 - 階段性總結.jpg"><br><figcaption>圖片來源：https://pixabay.com/en/books-spine-colors-pastel-1099067/&nbsp;</figcaption></figure></section><section><p>
		在上一篇(<a href="/posts/2018/07/bot-framework-with-ai-cognitive-service-9-refactor-using-idialog-for-better-soc">[09]使用IDialog來實現SoC</a>)介紹了怎麽使用</span><code >IDialog</code>來拆分邏輯，并且一步一步的用取得名字的邏輯拆成為一個<code>NameDialog</code>。</p><p>
		在這一篇我們將會把所有的邏輯重構成爲IDialog，并且對於目前學習到的BotBuilder做一個階段性的總結。
		</p><div class="bs-callout bs-callout-default">
			這篇的程式碼github頁面是<a href="https://github.com/alantsai-samples/mhat-hotelbot/tree/blog/chapter-10">alantsai-samples/mhat-hotelbot:blog/chapter-10</a></div></section>
	<section>
<a id="KMContentPageTopID" name="KMContentPageTopID"></a><div id="divKMOutline" style="border-style: groove none; margin: 10px 0px;"><ul style="margin:0px 0px 0px 20px"><li><a href="#WizKMOutline_1531584868556834" ;="" style="font-size: 15px; line-height: 1.6;">重構剩下來的邏輯</a><br></li><ul style="MARGIN: 0px 0px 0px 30px"><li><a href="#WizKMOutline_1531584868556532" ;="" style="font-size: 15px; line-height: 1.6;">查飯店</a><br></li><li><a href="#WizKMOutline_1531584868556788" ;="" style="font-size: 15px; line-height: 1.6;">取得訂房的費用明細</a><br></li><li><a href="#WizKMOutline_1531584868556206" ;="" style="font-size: 15px; line-height: 1.6;">查飯店v2調整</a><br></li><li><a href="#WizKMOutline_1531584868556369" ;="" style="font-size: 15px; line-height: 1.6;">訂房調整</a><br></li></ul><li><a href="#WizKMOutline_1531584868556668" ;="" style="font-size: 15px; line-height: 1.6;">内建的Dialog - 範例 Prompt</a><br></li><li><a href="#WizKMOutline_1531584868556276" ;="" style="font-size: 15px; line-height: 1.6;">結語</a><br></li></ul></div>
	</section>
	<!--more--><section><h2 id="WizKMOutline_1531584868556834">重構剩下來的邏輯</h2><p>
		上篇重構完了取得名字的邏輯之後，我們還剩下幾個部分需要重構：
		</p><ol><li>查飯店</li><li>取得訂房的費用明細</li><li>訂房</li></ol><p></p><p>
		重上一篇的重構方式我們可以看出，整個重構的步奏分爲：
		</p><ol><li>建立一個Dialog</li><li>把邏輯從root放到dialog裡面</li><li>修正root為呼叫dialog來觸發</li><li>測試</li></ol><p></p><p>
		接下來我們就快速看一下這幾個邏輯拆分的程式部分。
		</p><section><h3 id="WizKMOutline_1531584868556532">查飯店</h3><p>
			首先我們建立一個<code>IDialog</code>叫做<em>SearchHotelDialog</em>。這個<code>SearchHotelDialog</code>回回傳一個<code>HeroCard</code>：
</p><pre><code class="language-csharp">[Serializable]
public class SearchHotelDialog : IDialog&lt;HeroCard&gt;
{
	public Task StartAsync(IDialogContext context)
	{
		throw new NotImplementedException();
	}
}</code></pre><p></p><p>
			在來我們把<code>HeroCard</code>的產生放在Dialog裡面：
</p><pre><code class="language-csharp">public Task StartAsync(IDialogContext context)
{
	// 返回飯店的圖片以及可以打開官網的按鈕

	// 建立一個HeroCard
	var herocard = new HeroCard()
	{
		Title = "xxx飯店",
		Text = "5星級高級大飯店",
		Images = new List&lt;CardImage&gt;()
				{
					   new CardImage("https://cdn.pixabay.com/photo/2016/02/10/13/32/hotel-1191709_1280.jpg")
				},
		Buttons = new List&lt;CardAction&gt;()
				{
					new CardAction("openUrl", "官網", value: "http://www.google.com")
				}
	};

	context.Done(herocard);

	return Task.CompletedTask;
}</code></pre><p></p><div class="bs-callout bs-callout-info">
				這邊我們沒有真的搜索資料庫，但是可以想象一下，這邊可以詢問使用者條件然後把結果回傳，甚至回傳多筆讓使用者選擇那筆。不過，這個部分就給各位去發揮啦。
			</div><p>
			最後我們要在<code>RootDialog</code>做一些調整：
</p><pre><code class="language-csharp">...
if (activity.Text == "查飯店")
{
	context.Call(new SearchHotelDialog(), async (ctx, r) =&gt;
	{
		var returnMessage = activity.CreateReply();
		var heroCardResult = await r;
		returnMessage.Attachments = new List&lt;Attachment&gt;(){ heroCardResult.ToAttachment() };

		await context.PostAsync(returnMessage);
		context.Wait(MessageReceivedAsync);
	});
}
...</code></pre><p></p><p>
			最後我們測試，發現結果和之前一樣。
			</p></section><section><h3 id="WizKMOutline_1531584868556788">取得訂房的費用明細</h3><p>
			再來我們重構取得費用明細，先建立一個<code>GetReciptDialog</code>，這個Dialog會回傳一個<code>Attachment</code></p><pre><code class="language-csharp">[Serializable]
public class GetReceiptDialog : IDialog&lt;Attachment&gt;
{
	public Task StartAsync(IDialogContext context)
	{
		throw new NotImplementedException();
	}
}</code></pre><p></p><p>
			再來把邏輯搬進去：
</p><pre><code class="language-csharp">public Task StartAsync(IDialogContext context)
{
	var receiptCard = new ReceiptCard()
			{
				Title = "訂房費用",
				Total = "NT$ 120",
				Tax = "NT$ 20",
				Items = new List&lt;ReceiptItem&gt;()
				   {
					   new ReceiptItem()
					   {
							Title = "1大房",
							Price = "90",
							Quantity = "1",
							Image = new CardImage("https://cdn.pixabay.com/photo/2014/08/11/21/40/wall-416062__180.jpg")
					   },
					   new ReceiptItem()
					   {
						   Title = "飲料",
						   Price = "10",
						   Quantity = "1",
						   Image = new CardImage("https://cdn.pixabay.com/photo/2014/09/26/19/51/coca-cola-462776_1280.jpg")
					   }
				   }
			};

	context.Done(receiptCard.ToAttachment());

	return Task.CompletedTask;
}</code></pre><p></p><div class="bs-callout bs-callout-info">
				這次我回傳不是<code>ReceiptItem</code>而是一個<code>Attachment</code>，因爲Attachment是更加generic的形態，我們剛剛那個查飯店其實應該也要調整，這個我們等一下處理。
			</div><p>
			接下來我們調整<code>RootDialog</code>，這邊我們把關鍵字改成<code>明細</code>比較清楚：
			</p><pre><code class="language-csharp">...
else if(activity.Text == "明細")
{
	context.Call(new GetReceiptDialog(), async (ctx, r) =&gt;
	{
		var returnMessage = activity.CreateReply();
		var attachmentResult = await r;
		returnMessage.Attachments = new List&lt;Attachment&gt;() { attachmentResult };

		await context.PostAsync(returnMessage);
		context.Wait(MessageReceivedAsync);
	});
}
...</code></pre><p>
接下來測試一下，發現結果一樣。
</p></section><section><h3 id="WizKMOutline_1531584868556206">查飯店v2調整</h3><p>
			還記得我們之前爲了顯示<code>AdaptiveCard</code>有做了一個v2版本的查飯店。
			</p><p>
			我們把他和<code>SearchHotelDialog</code>整合，改成一次回傳兩家飯店，一個用<code>HeroCard</code>，一個用<code>AdaptiveCard</code>。
			</p><p>
			首先，我們調整<code>SearchHotelDialog</code>的回傳内容，從<code>HeroCard</code>改成<code>List &lt;Attachment&gt;</code></p><pre><code class="language-csharp">public class SearchHotelDialog : IDialog&lt;List&lt;Attachment&gt;&gt;</code></pre><p>
再來調整dialog裡面的邏輯：
</p><pre><code class="language-csharp">public Task StartAsync(IDialogContext context)
{
	// 返回飯店的圖片以及可以打開官網的按鈕

	// 建立一個HeroCard
	HeroCard herocard = GetHeroCard();

	AdaptiveCard adCard = GetAdaptiveCard();

	context.Done(new List&lt;Attachment&gt;() { herocard.ToAttachment(),
			new Attachment()
			{
				Content = adCard,
				ContentType = AdaptiveCard.ContentType
			}
	 });

	return Task.CompletedTask;
}</code></pre><p>
最後調整<code>RootDialog</code>，把<em>查飯店v2</em>刪掉，然後調整<em>查飯店</em>取得的回傳形態：
</p><pre><code class="language-csharp">if (activity.Text == "查飯店")
{
	context.Call(new SearchHotelDialog(), async (ctx, r) =&gt;
	{
		var returnMessage = activity.CreateReply();
		var attachments = await r;
		returnMessage.Attachments = attachments;

		await context.PostAsync(returnMessage);
		context.Wait(MessageReceivedAsync);
	});
}</code></pre><p>
最後，我們可以看到，輸入了<kbd>查飯店</kbd>，可以看到兩個版本的飯店：
</p><figure><img class="img-responsive" src="/posts/2018/07/2018-07-14-bot-framework-with-ai-cognitive-service-10-refactor-all-using-idialog-and-show-built-in-idialog/507468e4-c1be-4b1d-840d-72de451f88c2.png" border="0" alt="Bot Framework Emulator_2018-07-14_23-00-18.png"><br><figcaption>最後輸出結果</figcaption></figure><p></p></section><section><h3 id="WizKMOutline_1531584868556369">訂房調整</h3><p>
			我們的訂房使用的是FormFlow來產生，這一整個邏輯也可以重構到dialog裡面，做法和其他一樣，先建立一個<code>ReserveRoomDialog</code>：
			</p><pre><code class="language-csharp">[Serializable]
public class ReserveRoomDialog : IDialog&lt;RoomReservation&gt;
{
	public Task StartAsync(IDialogContext context)
	{
		throw new NotImplementedException();
	}
}</code></pre><p>
再來，我們把邏輯放到了Dialog裡面：
</p><pre><code class="language-csharp">public Task StartAsync(IDialogContext context)
{
	var reserveRoomForm =
				FormDialog.FromForm(RoomReservation.BuildForm,
					FormOptions.PromptInStart);

	context.Call(reserveRoomForm, AfterReserveRoomAsync);

	return Task.CompletedTask;
}

private async Task AfterReserveRoomAsync(IDialogContext context
   , IAwaitable&lt;RoomReservation&gt; result)
{
	RoomReservation reservation = null;

	try
	{
		reservation = await result;

		//await context.PostAsync($"得到的結果：{Environment.NewLine} {JsonConvert.SerializeObject(reservation)}");
	}
	catch (FormCanceledException&lt;RoomReservation&gt; ex)
	{
		string reply;

		if (ex.InnerException == null)
		{
			reply = $"您在 {ex.Last} 的時候退出了 -- 如果有遇到任何問題請告訴我們";
		}
		else
		{
			reply = "機器人暫時罷工了，請稍後嘗試";
		}

		await context.PostAsync(reply);
	}
	finally
	{
		context.Done(reservation);
	}
}</code></pre><div class="bs-callout bs-callout-info">
	由於回傳的是<code>RoomReservation</code>，因此當使用者退出的時候，直接在這邊輸出内容了。但是，既然回傳的是一個物件，那麽更好的做法應該是一個包含<code>RoomReservation</code>的物件，裡面有資訊可以記錄
	像是退出錯誤的訊息。這個就留給大家嘗試。
</div><p>
最後，調整Rootdialog:
</p><pre><code class="language-csharp">...
else if(activity.Text == "訂房")
{
	context.Call(new ReserveRoomDialog(), ReserverRoomAfterAsync);
}

private async Task ReserverRoomAfterAsync(IDialogContext context,
   IAwaitable&lt;RoomReservation&gt; result)
{
	var roomReserved = await result;

	if (roomReserved != null)
	{
		await context.PostAsync($"您的訂單資訊：{Environment.NewLine}" +
			$"{JsonConvert.SerializeObject(roomReserved, Formatting.Indented)}");
	}
	else
	{
		await context.PostAsync($"訂單取得失敗");
	}

	context.Wait(MessageReceivedAsync);
}</code></pre><div class="bs-callout bs-callout-info">
	這邊把關鍵字也調整變成<code>訂房</code>。
</div></section></section><section><h2 id="WizKMOutline_1531584868556668">内建的Dialog - 範例 Prompt</h2><p>
		透過這幾次的重構，相信對於Dialog的建立有了概念，并且這些Dialog是可以簡單重複使用。
		</p><p>
		這邊舉個簡單例子，内建有個Dialog能夠讓我們方便取得使用者的回復，舉例來説，訂房最後應該有個確認輸入，這個時候我們可以使用内建的Dialog，<code>Prompt</code>。
		</p><pre><code class="language-csharp">private async Task ReserverRoomAfterAsync(IDialogContext context,
   IAwaitable&lt;RoomReservation&gt; result)
{
	var roomReserved = await result;

	if (roomReserved != null)
	{
		await context.PostAsync($"您的訂單資訊：{Environment.NewLine}" +
			$"{JsonConvert.SerializeObject(roomReserved, Formatting.Indented)}");

		PromptDialog.Confirm(context, ConfirmReservation, "請確認訂房資訊");
	}
	else
	{
		await context.PostAsync($"訂單取得失敗");

		context.Wait(MessageReceivedAsync);
	}
}

private async Task ConfirmReservation(IDialogContext context, IAwaitable&lt;bool&gt; result)
{
	var confirmResult = await result;

	if(confirmResult)
	{
		await context.PostAsync($"訂單完成。訂單號：{DateTime.Now.Ticks}");
	}
	else
	{
		await context.PostAsync("訂房取消");
	}

	context.Wait(MessageReceivedAsync);
}</code></pre><p>
最後我們看到輸入完表單了之後，會有個確認的訊息：
</p><figure><img class="img-responsive" src="/posts/2018/07/2018-07-14-bot-framework-with-ai-cognitive-service-10-refactor-all-using-idialog-and-show-built-in-idialog/a6eea89e-4c14-456d-ba0a-3d5557ac312c.png" border="0" alt="Bot Framework Emulator_2018-07-14_23-54-36.png"><br><figcaption>最後確認畫面</figcaption></figure><p></p><p>
由這個範例看出，我們可以透過重構IDialog讓我們邏輯能夠重複使用，這樣就不用一直寫這些utility功能。
</p></section><section><h2 id="WizKMOutline_1531584868556276">結語</h2><p>
		到目前爲止，我們已經把整個BotBuilder的主要component瞭解的7788了。我們從訊息格式瞭解起，知道用<code>Activity</code>作爲統一的格式，然後透過Rich Card的輸出内容讓我們可以讓輸出變得更加漂亮。
		</p><p>
		再來我們看了FormFlow，用它來快速建立表單輸入的方式。
		</p><p>
		最後介紹了用Dialog來拆分邏輯，并且介紹了其中一個内建的Dialog，<code>PromptDialog</code>。
		</p><p>
		BotBuilder還有一些細節，例如透過Scoreable來處理一些特殊關鍵字，不過這個以後有機會在介紹。
		</p><p>
		對於開發一個Chatbot目前的知識量已經足夠了，并且我們透過這些知識做出了一個訂房的chatbot，接下來我們就可以考慮把他散佈出去讓大家來給我們一些feedback。
		</p><p>
		因此，在下一篇(<a href="/posts/2017/07/bot-framework-with-ai-cognitive-service-11-publish-chatbot-to-azure-app-service-prepare-for-release"></a>)，我們來看看如何部署我們的chatbot。
		</p></section>