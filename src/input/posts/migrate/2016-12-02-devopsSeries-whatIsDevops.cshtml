Title: "[iThome第8屆鐵人賽 02]什麼是DevOps？"
Published: 2016-12-02
Modified: 2017-12-12
Image: ""
Tags: [".net","「ithome 第八屆鐵人賽」","devops","「從.net工程師的角度來看devops」"]
RedirectFrom: 2016/12/devopsSeries-whatIsDevops.html
Series: ["「iThome 第八屆鐵人賽」","「從.Net工程師的角度來看DevOps」"]
---
<a href="https://www.blogger.com/null" id="KMContentPageTopID" name="KMContentPageTopID"></a><br><div id="divKMOutline" style="border-style: groove none; margin: 10px 0px;"><ul style="margin: 0px 0px 0px 20px;"><li><a href="https://www.blogger.com/blogger.g?blogID=7924743034677720383#WizKMOutline_1480687723606492" style="font-size: 14pt; line-height: 1.5;">DevOps是什麼？</a></li><li><a href="https://www.blogger.com/blogger.g?blogID=7924743034677720383#WizKMOutline_1480687723607528" style="font-size: 14pt; line-height: 1.5;">這個系列對於DevOps的關注點</a></li><li><a href="https://www.blogger.com/blogger.g?blogID=7924743034677720383#WizKMOutline_1480687723607972" style="font-size: 14pt; line-height: 1.5;">到底什麼是Continuous Integration (CI)</a></li><li><a href="https://www.blogger.com/blogger.g?blogID=7924743034677720383#WizKMOutline_1480687723607681" style="font-size: 14pt; line-height: 1.5;">到底什麼是Continuous Delivery（CD）</a></li><li><a href="https://www.blogger.com/blogger.g?blogID=7924743034677720383#WizKMOutline_1480687723607228" style="font-size: 14pt; line-height: 1.5;">到底什麼是Continouous Deployment（CD）</a></li><li><a href="https://www.blogger.com/blogger.g?blogID=7924743034677720383#WizKMOutline_1480687723607556" style="font-size: 14pt; line-height: 1.5;">結語</a></li></ul></div><br><br><section>DevOps到底是一個什麼概念？對於工程師來說指的是什麼？為什麼DevOps最近這麼夯是我們在這篇所要討論的事情。<br></section><br><a name="more"></a><br><section><h2 id="WizKMOutline_1480687723606492">DevOps是什麼？</h2>其實DevOps是兩個英文字的縮寫，Development（開發）和Operations（運維），同時DevOps其實是一個<em>文化和概念</em>，並不是特定指某一個做法。<br><br>這個其實和敏捷（Agile）是一個概念，敏捷也是一個文化和概念，而其中一種流行符合Agile運作的流程就是最近也很夯的Scrum。<br><br>敏捷基本核心概念是把週期縮短，透過快速開發，透過實物提前發現問題，提前做調整，也就是Fail Fast的概念。<br><br>我很喜歡敏捷執行下來能夠帶來的一個好處<br><br><blockquote>所有系統都有bug，但是當bug被修復的速度超過客戶能夠發現和反饋的時候，就不算是bug。</blockquote>在DevOps來說，DevOps的核心理念是：<br><br><blockquote>減少開發和運維之間的阻礙 - 讓很敏捷的開發能夠快速的上線並且整個非常流暢。</blockquote><figure><a href="https://1.bp.blogspot.com/-NVLEXGrsthY/WEGBxr36XQI/AAAAAAAAU7k/PNF91Jd9YGYfGcrq7u6-tjx_AMgdboPtACLcB/s1600/DevOpsPic.png" imageanchor="1"><img alt="DevOps圖" border="0" height="156" src="https://1.bp.blogspot.com/-NVLEXGrsthY/WEGBxr36XQI/AAAAAAAAU7k/PNF91Jd9YGYfGcrq7u6-tjx_AMgdboPtACLcB/s320/DevOpsPic.png" width="320" class="img-responsive"></a><figcaption>DevOps是一個相互流暢的流程 - 圖片來源：https://blog.xebialabs.com/2016/03/21/essential-devops-terms/</figcaption></figure>用白話一點來說，Dev代表著開發者，Ops代表著MIS，代表開發結果上線。<br><br>其實DevOps會夯起來和敏捷有直接關係，我們常說敏捷對專案開發有多好又多好，然後從專案管理來看如何執行，但是很少有人提到從工程師和實際開發的角度上面來說到底需要什麼才能夠支撐這種快速開發模式。<br><br>在比較嚴謹環境上過軟體的人就知道，其實要更新一個版本，要經過很多流程很關卡，當這個遇到開發速度變快的時候，常常運維和開發可能脫節造成敏捷更本跑不了。<br><br>所以我認為，要跑好敏捷，DevOps沒做起來基本上是不可能。別說Ops了，如果你的Dev都被一些瑣事浪費了時間（例如手動建制專案，手動建制Test等），那怎麼可能跑的快？<br><br>舉個例子來說，像在團隊中開發的時候，常常遇到的事情是有些人commit的時候忘記把一些程序上到版控。結果隔天另外一個工程師發現整個系統無法建制，而本來的作者因為出差或者請假所以找不到的時候<br>，那大家工作不都被耽誤了？這個還算小事，如果因此耽誤到debug正式系統突發性問題的時候，麻煩就大了。<br><br><div class="bs-callout bs-callout-info">結論，DevOps是技術上支撐敏捷開發可能性的環境。而要達到快，<em>自動化</em>是最為關鍵的地方，也是整個DevOps的核心。</div></section><section><h2 id="WizKMOutline_1480687723607528">這個系列對於DevOps的關注點</h2>DevOps既然是一個概念，所以延伸出來的實作方式其實有很多，沒有那種是對的，只有最符合團隊才是最好的。<br><br>既然DevOps是Dev + Ops一定會有針對Dev和Ops相關的做法。在這系列裡面，將會著重在Dev的部分，而Ops那段比較偏是使用工具像Puppet和Chief將不會在這個系列被提到。<br><br>既然提到了Dev，在Dev這裡基本上有幾個階段：<br><br><figure><a href="https://3.bp.blogspot.com/-a3c3uA5Ikk0/WEGCMVkmI0I/AAAAAAAAU7w/whmK6ISwAJ8vSV6eFslbd96tpl8xJ2ZgQCLcB/s1600/Image%2B827.png" imageanchor="1"><img alt="建制循環" border="0" height="314" src="https://3.bp.blogspot.com/-a3c3uA5Ikk0/WEGCMVkmI0I/AAAAAAAAU7w/whmK6ISwAJ8vSV6eFslbd96tpl8xJ2ZgQCLcB/s320/Image%2B827.png" width="320" class="img-responsive"></a><br><figcaption>建制循環</figcaption></figure>這幾個階段其實又對應到了幾個不同的名詞Continous Integration、Continous Delivery和Continous Deployment。<br></section><section><h2 id="WizKMOutline_1480687723607972">到底什麼是Continuous Integration (CI)</h2>開發人員都知道，在開發的時候，最好一小個段落就要build看看有沒有問題，越早發現問題，越容易處理。當積累了一堆問題在解決通常來說處理時間相對的短。<br><br>當一個人開發的時候都有可能會建制不成功的時候，更何況今天要一個團隊的開發。<br><br>所以同樣道理，越早把大家的code一起建制，越早發現問題，越容易解決問題。<br><br>CI講的就是這個，如何越早和越快把大家程式做建制，執行測試確保從最基本層面保證程式沒有問題。<br><br><figure><a href="https://3.bp.blogspot.com/-1RufmPvNV0Q/WEGCMMrg_sI/AAAAAAAAU7o/uPWZ0tvaDnQLkFX4WNTHOuijh6xh-rP2ACPcB/s1600/Image%2B828.png" imageanchor="1"><img alt="Build 和 Test" border="0" height="291" src="https://3.bp.blogspot.com/-1RufmPvNV0Q/WEGCMMrg_sI/AAAAAAAAU7o/uPWZ0tvaDnQLkFX4WNTHOuijh6xh-rP2ACPcB/s320/Image%2B828.png" width="320" class="img-responsive"></a><br><figcaption>從階段來說就是Build和Test</figcaption></figure></section><section><h2 id="WizKMOutline_1480687723607681">到底什麼是Continuous Delivery（CD）</h2>當程式建制沒有問題，然後測試也沒問題之後，下一個考慮的就是上線。<br><br>依照不同類型專案有不同上線方式，如果是Library專案，可能就是上nuget，所以在這個階段就是自動產生出對應的nuget package<br><br>如果是Web專案，可能就發佈成為zip或者Web Deploy package，這樣提供給運維就可以快速上線<br><br>所以CD指的是Package這個階段的動作<br><br><figure><a href="https://2.bp.blogspot.com/-6cF1st4Z9B8/WEGCMRWwg7I/AAAAAAAAU7s/KAwVycQB0y8gDjg5fHmVN_kv2nuwaVqgACPcB/s1600/Image%2B829.png" imageanchor="1"><img alt="package" border="0" height="309" src="https://2.bp.blogspot.com/-6cF1st4Z9B8/WEGCMRWwg7I/AAAAAAAAU7s/KAwVycQB0y8gDjg5fHmVN_kv2nuwaVqgACPcB/s320/Image%2B829.png" width="320" class="img-responsive"></a><br><figcaption>從階段來說就是Package</figcaption></figure></section><section><h2 id="WizKMOutline_1480687723607228">到底什麼是Continouous Deployment（CD）</h2>基本上這個和Continous Delivery差異在於，Continous Delivery 只<em>產生</em>出可用來上線的內容，但是上線或者更新還是要人為操作。<br><br>Contiouous Deployment則是連<em>上線</em>的部分都自動幫忙處理。舉例來說，以Library來說，自動把nuget package發佈到nuget.org。以web來說，自動發佈到IIS上面<br><br>到了這個地步，其實可以看出一條龍的服務了，開發完，一鍵整個完成上線。<br><br><figure><a href="https://4.bp.blogspot.com/-X2xkS6eooX0/WEGCNUs83GI/AAAAAAAAU70/ccjm20PhP-AbWMr-5LLrMb5k24cwfQU9wCPcB/s1600/Image%2B830.png" imageanchor="1"><img alt="deploy" border="0" height="305" src="https://4.bp.blogspot.com/-X2xkS6eooX0/WEGCNUs83GI/AAAAAAAAU70/ccjm20PhP-AbWMr-5LLrMb5k24cwfQU9wCPcB/s320/Image%2B830.png" width="320" class="img-responsive"></a><br><figcaption>從階段來說就是Deploy</figcaption></figure></section><section><h2 id="WizKMOutline_1480687723607556">結語</h2>希望透過這篇，大家對於DevOps常看到的詞彙和這個系列的側重點有所了解。整個DevOps重點就是<em>快</em>，而要快就要能夠重複執行，也就是達到<em>自動化</em>。<br><br>下篇會進入接下來會使用到的工具介紹。<br></section>