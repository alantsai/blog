Title: "[開發工具小技巧]應該怎麼用Visual Studio執行和進入debug比較省時間？搭配ReAttach套件快速進入Debug模式"
Published: 2018-02-12
Modified: 2018-02-12
Image: /posts/migrate/2018-02-12-devtooltips-1-visual-studio-better-run-and-debug-process-using-attach-with-reattach_Asset/image_thumb(80).png
Tags: ["「開發工具小技巧」","visual studio"]
RedirectFrom: 2018/02/devtooltips-1-visual-studio-better-run-and-debug-process-using-attach-with-reattach.html
Series: ["「開發工具小技巧」"]
---
<section><figure><a href="https://lh3.googleusercontent.com/-eWdifyOIYyc/WoB231QXdOI/AAAAAAAAXqM/mUowDx7z3vI6Ww1JT45EU18od72j5Ww6QCHMYCw/s1600-h/image%255B2%255D"><img width="654" height="290" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2018-02-12-devtooltips-1-visual-studio-better-run-and-debug-process-using-attach-with-reattach_Asset/image_thumb(80).png" border="0" class="img-responsive"></a><br><figcaption>圖片來源：https://pixabay.com/en/confused-muddled-illogical-880735/ 和 https://blog.xebialabs.com/2016/03/21/essential-devops-terms/</figcaption></figure></section><section><p>        最近在和同事聊天的時候，才發現到其實雖然我一直以來「以為」有多次強調該如何用Visual Studio run及進入debug比較節省時間，         但是其實有些同事還是不知道。     </p><p>        因此，準備一系列我個人認為大家應該都會的開發工具小技巧，這篇將會從開發每天都會做的事情，run及debug開始：在用Visual Studio開發的時候，         到底應該怎麼run和debug才是最有效率的方式，以及如何使用免費的套件ReAttach來讓debug流程更加的容易。     </p></section><section><a name="KMContentPageTopID" id="KMContentPageTopID"></a><div id="divKMOutline" style="border-style: groove none; margin: 10px 0px;"><ul style="margin: 0px 0px 0px 20px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518366855628634" ;="">一般的開發及debug流程</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518366855628661" ;="">如何優化run及debug的方式</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518366855628192" ;="">以 Start Without Debugging（快速鍵 Ctrl+F5）的執行方式替代 F5</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518366855628733" ;="">當需要debug的時候以Attach Process方式進入debug模式</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518366855628975" ;="">以套件ReAttach讓attach process的流程更容易</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518366855628764" ;="">ReAttach小檔案</a><br></li></ul></ul><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518366855628202" ;="">結語</a><br></li></ul></div></section><a name="more"></a><section><h2 id="WizKMOutline_1518366855628634">一般的開發及debug流程</h2><p>        在我以前剛學會Visual Studio開發的時候，那個時候我學習到的做法都是：         </p><ol><li>改程式</li><li>要測試的時候按下快速鍵：<code>F5</code>也就是 <code>Start Debugging</code>的動作（綠色的按鈕）</li><li>開始測試功能，如果需要修改，由於在debug模式，需要先<em>停下</em>debug模式，之後才能改</li><li>重複第一個步奏</li></ol><p>        在這個流程裡面，貌似沒有問題，但是實際上：         </p><ol><li><em>執行速度慢</em>：debug模式因為要能夠debug，因此會load很多其他東西，因此造成了執行起來速度變慢</li><li><em>需要消耗更多資源</em>：同上一條一樣，因為load的東西多因此消耗的記憶體也多</li><li><em>修改的流程消耗更多時間</em>：由於在debug模式是無法修改，因此需要停下來才能夠修改</li></ol></section><section><h2 id="WizKMOutline_1518366855628661">如何優化run及debug的方式</h2><p>        既然上面知道了一般的做法有什麼問題，那能夠怎麼優化呢？以下分幾個步奏來執行：         </p><ol><li>以 Start Without Debugging（快速鍵 Ctrl+F5）的執行方式替代 F5</li><li>當需要debug的時候以Attach Process方式進入debug模式</li><li>以套件ReAttach讓attach process的流程更容易</li></ol><section><h3 id="WizKMOutline_1518366855628192">以 Start Without Debugging（快速鍵 Ctrl+F5）的執行方式替代 F5</h3><p>            很多時候把網站run起來的目的只是為了<em>測試功能</em>，因此其實不需要進入Debug模式。         </p><div class="bs-callout bs-callout-info">            題外話：養成不依賴debug功能其實是一個好的習慣，有發生錯誤先<em>思考</em>一下問題發生原因，             而不是直接debug一步一步走，在整個的思維鍛煉上其實很有幫助。         </div><p>            所以養成以<code>Ctrl + F5</code><em>替代</em><code>F5</code>。         </p><figure><a href="https://lh3.googleusercontent.com/-3ga6A88kDP4/WoB29xFaPFI/AAAAAAAAXqU/tieMthumuqc1mYS1cp5lqJH9DiVVaF0PgCHMYCw/s1600-h/image%255B5%255D"><img width="513" height="364" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2018-02-12-devtooltips-1-visual-studio-better-run-and-debug-process-using-attach-with-reattach_Asset/image_thumb[1](67).png" border="0" class="img-responsive"></a><br><figcaption>F5及Ctrl + F5在Visual Studio選項位置</figcaption></figure><p><strong>不過如果測試過程要改東西怎麼辦？</strong></p><p>            這個時候可以用 <code>Build (快速鍵 F6)</code>來編譯修改內容。         </p><p>            如果有遇到Build好像沒有很成功，這個時候可以用<code>Clean</code>，或者<code>Rebuild</code>(Rebuild本質上就是clean + build)。         </p><figure><a href="https://lh3.googleusercontent.com/-xORZ7ypRoY0/WoB3CE0grYI/AAAAAAAAXqc/9MUhRqs-u2QKwt3HwWi4IGWarL08fdwfwCHMYCw/s1600-h/image%255B8%255D"><img width="592" height="283" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2018-02-12-devtooltips-1-visual-studio-better-run-and-debug-process-using-attach-with-reattach_Asset/image_thumb[2](55).png" border="0" class="img-responsive"></a><br><figcaption>Build、Clean及Rebuild的Visual Studio位置</figcaption></figure><div class="bs-callout bs-callout-info">            有些修改其實不需要build，因為這些是動態build出來。一般來說這種類型都是View。例如Asp.net裡面的<em>aspx</em>或者Razor view的<em>cshtml</em>。所以如果修改這種類型，連呼叫build都不需要，只需要存檔然後刷新頁面即可。         </div><p>            透過養成<code>Ctrl + F5</code>的習慣，可以減少很多啟動debug，然後停掉debug在修改所花的時間。         </p><p>            不過下一個問題是，如果遇到問題需要debug怎麼辦？         </p></section><section><h3 id="WizKMOutline_1518366855628733">當需要debug的時候以Attach Process方式進入debug模式</h3><p>            當Visual Studioa用Start Without Debugging把網站run起來之後，這個網站會被IIS Express host起來。         </p><p>            而Visual Studio可以透過<code>Attach to Process (快捷鍵: Cltr+Alt+P)</code>attach到IIS Express達到用Visual Studio啟動debug模式。         </p><dl><dt>啟動 Attach To Process 的畫面</dt><dd><figure><a href="https://lh3.googleusercontent.com/-if6ZxH5a3zA/WoB3GPFqsdI/AAAAAAAAXqk/UNLiqgZ_IpwTeJ7smYpyhg383YAEAlVlwCHMYCw/s1600-h/image%255B11%255D"><img width="535" height="444" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2018-02-12-devtooltips-1-visual-studio-better-run-and-debug-process-using-attach-with-reattach_Asset/image_thumb[3](51).png" border="0" class="img-responsive"></a><figcaption>從Debug Toolbar找到</figcaption></figure></dd><dt>選擇 iisexpress.exe</dt><dd>                 從<em>Available Process</em>找到<em>iisexpress.exe</em>，如果在清單裡面沒有，可以勾選<code>Show process from all users</code><figure><a href="https://lh3.googleusercontent.com/-y9C5Fn8Zu4k/WoB3KhH9hZI/AAAAAAAAXqs/D0jFVPte33w-NbEssJAVsiMDXPzgwrKFgCHMYCw/s1600-h/image%255B14%255D"><img width="654" height="514" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2018-02-12-devtooltips-1-visual-studio-better-run-and-debug-process-using-attach-with-reattach_Asset/image_thumb[4](53).png" border="0" class="img-responsive"></a><figcaption>選擇iisexpress.exe</figcaption></figure></dd></dl><p>            Attach完了之後，Visual Studio就會進入到一般的debug模式，剩下就和一般debug沒有什麼兩樣。         </p><div class="bs-callout bs-callout-info">            如果debug完了，停下來，網站是<em>不會停</em>，這個和一般<code>F5</code>不一樣，如果是<code>F5</code>啟動的，當停下debug模式的時候，             整個網站<em>也會停下來</em>。         </div><div class="bs-callout bs-callout-info">            如果attach上去之後，發現無法下中斷點，那麼最有可能是build沒有成功或者沒有乾淨，最好就是先<code>clean</code>，在<code>Ctrl + F5</code>。         </div><div class="bs-callout bs-callout-info">            了解了<code>Attach To Process</code>，換個角度說其實也可以attach到一般IIS網站，甚至Remote Debug。這個完全做的到，但是這篇就不介紹了。         </div></section><section><h3 id="WizKMOutline_1518366855628975">以套件ReAttach讓attach process的流程更容易</h3><p>            了解了<code>Attach To Process</code>之後，下一個問題就是，每一次都要開那個畫面然後找到iisexpress真的很麻煩，是否有什麼方式讓找這個process更加容易呢？         </p><p>            有人因此建立了一個套件，<em><strong>ReAttach</strong></em>，甚至非常佛心的Open Source以及以Free的方式發佈出來。         </p><div class="bs-callout bs-callout-default"><h4 id="WizKMOutline_1518366855628764">ReAttach小檔案</h4><ul><li><em>支援的Visual Studio版本</em>：2012+</li><li><em>官網</em>：<a href="https://marketplace.visualstudio.com/items?itemName=ErlandR.ReAttach">https://marketplace.visualstudio.com/items?itemName=ErlandR.ReAttach</a></li><li><em>直接下載</em>：<a href="https://marketplace.visualstudio.com/items?itemName=ErlandR.ReAttach">https://marketplace.visualstudio.com/items?itemName=ErlandR.ReAttach</a></li><li><em>最新版本：</em>2.2</li><li><em>Source Code</em>：<a href="https://github.com/erlandranvinge/ReAttach">https://github.com/erlandranvinge/ReAttach</a></li></ul></div><p>            ReAttach使用非常簡單，安裝了之後，在工具列會有一個<em>紫色的播放按鈕</em>可以按：             </p><figure><a href="https://lh3.googleusercontent.com/-oh1r5hytecA/WoB3Uj2RgvI/AAAAAAAAXq0/yIRMm0ix0IkUWNQTfizsn4eaRDCA8vv0wCHMYCw/s1600-h/image%255B17%255D"><img width="654" height="135" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2018-02-12-devtooltips-1-visual-studio-better-run-and-debug-process-using-attach-with-reattach_Asset/image_thumb[5](36).png" border="0" class="img-responsive"></a><br><figcaption>ReAttach的功能</figcaption></figure><p>            在這個功能裡面，可以按旁邊下三角形看到最近的<em>4筆</em>曾經有Attach過的Process。         </p><p>            最新Attach的Process會以第一筆呈現。         </p><p>            只需要選擇要Attach的Process即可。         </p><p>            如果說上面的Process都沒有目前想要Attach的，那麼可以先用<code>F5</code>，然後停下來之後剛剛那個process就會出現在第一筆。         </p></section></section><section><h2 id="WizKMOutline_1518366855628202">結語</h2><p>        如果養成了只以<code>Ctrl+F5</code>的方式在Run程式，真需要debug的時候在用<code>Attach Process</code>的方式進入debug模式，         不止能夠讓整個開發流程速度更快，也能夠鍛煉不debug情況下嘗試解決問題。     </p><p>        希望透過這篇，如果還沒養成這個習慣的可以先試試看，並且裝ReAttach讓整個流程變得更加順利。     </p><p>            如果有不同且能夠更節省開發時間的流程，也請用留言方式互相切磋切磋。     </p></section><section>         <div class="wlWriterEditableSmartContent" id="scid:77ECF5F8-D252-44F5-B4EB-D463C5396A79:3254e0d7-b119-4861-a2ce-ea7547a93ab2" style="margin: 0px; padding: 0px; float: none; display: inline;">標籤: <a href="/tags/%e3%80%8c%e9%96%8b%e7%99%bc%e5%b7%a5%e5%85%b7%e5%b0%8f%e6%8a%80%e5%b7%a7%e3%80%8d" rel="tag">「開發工具小技巧」</a>,<a href="/tags/Visual+Studio" rel="tag">Visual Studio</a></div></section>