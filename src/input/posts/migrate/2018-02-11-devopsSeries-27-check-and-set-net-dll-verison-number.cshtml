Title: "[從.Net工程師的角度來看DevOps][27]如何看.Net Dll版號和如何給.Net的Dll打上版號"
Published: 2018-02-11
Modified: 2018-02-11
Image: /posts/migrate/2018-02-11-devopsSeries-27-check-and-set-net-dll-verison-number_Asset/image_thumb(79).png
Tags: [".net","「ithome 第八屆鐵人賽」","devops","「從.net工程師的角度來看devops」"]
RedirectFrom: 2018/02/devopsSeries-27-check-and-set-net-dll-verison-number.html
Series: ["「iThome 第八屆鐵人賽」","「從.Net工程師的角度來看DevOps」"]
---
<section><figure><a href="https://lh3.googleusercontent.com/-65kHFuAEI-k/Wn_1jMrzvkI/AAAAAAAAXpQ/-jCaMHO-AvsCpfFH2ocN_I1S685RXne-wCHMYCw/s1600-h/image%255B2%255D"><img width="654" height="290" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2018-02-11-devopsSeries-27-check-and-set-net-dll-verison-number_Asset/image_thumb(79).png" border="0" class="img-responsive"></a><br><figcaption>圖片來源：https://pixabay.com/en/books-spine-colors-pastel-1099067/ 和 https://blog.xebialabs.com/2016/03/21/essential-devops-terms/</figcaption></figure></section><section><p>在上一篇(<a href="http://blog.alantsai.net/2018/02/devopsSeries-26-package-stage-intro.html">[26]Package階段介紹</a>)介紹完了Package階段主要做的兩個事情：打包的<em>格式</em>，以及用來區分差異的<em>版號 (version)</em>。</p><p>在接下來的幾篇將會介紹和版號有關的內容。     </p><p>這篇會從最基本的開始，在.Net裡面是如為某一個library產生出來的dll打上版號?如何看到這個版號的資訊呢？     </p></section>     <section> <a name="KMContentPageTopID" id="KMContentPageTopID"></a><div id="divKMOutline" style="border-style: groove none; margin: 10px 0px;"><ul style="margin: 0px 0px 0px 20px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518334728728238" ;="">有寫過的相關文章</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518334728728213" ;="">一張表看懂dll版號的值和設定版號方式 - TL;DR</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518334728728950" ;="">如何看dll的版號？</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518334728728142" ;="">3個版號的差異是什麼？</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518334728728214" ;="">如何設定dll的版號？</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518334728728384" ;="">結語</a><br></li></ul></div></section>      <a name="more"></a>      <section><h2 id="WizKMOutline_1518334728728238">有寫過的相關文章</h2><ul><li><a href="http://blog.alantsai.net/2017/10/donet-dll-hell-problem-how-to-use-bindingredirect.html">[.Net]Dll明明有在，為什麼出現找不到DLL錯誤 - 一次搞懂如何處理Dll版本問題(Dll Hell)</a> - 這篇介紹的是如何在runtime的時候選擇想要執行的版本 - 也就是那個版號</li></ul></section><section><h2 id="WizKMOutline_1518334728728213">一張表看懂dll版號的值和設定版號方式 - TL;DR</h2><div class="table-responsive"><table class="table"><tbody><tr><th></th><th>Assembly Version</th><th>File Version</th><th>Product Version</th></tr><tr><th>作用</th><td>.Net Runtime對應<br>dll版本的時候看這個值</td><td>區別build出來的dll和上一個版本的差異。一般build資訊會放在這邊。</td><td>從<em>產品</em>的角度這個dll的版本<br>用nuget exe產生nuget的時候，會用這個作為nuget的版號</td></tr><tr><th>確認dll的版號值</th><td>使用powershell：                 <br><code>[System.Reflection<br>.Assembly]<br>::LoadFrom("d:\xxx.dll") <br>.GetName().Version</code></td><td>                 檔案總管<br>右鍵<br>Property<br>Details 頁簽<br>File Version             </td><td>                 檔案總管<br>右鍵<br>Property<br>Details 頁簽<br>Product Version             </td></tr><tr><th>設定的Attribute名稱</th><td><code>[assembly: AssemblyVersion("1.0.0.0")]</code></td><td><code>[assembly: AssemblyFileVersion("1.0.0.0")]</code></td><td><code>[assembly: AssemblyInformationalVersion("1.0.0.0")]</code></td></tr></tbody></table></div><p>詳細說明往下看。     </p></section><section><h2 id="WizKMOutline_1518334728728950">如何看dll的版號？</h2><p>當dll build出來之後，可以直接對他點：         </p><ol><li><code>右鍵</code></li><li><code>Property (內容)</code></li><li>切換到 頁簽 <code>Details</code></li></ol>裡面有兩個欄位有數字：         <ol><li>File Version</li><li>Product Version</li></ol><figure><a href="https://lh3.googleusercontent.com/-bOInOOLYmGU/Wn_1oO9A23I/AAAAAAAAXpY/QnNdtPGLOVMzwNvYFhvVPn-xsciPfkcwwCHMYCw/s1600-h/image%255B11%255D"><img width="654" height="459" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2018-02-11-devopsSeries-27-check-and-set-net-dll-verison-number_Asset/image_thumb[3](50).png" border="0" class="img-responsive"></a><br><figcaption>建立出來的console版號</figcaption></figure><p>不過其實這個不是完整的版號內容，在dll裡面還有一個版號，這個版號是<em><strong>Assembly</strong></em>的版號，這個版號是<em><strong>.Net Reference dll看的版號</strong></em>。如果要看這個版號可以用powershell：         </p><pre class="brush: powershell;"><code class="language-powershell line-numbers">[System.Reflection.Assembly]::LoadFrom("d:\ConsoleApplication1.exe").GetName().Version
        </code></pre><figure><a href="https://lh3.googleusercontent.com/-FzcS-HNDWN0/Wn_1rCyi0gI/AAAAAAAAXpg/KLRU0W3MLsQEr7cSShv_LV-DKufVYBjSwCHMYCw/s1600-h/image%255B8%255D"><img width="654" height="100" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2018-02-11-devopsSeries-27-check-and-set-net-dll-verison-number_Asset/image_thumb[2](54).png" border="0" class="img-responsive"></a><br><figcaption>取得Assembly Version</figcaption></figure><p>從上面的資訊可以看出來，一個dll總共有3個版號：         </p><ol><li>File Version</li><li>Product Version</li><li>Assembly Version</li></ol>這3個版號的作用是什麼呢？     </section><section><h2 id="WizKMOutline_1518334728728142">3個版號的差異是什麼？</h2><dl><dt>Assembly Version</dt><dd>這個是.Net裡面內部再用的，所以當有reference某個dll，會包含一個版號的資訊。這個版號看的就是Assembly Version這個值。</dd><dt>File Version</dt><dd><p>原則上這個是用來區分build和build之間差異的版本資訊。因此，一般來說這個會包含像是<em><strong>build number</strong></em>這種資訊。             </p><p>很有可能Assembly的版號還沒更新，但是在開發的過程，每一次build可能都不一樣，那麼這個時候File Version可能就會因此提升來<em><strong>表示</strong></em>這次build和上次build不同。             </p></dd><dt>Product Version</dt><dd><p>這個主要用來表示，從一個<em><strong>產品</strong></em>的角度之間的差異。             </p><div class="bs-callout bs-callout-info">如果用nuget建立出nuget的package，那麼nuget預設使用Product Version作為版號。             </div></dd></dl></section><section><h2 id="WizKMOutline_1518334728728214">如何設定dll的版號？</h2><p>到目前為止了解了3種不同版號的用意及如何看到這些版號的值，接下來就是如何在build的時候把這些版號資訊寫進去。     </p><p>在建立任何專案的時候，都會自動建立出<code>Properties\AssemblyInfo.cs</code>這個檔案。     </p><p>這個檔案包含一些dll的meta資訊，例如assembly的名稱，assembly描述等。其中一塊就是用來定義3個版號資訊。     </p><p>這3個attribute分別為：         </p><dl><dt>assembly: AssemblyVersion</dt><dd>對應到 Assembly Version</dd><dt>assembly: AssemblyFileVersion</dt><dd>對應到File Version</dd><dt>assembly: AssemblyInformationalVersion</dt><dd>對應到Product Version</dd></dl>其中 <code>AssemblyInformationalVersion</code>預設不存在，是需要自己手動添加。         <figure><a href="https://lh3.googleusercontent.com/-Fju6tS060-Q/Wn_1yTP_4WI/AAAAAAAAXpo/e4z2DXXDoCUjEGXS8S0eMtjDQjYQssHmwCHMYCw/s1600-h/image%255B14%255D"><img width="654" height="259" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2018-02-11-devopsSeries-27-check-and-set-net-dll-verison-number_Asset/image_thumb[4](52).png" border="0" class="img-responsive"></a><br><figcaption>設定內容的截圖</figcaption></figure></section><section><h2 id="WizKMOutline_1518334728728384">結語</h2><p>這篇介紹了在.Net裡面的3個版號值的名稱，以及怎麼查到一個dll這三個值的方式。     </p><p>再來介紹了如何在.Net專案透過設定<code>Properties\AssemblyInfo.cs</code>這個檔案來設定build出來的dll的3個值。     </p><p>在下篇將會介紹版號的組成構架應該是如何，並且使用最常見的版號模式 SemVer 2.0（又稱為Semantic Version 2.0）     </p></section><section>         <div class="wlWriterEditableSmartContent" id="scid:77ECF5F8-D252-44F5-B4EB-D463C5396A79:d5489615-e23b-48b9-a707-07a5468938ee" style="margin: 0px; padding: 0px; float: none; display: inline;">標籤: <a href="/tags/%e3%80%8c%e5%be%9e.Net%e5%b7%a5%e7%a8%8b%e5%b8%ab%e7%9a%84%e8%a7%92%e5%ba%a6%e4%be%86%e7%9c%8bDevOps%e3%80%8d" rel="tag">「從.Net工程師的角度來看DevOps」</a>,<a href="/tags/%e3%80%8ciThome+%e7%ac%ac%e5%85%ab%e5%b1%86%e9%90%b5%e4%ba%ba%e8%b3%bd%e3%80%8d" rel="tag">「iThome 第八屆鐵人賽」</a>,<a href="/tags/devops" rel="tag">devops</a>,<a href="/tags/.net" rel="tag">.net</a></div></section>