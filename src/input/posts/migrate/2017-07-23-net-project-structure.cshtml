Title: "該怎麼開專案的資料夾結構？每個專案應該要有的資料夾結構和檔案"
Published: 2017-07-23
Modified: 2017-07-23
Image: /posts/migrate/2017-07-23-net-project-structure_Asset/image_thumb(20).png
Tags: ["faq","best practices","csharp","git"]
RedirectFrom: 2017/07/net-project-structure.html
Series: []
---
<section><figure>  <a href="https://lh3.googleusercontent.com/-a7ZZO4VOGmM/WXS4iikVg-I/AAAAAAAAWCU/uaoAaJUarD8I-1smPrYKQb28dm9jNZxtwCHMYCw/s1600-h/image%255B2%255D"><img width="654" height="290" title="image" style="display: inline; background-image: none;" alt="該怎麼開專案的資料夾結構？" src="/posts/migrate/2017-07-23-net-project-structure_Asset/image_thumb(20).png" border="0" class="img-responsive"></a><figcaption>圖片來源：<a href="https://pixabay.com/en/key-tag-security-label-symbol-2114047/">https://pixabay.com/en/key-tag-security-label-symbol-2114047/</a></figcaption></figure><p>每當需要建立一個新的專案的時候，最長遇到的問題就是，我的 <strong><em>資料夾應該怎麼開</em></strong>、<strong><em>有哪些檔案是必須要存在</em></strong>。   </p><p>對於初學者來說，可能會覺得這有什麼好難的，我就visual studio開起來，然後建立一個專案就可以開始工作了，範例不都是這樣開的嗎？   </p><p>這個為什麼很重要呢？假設有些必要的檔案沒有建立，除了在開發上會造成負擔（例如缺少git忽略檔案），在之後自己回來看的時候就要花很多時間去找。例如文件在哪裡？專案的變更記錄在哪裡？ci的自動化build script在哪裡？   </p><p>如果每個專案的結構和內容相近的話，不僅讓找資料更加方便，也能提醒自己有些東西需要補（例如萬惡的文件XD）。   </p><p>這篇將會介紹每個專案應該要有的資料夾結構和應該要有的檔案，讓未來在建立專案的時候不會忘記。   </p><p>最後，在實際進入之前，和任何軟體開發一樣，這個有很重的個人喜好（personal preference）在裡面，所以可能和各位習慣不同，由我先拋磚引玉，如果有不同想法和更好建議也歡迎提出來。   </p><p>關鍵字:專案結構、開專案資料夾、project strcture、特殊檔案   </p><div class="bs-callout bs-callout-default">參考的repo：<a href="https://github.com/alantsai/mhat-common-boilerplate-repo">mhat-common-boilerplate-repo</a></div></section>    <section> <a name="KMContentPageTopID" id="KMContentPageTopID"></a><div id="divKMOutline" style="border-style: groove none; margin: 10px 0px;"><ul style="margin: 0px 0px 0px 20px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1500820896048576" ;="">好的專案結構的重要性</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1500820896048649" ;="">可參考的應該要有的專案結構</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1500820896048431" ;="">應該要有的資料夾結構</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1500820896048878" ;="">build</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1500820896048160" ;="">docs</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1500820896048765" ;="">src</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1500820896048501" ;="">tools</a><br></li></ul><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1500820896048207" ;="">應該要有的檔案</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1500820896048385" ;="">.gitignore</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1500820896048633" ;="">.gitattributes</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1500820896048338" ;="">README.md</a><br></li></ul><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1500820896048927" ;="">最好要有的檔案</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1500820896048785" ;="">LICENSE.md</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1500820896048856" ;="">CONTRIBUTING.md</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1500820896048900" ;="">CHANGELOG.md</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1500820896048585" ;="">CODE_OF_CONDUCT.md</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1500820896048961" ;="">ISSUE_TEMPLATE</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1500820896048374" ;="">NEW_PULL_REQUEST</a><br></li></ul><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1500820896049674" ;="">結語</a><br></li></ul></div></section><br><a name="more"></a><br><section><h2 id="WizKMOutline_1500820896048576">好的專案結構的重要性</h2><p>在進入正題之前，還是要先說說為什麼這件事情很重要。   </p><p>先給大家一個例子：我常常在非我自己建立的專案裡面最長發現漏掉的就是 <code>.gitignore</code>檔案 - 這個檔案是git版控會用來忽略不要進入版控的一個設定檔案。沒有這個會造成什麼後果？每一次build之後，一堆bin底下的dll   都會變成有變更。   </p><p>如果仔細一點的工程師，在commit的時候會知道不要上這些東西，如果commit不看就一股腦就上上去了，造成的後果是不止專案空間比較大，未來在追蹤log的時候有很多雜訊，浪費判斷時間。   </p><p>同樣，除了和開發有直接關係的這種之外，一些專案訊息類型的也很重要，例如專案的變更記錄 - 請問你怎麼知道1.3版本和1.2版本從功能面差多少？（下面我會在詳細提這個部分）   或者是你這個專案的文件在哪裡？   </p><p>這些其實都是因為在開專案的時候，專案缺少了好的結構和一些檔案。   </p></section><section><h2 id="WizKMOutline_1500820896048649">可參考的應該要有的專案結構</h2><p>我有建立了一個github的repo，裡面包含了一個專案應該要有的結構，和每一個檔案裡面應該要有的內容。   </p><div class="bs-callout bs-callout-info"><ul><li>專案位置：<a href="https://github.com/alantsai/mhat-common-boilerplate-repo">mhat-common-boilerplate-repo</a></li></ul></div><p>假設你自己要建立一個專案，可以透過以下的powershell指令快速從這個專案下載下來並且init自己的專案結構   </p><pre class="brush: powershell;"><code class="language-powershell line-numbers">git clone https://github.com/alantsai/mhat-common-boilerplate-repo.git
cd mhat-common-boilerplate-repo
rm .git -Recurse -Force
git init
git add -A
git commit -m "init project"</code></pre>然後改對應檔案的一些內容描述以符合你的專案內容。更詳細介紹可以參考專案的<a href="https://github.com/alantsai/mhat-common-boilerplate-repo#不包含這個專案的歷史記錄">說明</a><p>下面會針對裡面的每一個資料夾和檔案做說明。   </p></section><section><h2 id="WizKMOutline_1500820896048431">應該要有的資料夾結構</h2><p>首先是資料夾的部分，每一個專案至少要有：   </p><ul><li>build</li><li>docs</li><li>src</li><li>tools</li></ul><section><h3 id="WizKMOutline_1500820896048878">build</h3><p>這邊我對build的定義是和建制這個專案有關的一些script檔或者建制過程產生的一些臨時檔案可以放的地方。    </p><p>我習慣性會把build script例如建立nuget或者執行測試放到一個自己的獨立資料夾，而這裡就是那個地方。    </p></section><section><h3 id="WizKMOutline_1500820896048160">docs</h3><p>放文件的地方，有些習慣用<code>doc</code> - 不過很多專案都有加s，所以這邊是有加s的版本    </p><p>原則上任何專案都應該有文件，而文件可以放在另外一個地方，但是最好是用markdown和專案放在一起，這樣也可以順便版控文件    </p><p>整個結構大概會是：    </p><pre class="brush: plain;"><code class="language-none line-numbers">docs
   |--asset
   |--topic 1
     |--asset
     |--sub topic 1
       |--...
     |--README.md
   |-README.md
   |-SUMMARY.md</code></pre><p>說明一下：    </p><dl><dt>      asset     </dt><dd>      這個資料夾用來放markdown裡面用到的圖片或者檔案 - 方便鏈接過去      </dd><dd></dd><dt>      README.md     </dt><dd>      這個是每一個chapter或者每一個部分的起始頁，有點類似<code>index.html</code>在網站的地位     </dd><dd></dd><dt>      SUMMARY.md     </dt><dd>      這個則是整個文件的目錄的概念      </dd><dd></dd></dl></section><section><h3 id="WizKMOutline_1500820896048765">src</h3><p>這個就是主要放程式碼的地方，有些專案會叫他<code>lib</code>或<code>app</code>。    </p><p>裡面的資料結構大概會是：    </p><pre class="brush: plain;"><code class="language-none line-numbers">src
   |--{project name}.Bll
   |--{project name}.Web
   |-- ...
   |-{project name}.sln</code></pre><p>說明一下：    </p><dl><dt>     {project name}     </dt><dd>      這個指的是專案名稱，例如假設我今天有一個xxx專案的網站，那麼我就會有 <code>xxx.Bll</code>作為bll層的<code>csproj</code>位置，<code>xxx.Web</code>作為網站的<code>csproj</code>位置。     </dd><dt>     {project name}.sln     </dt><dd><code>src</code>進去之後的唯一檔案就是他，這樣不僅很明確如何開啟這個專案，如果有多個sln也不會混在一起     </dd><dd></dd></dl><div class="bs-callout bs-callout-info">一般我在開專案的時候，我建立的都會是一個<code>blank solution</code>（只有sln） - 然後我會把它手動拉倒<code>src</code>下面，這樣之後建立的<code>csproj</code>專案的結構就會像描述那樣。    </div></section><section><h3 id="WizKMOutline_1500820896048501">tools</h3><p>這個資料夾我會放一些工具類的內容。例如說網站都要套版，ui就會放在裡面。    </p><p>假設有用到一些第三方的dll或者exe也可以放在這邊    </p></section><p>以上是關於資料夾結構的部分，也可以參考一些說明像是<a href="https://github.com/kriasoft/Folder-Structure-Conventions">Folder-Structure-Conventions</a>這個專案就是在介紹這些內容。   </p></section><section><h2 id="WizKMOutline_1500820896048207">應該要有的檔案</h2><p>介紹完應該要有的資料夾結構，接下來就是檔案啦，一定要有的會有：   </p><ol><li>.gitignore</li><li>.gitattributes</li><li>README.md</li></ol><section><h3 id="WizKMOutline_1500820896048385">.gitignore</h3><p>.gitignore基本上就是git的忽略檔案 - 忽略那些不要進入版控的檔案。     </p><p><strong><em>這個為什麼重要？</em></strong>除了可以讓git的repo小一點之外，也可以避免每一次commit看到一堆修改，或者是在追log的時候看到一些“雜訊”。    </p><p><strong><em>什麼才應該commit到git裡面？</em></strong>基本上只要是可以 <strong><em>重新建立出來的都應該進入忽略檔案</em></strong>。例如build出來的bin檔案。    </p><div class="bs-callout bs-callout-info">在github上面有個專案專門放那些語言和環境應該忽略什麼<a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a>。我這邊的gitignore也是組合這個repo裡面的內容。    </div></section><section><h3 id="WizKMOutline_1500820896048633">.gitattributes</h3><p>這個檔案能夠設定git在操作某些檔案的時候要做那些處理。    </p><p><strong><em>為什麼重要？</em></strong>還記得之前有一篇介紹關於斷行的問題：<a href="http://blog.alantsai.net/2017/07/git-normalize-line-ending.html">[git]為什麼常出現有修改但是比對不卻顯示不出差異？談談檔案斷行問題和如何達到不同平台正確一致化</a></p></section><section><h3 id="WizKMOutline_1500820896048338">README.md</h3><p>這個檔案就好比以前一包html裡面<code>index.html</code>的概念 - 所有資訊的入口都在這個檔案。     </p><p><strong><em>為什麼重要？</em></strong>如果沒有一個入口，根本無法快速上手這個專案。尤其目前各個git host都會預設呈現這個檔案的內容。    </p><p>在這個檔案裡面，一般來說會有幾個內容：    </p><dl><dt>      介紹專案的目的     </dt><dd>      每個專案都有特定目的，介紹清楚可以讓後來看的時候馬上知道這個專案是不是你在找的那個專案。     </dd><dd></dd><dt>      專案狀態的badge     </dt><dd><p>例如目前最新版本的build狀態，還是透過gitter溝通的網址，這些都可以用badge快速呈現讓使用者一看知道一些資訊。     </p><p>badge可以參考<a href="http://shields.io/">http://shields.io/</a></p></dd><dd></dd><dt>      如何快速上手     </dt><dd>      怎麼讓人能夠快速使用這個專案，例如透過nuget安裝然後使用     </dd><dd></dd><dt>      其他資訊的鏈接     </dt><dd>      例如要看文件提供一個鏈接連到<code>docs</code>的<code>README.md</code>檔案；看變更記錄提供鏈接到對應檔案。     </dd><dd></dd></dl><p>網路上蠻多<code>README.md</code>的範例（例如這個<a href="https://github.com/fraction/readme-boilerplate">https://github.com/fraction/readme-boilerplate</a>）大家都可以參考一下    </p><div class="bs-callout bs-callout-warning">我專案的ReadMe裡面都有說明每一個部分應該寫的內容。    </div></section></section><section><h2 id="WizKMOutline_1500820896048927">最好要有的檔案</h2><p>接下來介紹的檔案都是最好要有類型的檔案，有些可能和open source比較有關，所以不一定都會放，但是和大家做個極少。   </p><div class="bs-callout bs-callout-info">題外話，這些特殊類型的檔案預設都會是<em>全大寫</em>，例如<code>README.md</code>，不過也沒有一定規定，所以還是看個人喜好。   </div><p>總共會介紹：   </p><ul><li>LICENSE.md</li><li>CONTRIBUTING.md</li><li>CHANGELOG.md</li><li>CODE_OF_CONDUCT.md</li><li>ISSUE_TEMPLATE</li><li>NEW_PULL_REQUEST</li></ul><section><h3 id="WizKMOutline_1500820896048785">LICENSE.md</h3><p>這個很明顯就是open source專案會用到的，明確告訴使用者你的授權模式。    </p><p>一般來說，如果只是希望版權是你的，但是允許大家做任何修改並且沒有其他限制，那麼<code>MIT</code>最適合。    </p><p>MIT的license很簡單，就是一段話，把名字改成自己的的名字和年份改成對應年份就好。    </p><div class="bs-callout bs-callout-info"><ol><li>       如果不知道該選什麼作為license，可以參考github建立的一個網站：<a href="https://choosealicense.com/">https://choosealicense.com/</a></li><li>        其他相關資訊可以參考：<a href="https://opensource.guide/legal/#which-open-source-license-is-appropriate-for-my-project">lisense opensource project</a>、       <a href="https://help.github.com/articles/licensing-a-repository/">Licensing a repository</a></li></ol></div><div class="bs-callout bs-callout-warning">提醒大家，我不是法律人士，所以對這種授權也可能理解有錯，所以如果你對於你的授權有疑慮，最好還是請教相關的法律專業人士。    </div></section><section><h3 id="WizKMOutline_1500820896048856">CONTRIBUTING.md</h3><p>這個檔案基本上是介紹如何貢獻到你的專案。    </p><p>貢獻有很多形式，例如：    </p><ol><li>翻譯</li><li>寫文件</li><li>改code - 介紹如何build和改code</li></ol><p>這邊也可以提供一些專案目標（roadmap）的資訊，讓其他人知道你的目標。 </p><p>也可以提到一些這個專案<em>不接受</em>什麼貢獻，避免有人不清楚一直問。    </p><div class="bs-callout bs-callout-info">更多參考資訊：     <ol><li><a href="https://opensource.guide/starting-a-project/#writing-your-contributing-guidelines">writing有人contributing guidelines</a></li><li><a href="https://github.com/nayafia/contributing-template/blob/master/CONTRIBUTING-template.md">contributing template</a></li><li><a href="http://mozillascience.github.io/working-open-workshop/contributing/">Mozila contributing guidelines</a></li><li><a href="https://github.com/blog/1184-contributing-guidelines">github contributing guidelines</a></li></ol></div></section><section><h3 id="WizKMOutline_1500820896048900">CHANGELOG.md</h3><p>專案的變更記錄檔案。    </p><dl><dt><em><strong>這個檔案為什麼重要？</strong></em></dt><dd>     是否能夠讓人家一眼了解版號之間變更的主要目的就是這個檔案要傳達的消息。     </dd><dd></dd><dt><em><strong>和git的log有什麼差別？</strong></em></dt><dd>     切記，git log是細部的說明每次調整什麼，但是這個檔案則是從大局來看到底變動了什麼，所以他絕對不是git log貼上去就好。     </dd><dd></dd><dt><em><strong>github 的 release不就可以寫說明，幹嘛還要有這個檔案？</strong></em></dt><dd>      github release非常巧妙的利用了git tag的資訊讓大家方便找每一個release，但是問題是    假設今天你的repo要搬到別的地方去呢，假設那個hosting不支援release的時候要怎麼辦？因此這個檔案提供一種<em>萬用（universal）資訊的提供位置</em>。     </dd><dd></dd><dt><em>這個檔案應該些什麼？</em></dt><dd>      基本上，每一個版號會有個時間記錄，然後這個版號下面會有 對應的 變更類型（<code>Added</code>、<code>Changed</code>、<code>Deprecated</code>、<code>Removed</code>、<code>Fixed</code>和      <code>Security</code>）     </dd><dd></dd></dl><div class="bs-callout bs-callout-info">更多關於格式的部分可以參考：<a href="http://keepachangelog.com/en/1.0.0/">Keep a changelog</a>（也有中文，進去右上角可以切換語言，提供英文鏈接因為是最新內容）    </div></section><section><h3 id="WizKMOutline_1500820896048585">CODE_OF_CONDUCT.md</h3><p>這個是大家在這個repo合作的合作公約。    </p><p>不過說實話，我個人覺得意義比較沒那麼大，所以我的範例repo沒有放。    </p><div class="bs-callout bs-callout-info">相關資訊可以參考：<a href="https://opensource.guide/code-of-conduct/">https://opensource.guide/code-of-conduct/</a></div></section><section><h3 id="WizKMOutline_1500820896048961">ISSUE_TEMPLATE</h3><p>這個是github上面才會吃的檔案，當使用者建立一個issue，會有一個範本跑出來。這個檔案就是定義範本內容。 </p><div class="bs-callout bs-callout-info">詳細資訊參考github：<a href="https://github.com/blog/2111-issue-and-pull-request-templates">https://github.com/blog/2111-issue-and-pull-request-templates</a></div></section><section><h3 id="WizKMOutline_1500820896048374">NEW_PULL_REQUEST</h3><p>一樣是github上面才會吃的檔案，當使用者建立一個pull request呈現的內容，這個範本就是定義那些內容。    </p><div class="bs-callout bs-callout-info">詳細資訊參考github：<a href="https://github.com/blog/2111-issue-and-pull-request-templates">https://github.com/blog/2111-issue-and-pull-request-templates</a></div></section><p>以上就是這些特殊檔案的說明。其他參考資訊：<a href="https://github.com/kmindi/special-files-in-repository-root">https://github.com/kmindi/special-files-in-repository-root</a></p></section><section><h2 id="WizKMOutline_1500820896049674">結語</h2><p>這篇介紹了專案應該要有的結構和一些特殊檔案的使用說明。希望未來對於大家在建立專案的時候有幫助。   </p><p>當然，這個和個人喜好有非常大的關係，所以由我先和大家拋磚引玉一下，也希望大家給我一些回饋。 </p><div class="wlWriterEditableSmartContent" id="scid:77ECF5F8-D252-44F5-B4EB-D463C5396A79:23f38e24-ba23-4318-8458-963953f68e55" style="margin: 0px; padding: 0px; float: none; display: inline;">標籤: <a href="/tags/Git" rel="tag">Git</a>,<a href="/tags/C%23" rel="tag">C#</a>,<a href="/tags/FAQ" rel="tag">FAQ</a>,<a href="/tags/best+practices" rel="tag">best practices</a></div></section>