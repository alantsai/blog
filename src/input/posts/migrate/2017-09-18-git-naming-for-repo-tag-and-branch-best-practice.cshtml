Title: "[git]repo、branch和tag取名建議和注意事項 - 怎麼取名比較不會有問題"
Published: 2017-09-18
Modified: 2017-09-18
Image: /posts/migrate/2017-09-18-git-naming-for-repo-tag-and-branch-best-practice_Asset/image_thumb(37).png
Tags: ["faq","best practices","git"]
RedirectFrom: 2017/09/git-naming-for-repo-tag-and-branch-best-practice.html
Series: []
---
<section><figure><a href="https://lh3.googleusercontent.com/-S7iuBS5PD84/Wb6jAKfSZMI/AAAAAAAAWZw/miNJOcMgk38YHwzSUB1QStakfYigAAvYQCHMYCw/s1600-h/image%255B2%255D"><img width="654" height="290" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-09-18-git-naming-for-repo-tag-and-branch-best-practice_Asset/image_thumb(37).png" border="0" class="img-responsive"></a><br><figcaption>圖片來源：https://pixabay.com/en/key-tag-security-label-symbol-2114047/</figcaption></figure></section><section><p>  最近在和同事協同開發的時候，發生了一件事情：   </p><p>  由於我們還沒啟用CD（自動部署）但是更新測試機器又不一定是同一個人，為了好管控目前程式碼和目前測試機器上面的版本，我們使用了一個標籤叫做<code>TestServer</code>來記錄。   </p><p>  不過當我同事更新的時候，他使用了<code>testserver</code>作為標籤，結果我這邊發生了雖然local只有一個tag<code>testserver</code>，但是在remote上面其實有兩個標籤：<code>TestServer</code>和<code>testserver</code>。   </p><p>  為什麼會發生這個事情呢？如果不處理，未來在看的時候非常混亂，這讓我想起來一直想要寫的一篇文章，為git repo、tag和branch取名的時候應該要注意什麼比較不會有問題，因此兩篇一起寫，算是不好好naming會帶來什麼問題的use case範例。   </p><p>  搜索關鍵字：naming guidance for git repo, tag and branch.   </p></section><section><div class="bs-callout bs-callout-default">   範例repo請看：<a href="https://github.com/alantsai-samples/git-naming-problem">alantsai-samples/git-naming-problem</a></div></section><section><a name="KMContentPageTopID" id="KMContentPageTopID"></a><div id="divKMOutline" style="border-style: groove none; margin: 10px 0px;"><ul style="margin: 0px 0px 0px 20px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1505664696184126" ;="">解決方式 - TL;DR</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1505664696184597" ;="">取名建議 - TL;DR</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1505664696185747" ;="">重現問題</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1505664696185503" ;="">建立一個repo</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1505664696185379" ;="">先打一個UnReleased的標籤</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1505664696185176" ;="">push到remote</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1505664696185137" ;="">在修改之後打一個unreleased的標籤</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1505664696185858" ;="">檢查</a><br></li></ul><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1505664696185312" ;="">了解為什麼local變成一個而remote還是兩個</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1505664696185376" ;="">git tag是怎麼儲存</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1505664696185578" ;="">作業系統對待檔名大小寫的不同</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1505664696185673" ;="">例外情況</a><br></li></ul></ul><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1505664696185732" ;="">結語</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1505664696185651" ;="">參考資料</a><br></li></ul></div></section><a name="more"></a><section><h2 id="WizKMOutline_1505664696184126">解決方式 - TL;DR</h2><p>  如果remote出現了兩個一樣名字的標點，但是只是大小寫不同，那麼：   </p><ul><li>建議保留小寫的版本</li><li>     用以下指令刪掉遠端有大寫的標籤     <p><code>git push --delete {tagName}</code></p><p>    例如：<code>git push --delete TestServer</code></p></li></ul></section><section><h2 id="WizKMOutline_1505664696184597">取名建議 - TL;DR</h2><p>  基本上對於取名，不管是repo、branch還是tag的時候，建議：   </p><dl><dt>     全部使用小寫    </dt><dd><p>    由於習慣寫.net code，因此很習慣會用Pascal Casing來取名，例如<code>UnReleased</code>。但是，由於repo、branch和tag都屬於url的一部分，而url理論上是<em><strong>會區分大小寫</strong></em>並且     <em>作業系統檔名是否區分大小寫處理也不同</em>（windows不區分，Linux會區分），因此為了抓下來不會有問題，建議全部使用小寫。因此應該使用<code>unreleased</code>。     </p><p>    可是如果字太長要區分怎麼辦？參考下面分割字符     </p><div class="bs-callout bs-callout-info">     關於url應該區分大小寫，可以參考W3的<a href="https://www.w3.org/TR/WD-html40-970708/htmlweb.html">HTML and URLS</a>裡面提到：<code>Users should always consider that URLs are case-sensitive</code> 。     </div></dd><dd></dd><dt>     使用<code>-</code>(aka 減號、dash)作為文字切割    </dt><dd><p>    如果名字太長想要切割的話，可以使用<code>-</code>來區別，例如：<code>my-name-is</code>。     </p><p>    有些會習慣使用<code>_</code>(下底線)。     </p><p>    使用<code>-</code>有幾個好處：     </p><ul><li>輸入<code>-</code>不用加<kbd>shift</kbd> - 比較好輸入      </li><li><code>-</code>在regex不屬於<code>word</code>而<code>_</code>屬於，因此用來切割符號比較明顯</li></ul><p>    當然有時候字太長了，所以會混合用。     </p></dd><dd></dd><dt>     用<code>/</code>(斜線)來分類branch和tag    </dt><dd>     如果有在用<code>git flow</code>應該會很習慣，主要是用<code>/</code>(斜線)在工具像小烏龜可以簡單找到相關內容。     <figure><a href="https://lh3.googleusercontent.com/-eLdSuF3fyIs/Wb6jCWdU0yI/AAAAAAAAWZ4/xlTw7d_97vAha2G90Yug3UH94u5aQ8NngCHMYCw/s1600-h/image%255B5%255D"><img width="435" height="226" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-09-18-git-naming-for-repo-tag-and-branch-best-practice_Asset/image_thumb[1](32).png" border="0" class="img-responsive"></a><figcaption>好區分範例 - 兩個feature，A和B</figcaption></figure></dd><dd></dd><dt>     tag使用<code>v</code>做前戳，搭配SemVar    </dt><dd>     舉例來說，<code>v1.0.1</code>。加<code>v</code>的好處是如果要列出和版號有關的tag，可以先打<code>v</code>然後在按下<kbd>tab</kbd></dd></dl><p>  當然，上面都只是<em><strong>建議</strong></em>，沒有對錯，只是習慣或者避免一些小問題。   </p><p>  上面有些建議裡面已經有包含說明，如果對於一開始提到的問題發生原因有興趣的話，繼續往下看.....   </p></section><section><h2 id="WizKMOutline_1505664696185747">重現問題</h2><p>  首先我們先來重現一下問題（這個重現方式和我實際發生的情境有點不同，因為我的情境需要兩個帳號交叉才看得到，不過local可以用以下方式重現，問題點是一樣）。   </p><div class="bs-callout bs-callout-default">   相關repo請看：<a href="https://github.com/alantsai-samples/git-naming-problem">alantsai-samples/git-naming-problem</a></div><p>  接下來，我們要：   </p><ol><li>建立一個repo</li><li>先打一個UnReleased的標籤</li><li>push到remote</li><li>修改在打一個unreleased的標籤</li><li>push到remote</li><li>檢查</li></ol><section><h3 id="WizKMOutline_1505664696185503">建立一個repo</h3><p>   可以參考另外一篇<a href="http://blog.alantsai.net/2017/07/net-project-structure.html">該怎麼開專案的資料夾結構？每個專案應該要有的資料夾結構和檔案</a>的Powershell語法來建立一個repo：    </p><pre class="brush: powershell;"><code class="language-powershell line-numbers">git clone https://github.com/alantsai/mhat-common-boilerplate-repo.git
cd mhat-common-boilerplate-repo
rm .git -Recurse -Force
git init
git add -A
git commit -m "init project"</code></pre><p>   這個時候，我們修改其中一些檔案。    </p></section><section><h3 id="WizKMOutline_1505664696185379">先打一個UnReleased的標籤</h3><p>   做完修改commit之後我們打一個<code>UnReleased</code>的tag    </p><figure><a href="https://lh3.googleusercontent.com/-dAU07Fd1NSY/Wb6jENWHJYI/AAAAAAAAWaA/RyiHCts_tgsbohaTJDMv08ZnFs6DaPchACHMYCw/s1600-h/image%255B8%255D"><img width="654" height="78" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-09-18-git-naming-for-repo-tag-and-branch-best-practice_Asset/image_thumb[2](26).png" border="0" class="img-responsive"></a><br><figcaption>打UnReleased的tag</figcaption></figure></section><section><h3 id="WizKMOutline_1505664696185176">push到remote</h3><a href="https://lh3.googleusercontent.com/-jGI-jIizi5k/Wb6jGVh9avI/AAAAAAAAWaI/w4aGf-rxORcMR0xMwOUWyXGV9bCC0nWIwCHMYCw/s1600-h/image%255B11%255D"><img width="654" height="144" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-09-18-git-naming-for-repo-tag-and-branch-best-practice_Asset/image_thumb[3](23).png" border="0" class="img-responsive"></a><a href="https://lh3.googleusercontent.com/-t0RvhDFP2t8/Wb6jJZA0_FI/AAAAAAAAWaQ/q5taHwUORUUNBnX0g-64W3x06hyZNF9dQCHMYCw/s1600-h/image%255B14%255D"><img width="503" height="409" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-09-18-git-naming-for-repo-tag-and-branch-best-practice_Asset/image_thumb[4](22).png" border="0" class="img-responsive"></a><figure><figcaption>push成功之後可以在github上面看到確認有上去</figcaption></figure></section><section><h3 id="WizKMOutline_1505664696185137">在修改之後打一個unreleased的標籤</h3><p>   注意這邊的大小寫應該是都小寫的<code>unreleased</code>。    </p><figure><a href="https://lh3.googleusercontent.com/-5zt0gD124KY/Wb6jOUdOldI/AAAAAAAAWaY/U7aun8l1IG0Tq7OCxYHbFiBIxkSxgnzAgCHMYCw/s1600-h/image%255B17%255D"><img width="654" height="221" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-09-18-git-naming-for-repo-tag-and-branch-best-practice_Asset/image_thumb[5](16).png" border="0" class="img-responsive"></a><br><figcaption>打一個unreleased的標籤</figcaption></figure></section><section><h3 id="WizKMOutline_1505664696185858">檢查</h3><p>   發現到，在本機只剩下全小寫的那個<code>unreleased</code>的標籤，有大寫的不見了，但是在remote，<em><strong>大小寫兩個標籤都在</strong></em>。    </p><a href="https://lh3.googleusercontent.com/-Hg0iWyWtFjI/Wb6jRw-g59I/AAAAAAAAWag/9of8XbGZ6jkoA9D_OVjWcTj3rP2I-NkLwCHMYCw/s1600-h/image%255B20%255D"><img width="654" height="196" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-09-18-git-naming-for-repo-tag-and-branch-best-practice_Asset/image_thumb[6](13).png" border="0" class="img-responsive"></a><figure><a href="https://lh3.googleusercontent.com/-IbMOzBig35g/Wb6jUG5c2NI/AAAAAAAAWao/guAwGXFpeYobw_slnfwBowJhcCFFHzKrwCHMYCw/s1600-h/image%255B23%255D"><img width="571" height="696" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-09-18-git-naming-for-repo-tag-and-branch-best-practice_Asset/image_thumb[7](9).png" border="0" class="img-responsive"></a><br><figcaption>local和remote比對</figcaption></figure><div class="bs-callout bs-callout-warning">    如果是從remote clone下來不會看到一樣的情況，這個下面會在做說明。    </div></section></section><section><h2 id="WizKMOutline_1505664696185312">了解為什麼local變成一個而remote還是兩個</h2><p>  要了解這個發生的原因我們需要兩個前置的訊息：   </p><ol><li>git tag是怎麼儲存</li><li>作業系統對待檔名大小寫的不同</li></ol><section><h3 id="WizKMOutline_1505664696185376">git tag是怎麼儲存</h3><p>   git的資訊其實是存在<code>.git\refs\tags</code>裡面（好吧，這個說法其實不太精準，以下會在說明），以我這邊為例，可以看到有一個叫做<code>unreleased</code>的檔案，這個檔案的內容其實存的是一個hash值指向tag的位置。    </p><figure><a href="https://lh3.googleusercontent.com/-L6I0muE44cQ/Wb6jWwILczI/AAAAAAAAWaw/SDh1RLNWctMsEMxliqXzgnEbn9pTjkV8wCHMYCw/s1600-h/image%255B26%255D"><img width="654" height="258" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-09-18-git-naming-for-repo-tag-and-branch-best-practice_Asset/image_thumb[8](10).png" border="0" class="img-responsive"></a><br><figcaption>tag如何儲存 - 看到在tags資料夾檔案裡面就是一個hash</figcaption></figure><p>   了解這個之後搭配下面的資訊我們就知道為什麼了。    </p></section><section><h3 id="WizKMOutline_1505664696185578">作業系統對待檔名大小寫的不同</h3><p>   Windows和Linux在處理很多事情上面其實不太一樣，這裡面有一個不同之處在於如何對待檔名大小寫：    </p><ul><li>Windows<em><strong>不區分</strong></em>大小寫</li><li>Linux<em><strong>區分</strong></em>大小寫</li></ul><p>   什麼意思呢？舉例來說，如果我有兩個檔案，一個叫做<code>UnReleased</code>另外一個叫做<code>released</code>：    </p><ul><li>在Windows，兩個檔案會互蓋，換句話說，在同一個資料夾，這兩個檔案只能<em>留1個</em></li><li>在Linux，因為區分大小寫，因此在同一個資料夾兩個檔案可以<em>共存</em>，換句話說不會互蓋</li></ul></section><p>   搭配上面的資訊，為什麼變成一個的原因就浮出水面了，當第一個tag建立的時候，會有個檔案叫做<code>UnReleased</code>出現，當第二個tag <code>unreleased</code>出現的時候，因為Windows不區分大小寫，直接就把    <code>UnReleased</code>蓋掉了，因此local變成<em>只有一個</em>。    </p><p>   那remote為什麼還是兩個呢？因為我們push上去的地方時github，那github host在linux（應該是啦，這個我沒找到Reference，所以說錯和我說一下，不過大部分的host應該都是liunx），而linux <em>區分</em>大小寫，所以保留了下來。    </p><div class="bs-callout bs-callout-warning"><h4 id="WizKMOutline_1505664696185673">例外情況</h4><p>   假設從sample repo clone程式碼下來，會發現兩個tag都存在阿，沒有所謂互蓋的情況啊，這是為什麼呢？    </p><figure>&nbsp;&nbsp;&nbsp;&nbsp; <a href="https://lh3.googleusercontent.com/-De7Rh_xByVw/Wb6ja6MYRNI/AAAAAAAAWa4/zTx8riIaDRwTnKcdV3S_TOGmFvoPa3gOwCHMYCw/s1600-h/TortoiseGitProc_2017-09-18_00-13-05%255B2%255D"><img width="654" height="174" title="TortoiseGitProc_2017-09-18_00-13-05" style="display: inline; background-image: none;" alt="TortoiseGitProc_2017-09-18_00-13-05" src="/posts/migrate/2017-09-18-git-naming-for-repo-tag-and-branch-best-practice_Asset/TortoiseGitProc_2017-09-18_00-13-05_thumb.png" border="0" class="img-responsive"></a>     <figcaption>clone下來的兩個tag都有看到</figcaption></figure><p>   這個原因是因為，其實tag還有可能存在另外一個地方，那個地方是<code>.git\packed-refs</code>，這個檔案主要是為了如果<code>refs</code>很多，速度會比較慢，所以會把一些<code>refs</code>放到<code>packed-refs</code>    裡面好讓讀取的時候速度比較快。    </p><p>   當clone下來的git tag資訊是存在那個裡面，所以不會有檔名問題，因此兩個tag都出現了，不過如果開始建立tag可以重現上述的問題。    </p></div></section><section><h2 id="WizKMOutline_1505664696185732">結語</h2><p>  其實這一篇混雜了兩個主題：   </p><ul><li>建議的naming方式</li><li>如何解決因為naming問題導致出現兩個標籤的問題</li></ul><p>  由於兩個主題有相關因此寫在了一起，算是為了建議naming的一個use case範例。   </p><p>  不過就像上面說的，這邊的是<em>建議</em>而不是<em>一定要</em>這麼做 - 也是結合了網路上大家的建議，當然大家有不同的想法，因此不一定都認同，也希望提出不同意見讓整個資訊更加豐富。   </p><p>  在追蹤問題的時候，會發現其實需要一些git和OS之間差異的資訊才有辦法發現實際的問題 - 告訴我們 學無止境阿.....   </p></section><section><h2 id="WizKMOutline_1505664696185651">參考資料</h2><dl><dt>     網路上建議的取名方式    </dt><dd><ul><li><a href="https://stackoverflow.com/questions/11947587/is-there-a-naming-convention-for-git-repositories">Is there a naming convention for git repositories?</a></li><li><a href="https://stackoverflow.com/questions/19077110/is-it-suggested-to-have-git-repository-names-in-upper-or-camel-case-instead-of-l">Is it suggested to have Git repository names in upper or camel case instead of lower case?</a></li></ul></dd><dd></dd><dt>     Tag命名的建議    </dt><dd><a href="https://stackoverflow.com/questions/2006265/is-there-a-standard-naming-convention-for-git-tags">Is there a standard naming convention for git tags? [closed]</a></dd><dd></dd><dt>     pack-refs - 官方介紹作用    </dt><dd><a href="https://git-scm.com/docs/git-pack-refs">git-pack-refs</a></dd><dd></dd></dl></section> <section> <div class="wlWriterEditableSmartContent" id="scid:77ECF5F8-D252-44F5-B4EB-D463C5396A79:66a22c75-0b7a-4f56-80a8-76a9388312d2" style="margin: 0px; padding: 0px; float: none; display: inline;">標籤: <a href="/tags/Git" rel="tag">Git</a>,<a href="/tags/FAQ" rel="tag">FAQ</a>,<a href="/tags/best+practices" rel="tag">best practices</a></div></section>