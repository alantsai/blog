Title: "[從.Net工程師的角度來看DevOps 26]Package階段介紹"
Published: 2018-02-10
Modified: 2018-02-10
Image: /posts/migrate/2018-02-10-devopsSeries-26-package-stage-intro_Asset/image_thumb(78).png
Tags: [".net","nuget","「ithome 第八屆鐵人賽」","devops","「從.net工程師的角度來看devops」"]
RedirectFrom: 2018/02/devopsSeries-26-package-stage-intro.html
Series: ["「iThome 第八屆鐵人賽」","「從.Net工程師的角度來看DevOps」"]
---
<section><figure><a href="https://lh3.googleusercontent.com/-tnqvDx0S9zA/Wn8GLvEs4rI/AAAAAAAAXoo/4zR5qLPEF8EWGuXhaG1tTGJjM07XLjGzwCHMYCw/s1600-h/image%255B2%255D"><img width="654" height="290" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2018-02-10-devopsSeries-26-package-stage-intro_Asset/image_thumb(78).png" border="0" class="img-responsive"></a><br><figcaption>圖片來源：https://pixabay.com/en/books-spine-colors-pastel-1099067/ 和 https://blog.xebialabs.com/2016/03/21/essential-devops-terms/</figcaption><br></figure></section><section><p>在上一篇(<a href="http://blog.alantsai.net/2017/12/devopsSeries-intro-to-free-ci-service-visual-studio-team-services.html">[25]在Visual Studio Team Services執行Build Script和CI Server總結</a>)介紹完了VSTS的build建制之後，基本上build階段算是告一個段落了。</p><p>到目前為止，我們的build script不管是在CI Server那一端，還是在local端都能夠執行一樣的build script來產生出能夠執行的內容。     </p><p>接下來就要進入另外一個階段，也就是怎麼把產生出的內容<em><strong>打包</strong></em>成為適合發佈用的階段，也就是：<em><strong>package</strong></em>。     </p><p>這篇將會對於package階段的內容做個基本介紹。     </p></section>     <section> <a name="KMContentPageTopID" id="KMContentPageTopID"></a><div id="divKMOutline" style="border-style: groove none; margin: 10px 0px;"><ul style="margin: 0px 0px 0px 20px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518273685038342" ;="">Package階段在做什麼</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518273685038258" ;="">常見的Package格式</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518273685038336" ;="">壓縮檔 - zip</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518273685038590" ;="">nuget</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518273685038179" ;="">Web - web deploy package</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518273685038706" ;="">DB - dacpac</a><br></li></ul><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518273685038346" ;="">版號的重要性</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1518273685038577" ;="">結語</a><br></li></ul></div></section>       <a name="more"></a>       <section><h2 id="WizKMOutline_1518273685038342">Package階段在做什麼</h2><p>還記得在一開始(<a href="http://blog.alantsai.net/2016/12/devopsSeries-whatIsDevops.html">[02]什麼是DevOps？</a>)介紹CI和CD的整個大框架的時候，有個部分叫做Package - 專門用來在Continus Delivery階段的時候執行：</p><figure><a href="https://lh3.googleusercontent.com/-MjOuYg5ORzw/Wn8GOKEWwOI/AAAAAAAAXow/DrEmHq_oiHE_FWegz2-o58Vx3o1QV6nBACHMYCw/s1600-h/image%255B5%255D"><img width="421" height="407" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2018-02-10-devopsSeries-26-package-stage-intro_Asset/image_thumb[1](66).png" border="0" class="img-responsive"></a><br><figcaption>Package階段</figcaption></figure><p>那package實際上是在做什麼事情呢？其實想一下，當我們把程式碼編譯了之後一般來說會做什麼？     </p><p>是不是會把編譯過的內容更新到機器上面？那要更新過去會遇到一個問題，就是怎麼 <em><strong>打包</strong></em> 讓攜帶過去更新的時候更加的方便。     </p><p>既然提到了打包，那麼和直覺的下一個問題就是，打包成為什麼<em><strong>格式</strong></em>。     </p></section><section><h2 id="WizKMOutline_1518273685038258">常見的Package格式</h2><p>一般來說在.Net的世界裡面有幾種類型的格式：         </p><ol><li>壓縮檔 - 例如 zip</li><li>nuget - 共用library</li><li>web在用 - web deploy的package</li><li>DB - dacpac</li></ol><section><h3 id="WizKMOutline_1518273685038336">壓縮檔 - zip</h3><p>一般來說會把編譯過的內容打包成為zip只有一個目的，就是copy過去的時候更<em>快速和方便</em>。由於通用性很好，因此大部分的package本質上             都是zip。         </p><p>不管什麼類型的專案和檔案，也不管目標是什麼版本的windows，基本上把zip帶過去解壓縮就可以用了。因此zip是最常見的一種package方式。         </p><p>這種類型偏向於是要把程式<em>更版</em>或者提供給他人能夠<em>直接使用</em>。</p></section><section><h3 id="WizKMOutline_1518273685038590">nuget</h3><p>如果今天開發的是一個<em>library</em>或者說是用來<em>輔助開發</em>使用的內容，那麼包成nuget是最適合的package。         </p><p>nuget本質上也是zip，不過和zip不同之處在於他有<em>一些meta資訊</em>，可以提供一些像是package內容<em>說明和版號</em>等資訊。         </p><p>如果是公開的library，那麼可以放到Microsoft提供的nuget server，或者可以自己架設內部的nuget server。         </p><p>關於如何建立nuget package，可以參考我部落格裡面和<em>nuget</em>標籤有關的內容：<a href="/tags/nuget">直接連接</a></p><p><iframe src="//www.slideshare.net/slideshow/embed_code/key/kPw3WVpnJv2frE" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen=""> </iframe> </p><div style="margin-bottom:5px"><strong> <a href="//www.slideshare.net/alantsai2007/nuget-package" title="Nuget介紹- 如何使用和建立自己的package" target="_blank">Nuget介紹- 如何使用和建立自己的package</a> </strong> from <strong><a href="https://www.slideshare.net/alantsai2007" target="_blank">Alan Tsai</a></strong> </div></section><section><h3 id="WizKMOutline_1518273685038179">Web - web deploy package</h3><p>如果今天要更新的內容是<em><strong>網站類型</strong></em>的內容（例如Asp.Net網站）要更新到<em><strong>IIS</strong></em>，那麼             web deploy package是一個很適合的格式。         </p><p>Web deploy package本質上也是zip，不過裡面有一些額外資訊可以讓IIS裡面的Web Deploy讀懂，讓更新的時候做到<em><strong>差異更新</strong></em>。         </p></section><section><h3 id="WizKMOutline_1518273685038706">DB - dacpac</h3><p>如果今天是要更新db schema的部分，那麼dacpac是很適合的格式。         </p><p>dacpac本質上也是zip，不過裡面記錄了一些資訊，然後工具執行更新的時候，知道需要<em><strong>異動</strong></em>那些schema。         </p><p>從某種程度來說，dacpac就是同等於web deploy package在IIS裡面的地位。         </p><div class="bs-callout bs-callout-info">雖然DB很重要，但是在這個系列不會介紹到dacpac的建立         </div></section></section><section><h2 id="WizKMOutline_1518273685038346">版號的重要性</h2><p>了解了不同類型的package格式了之後，下一個問題就是，在可以支援更新的那種package（也就是除了zip以外的所有package），是要怎麼知道到底有沒有更新呢？或者說怎麼知道要更新的內容和目前的內容之間的<em>差異</em>有多少呢？     </p><p>這就不得提到<em><strong>版號</strong></em>了。     </p><p>舉個簡單例子，今天裝了<em>Json.Net</em> 1 版的nuget，那麼如果2版出來的時候，因為版號的差異就可以知道屬於往上升的情況。     </p><p>因此版號的機制非常重要，好的版號機制能夠讓管理的人有個基本概念知道，<em><strong>更新的內容是否會有breaking change</strong></em>。     </p></section><section><h2 id="WizKMOutline_1518273685038577">結語</h2><p>在這篇介紹了package的兩個基本概念：         </p><ol><li>格式</li><li>版本</li></ol>基本上格式的部分了解差不多了，剩下只需要了解怎麼產生即可。     <p>不過版本的部分牽涉的內容更多，因此接下來的篇幅將會在更深入的介紹版本的基本概念，以及如何產生版號。     </p></section><section>     <div class="wlWriterEditableSmartContent" id="scid:77ECF5F8-D252-44F5-B4EB-D463C5396A79:1330a604-ac89-4184-ae8d-307ae198582e" style="margin: 0px; padding: 0px; float: none; display: inline;">標籤: <a href="/tags/%e3%80%8c%e5%be%9e.Net%e5%b7%a5%e7%a8%8b%e5%b8%ab%e7%9a%84%e8%a7%92%e5%ba%a6%e4%be%86%e7%9c%8bDevOps%e3%80%8d" rel="tag">「從.Net工程師的角度來看DevOps」</a>,<a href="/tags/%e3%80%8ciThome+%e7%ac%ac%e5%85%ab%e5%b1%86%e9%90%b5%e4%ba%ba%e8%b3%bd%e3%80%8d" rel="tag">「iThome 第八屆鐵人賽」</a>,<a href="/tags/devops" rel="tag">devops</a>,<a href="/tags/.net" rel="tag">.net</a>,<a href="/tags/nuget" rel="tag">nuget</a></div></section>