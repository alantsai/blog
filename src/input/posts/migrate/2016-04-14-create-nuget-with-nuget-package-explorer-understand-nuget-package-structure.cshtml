Title: "建立自己的Library - 使用Nuget Package Explorer (GUI) 建立nuget package (上篇) 介紹package結構"
Published: 2016-04-14
Modified: 2016-04-27
Image: /posts/migrate/2016-04-14-create-nuget-with-nuget-package-explorer-understand-nuget-package-structure_Asset/image_thumb(1).png
Tags: ["nuget"]
RedirectFrom: 2016/04/create-nuget-with-nuget-package-explorer-understand-nuget-package-structure.html
Series: []
---
<a id="KMContentPageTopID" name="KMContentPageTopID"></a> <div id="divKMOutline" style="border-top-style: groove; border-bottom-style: groove; border-right-style: none; margin: 10px 0px; border-left-style: none"> <ul style="margin: 0px 0px 0px 20px"> <li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1460646971338680" ;="">NuGet Package Explorer(NPE)</a><br> <ul style="margin: 0px 0px 0px 30px"> <ul> <li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1460646971339938" ;="">Nuget Package Explorer</a></li></ul></ul> </li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1460646971339453" ;="">用NPE看看一些package - 了解package內容的結構</a><br> <ul style="margin: 0px 0px 0px 30px"> <li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1460646971339606" ;="">lib 資料夾的作用</a> </li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1460646971339539" ;="">tools 資料夾的作用</a> </li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1460646971339319" ;="">content 資料夾的作用</a> </li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1460646971339834" ;="">build 資料夾</a></li></ul> </li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1460646971339705" ;="">用NPE看package的meta資訊</a><br> <ul style="margin: 0px 0px 0px 30px"> <li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1460646971339267" ;="">Id欄位</a> </li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1460646971339367" ;="">Version欄位</a><br> <ul style="margin: 0px 0px 0px 30px"> <li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1460646971340467" ;="">版本結構 Semantic Version 2.0</a></li></ul> </li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1460646971340322" ;="">Dependency 欄位</a></li></ul> </li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1460646971340858" ;="">結語</a><br></li></ul></div><section> <p>在上一篇 (<a href="http://blog.alantsai.net/2016/03/what-is-nuget-how-to-use-nuget-and-how-to-restore-properly.html" target="_blank" rel="noopener">何為nuget，該如何使用，和2.7版本之後建議的回覆nuget package(套件)的方式</a>) <span style="font-size: 14pt; line-height: 1.5">介紹如何使用nuget後，應該會發現要在專案裡面使用某個Library實在是很方便，同個Library在不同專案使用只要透過nuget安裝就搞定。</span></p> <p>作為開發者，相信大家都有一些小工具或者一些方法是常常被使用到的，而每次不同專案要使用，都需要<em>copy</em>整個程式碼實在很不方便，更別說如果哪天發現有bug ，要更新所有有用到的專案就更加困難和浪費時間。 </p> <p>如果可以把自己的小工具包成一個nuget就超級方便了，而且要更新程式碼也很容易，更棒的是要把nuget放到微軟的nuget.org網站上面是完全免費，不好好利用就太浪費這個服務了。 </p> <p>在這篇，將會介紹如何使用nuget package explorer來先了解package的結構，並且之後在用這些知識來建立自己package。 </p></section><a name="more"></a><section> <h2 id="WizKMOutline_1460646971338680">NuGet Package Explorer(NPE)</h2> <p>Nuget Package Explorer (之後會用縮寫NPE稱呼) 是一個 GUI工具可用來建立和看 <code>.nupkg</code> (nuget package的檔案Extension)的工具。 </p> <div class="bs-callout bs-callout-info"> <h4 id="WizKMOutline_1460646971339938">Nuget Package Explorer</h4> <ul> <li><strong>原始碼：</strong><a href="https://github.com/NuGetPackageExplorer/NuGetPackageExplorer">Github</a>  </li><li><strong>下載：</strong><a href="https://npe.codeplex.com/downloads/get/clickOnce/NuGetPackageExplorer.application">位置</a>  </li><li><strong>特色：</strong>可以打開和建立package，並且在看某個package的時候，可以直接點兩下打開檔案內容</li></ul></div> <p>在建立自己的nuget package之前，我們先來看一下別人的nuget package長什麼樣子，並且了解一些nuget package特殊資料夾的作用，這樣對於等一下建立package更有概念。 </p></section><section> <h2 id="WizKMOutline_1460646971339453">用NPE看看一些package - 了解package內容的結構</h2> <p>任何package的根目錄最多四個，分別是：<code>lib</code>、<code>tools</code>、<code>content</code>和<code>build</code>。 </p> <p>我們將透過看幾個package來了解4個資料夾不同之處。 </p> <p>把NPE執行起來之後，可以看到可以：打開本地的package、可以打開nuget上面的package、建立package和打開nuget documentation。 </p><figure><a href="https://lh3.googleusercontent.com/-_4Gko-mLR78/Vw-3przhOCI/AAAAAAAAUn8/ZaDw0O_rN4Y/s1600-h/image%25255B2%25255D.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="/posts/migrate/2016-04-14-create-nuget-with-nuget-package-explorer-understand-nuget-package-structure_Asset/image_thumb(1).png" width="644" height="333" class="img-responsive"></a><br><figcaption>NPE執行起來的畫面</figcaption></figure>  <p>在這次我麼將會打開線上nuget，看看這兩個package：<code>Newtonsoft.Json</code> 和 <code>Jquery</code> package。先從打開<code>Newtonsoft.Json</code>開始。 </p><figure></figure><figure> <p><a href="https://lh3.googleusercontent.com/-LslhW-_vvI4/Vw-3s9MWTBI/AAAAAAAAUoE/CLaFmN_SsRg/s1600-h/image%25255B5%25255D.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="/posts/migrate/2016-04-14-create-nuget-with-nuget-package-explorer-understand-nuget-package-structure_Asset/image_thumb[1](2).png" width="644" height="471" class="img-responsive"></a></p> <p><a href="https://lh3.googleusercontent.com/-rnqAGLwD1fg/Vw-30a4UmVI/AAAAAAAAUoM/VY9x8p31ung/s1600-h/image%25255B8%25255D.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="/posts/migrate/2016-04-14-create-nuget-with-nuget-package-explorer-understand-nuget-package-structure_Asset/image_thumb[2](1).png" width="644" height="260" class="img-responsive"></a><br></p><figcaption>打開Newtonsoft.Json Package</figcaption></figure><p></p> <p>我們會看到畫面有左右兩個視窗，其中左邊屬於package meta資訊(稍後介紹)，右邊則是package內容。這個部分是目前的重點。 </p> <p>我們可以看到 總共有兩個資料夾<code>lib</code>和<code>tools</code>。其中<code>lib</code>下面有不同的資料夾可以看出是.Net Framework版本 </p> <h3 id="WizKMOutline_1460646971339606">lib 資料夾的作用</h3> <p>lib在nuget裡面來說，放的都是會<em>被專案直接Reference的dll檔案</em>。 </p> <p>像我們nuget install進來一個package的時候，我們不需要手動Reference下載的Dll，而是nuget自動幫我們 Reference。nuget如何知道什麼是屬於要Reference的dll？ </p> <p>nuget會看lib下面的資料夾，找到符合目前專案的target 的 .net Framework dll去做Reference。由此，我們可以看到Newtonsoft.Json基本上支援所有.ent 專案，從.Net2.0到 portable library。 </p> <h3 id="WizKMOutline_1460646971339539">tools 資料夾的作用</h3> <p>tools資料夾主要作用是放一些powershell script 和工具類型的東西。有特殊的ps1檔案能夠在nuget <em>不同時間(例如剛安裝的時候，或者解除安裝的時候)被執行</em>。 </p> <p>舉例來說，Newtonsoft.Json 就有一個<code>tools\install.ps1</code>。這個install.ps1的內容會在<em>安裝</em>這個套件的時候被執行。 </p> <p>以Newtonsoft.Json來說，安裝完會直接打開Visual Studio 頁簽到Newtownsoft.Json的官網 - 這個邏輯完全是因為install.ps1裡面有這樣寫所以才執行。 </p> <div class="bs-callout bs-callout-info"> <p>package的檔案都可以點兩下打開看內容，甚至檔案內容還有語法高亮哦 </p><figure><a href="https://lh3.googleusercontent.com/-mAV9nGpiv-s/Vw-3396YiaI/AAAAAAAAUoU/4reZW29nljM/s1600-h/image%25255B11%25255D.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="/posts/migrate/2016-04-14-create-nuget-with-nuget-package-explorer-understand-nuget-package-structure_Asset/image_thumb[3](1).png" width="644" height="322" class="img-responsive"></a><br><figcaption>打開install.ps1</figcaption></figure></div> <h3 id="WizKMOutline_1460646971339319">content 資料夾的作用</h3> <p>content 放的內容就是要加到專案裡面的<em>檔案</em>。最好的例子就是一些javascript類型的package。 </p> <p>我們打開<code>Jquery</code>的package，我們會看到他沒有 lib 資料夾，裡面有的是 content。 </p><figure><a href="https://lh3.googleusercontent.com/-VH_2Y89QdV8/Vw-36W2X4eI/AAAAAAAAUoc/KZv-CE0QYKE/s1600-h/image%25255B14%25255D.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="/posts/migrate/2016-04-14-create-nuget-with-nuget-package-explorer-understand-nuget-package-structure_Asset/image_thumb[4](1).png" width="644" height="436" class="img-responsive"></a><br><figcaption>打開Jquery package的內容</figcaption></figure>  <p>content的概念是，content以下的資料夾就是<em>對應</em>到專案的<em>根目錄</em>。安裝這個package的時候，會自動把content下面的內容copy到專案更目錄。 </p> <p>以jquery套件來說，安裝之後，從根目錄會有一個資料夾<code>Scripts</code>被建立出來，然後4個js也被copy進去。 </p> <p>因此，content以下檔案和資料夾屬於<em>非dll</em>類型的檔案。 </p> <h3 id="WizKMOutline_1460646971339834">build 資料夾</h3> <p>其實還有一個特殊資料夾叫做build，主要作用是加 MSBuild 的target和property，為你的package加入所需要build時候所需要的特殊邏輯。 </p></section><section> <h2 id="WizKMOutline_1460646971339705">用NPE看package的meta資訊</h2> <p>在上面我們用了Newtonsoft.Json和JQuery的套件來了解了package內容的結構和每個內容的特殊之處，不過除了package本身的內容很重要之外，package本身的meta資訊也很重要，例如 package版本，專案網址等和重要資訊，這一段我們就看一下都有些什麼meta資訊。 </p> <p>這次我們打開<code>Asp .Net Mvc的Package</code>可以看到一些資訊，大部分看名稱就知道是什麼，不過有幾個有特殊的地方會分別介紹： </p><figure><figcaption><a href="https://lh3.googleusercontent.com/-YOfcKAp_UI8/Vw-4AdwEMWI/AAAAAAAAUok/wF71lzSYduI/s1600-h/image%25255B17%25255D.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="/posts/migrate/2016-04-14-create-nuget-with-nuget-package-explorer-understand-nuget-package-structure_Asset/image_thumb[5](1).png" width="644" height="376" class="img-responsive"></a><br></figcaption><figcaption>打開Asp .Net Mvc看到的內容</figcaption></figure>  <h3 id="WizKMOutline_1460646971339267">Id欄位</h3> <p>Id其實就是這個package的唯一名稱，也是在用Package Manager Console下指令的時候所輸入的那個package名稱。有些package的Id和顯示名稱 (Title) <em>是不一樣的</em>。 </p> <p>舉例我們之前看的Newtonsoft.Json是id，但是他的Title則是 Json.Net，而在安裝package的時候，UI顯示的是Title，但是Package Manager Console用的</p> <p>又是Id，因此兩者不一定要一致導致有時候會搞混。 </p> <h3 id="WizKMOutline_1460646971339367">Version欄位</h3> <p>version就是目前這個package對應的版本。其中有件事情要注意，當某個package發佈之後，<em>不能更新</em>同個版本的package，只能夠更新新的版本。 </p> <p>舉例，建立一個版本0.1.0然後發佈上去，你不能更新0.1.0的package內容，而是只能夠發佈新的版本來達到更新效果，而不能改之前已經發佈的內容。 </p> <h4 id="WizKMOutline_1460646971340467">版本結構 Semantic Version 2.0</h4> <p>基本上nuget是遵從Semantic version 2.0(<a href="http://semver.org/">完整規範</a>)的方式來定義版本，其中定義了版本格式為 <code>Major.Minor.Patch</code></p> <ul> <li>Major - 當更新回影響現有api導致使用方式不同的時候，這個數字會變動  </li><li>Minor - 當有增加新的api/功能，但是不影響目前使用，這個數字會變動  </li><li>Patch - 屬於不會變動api的bug fix</li></ul> <p>版本還可以定義為Pre-relase的package，就是在Patch後面加上<code>-</code>就可以 - 以Asp .Net mvc Package來看，6.0還在Pre-Release </p> <h3 id="WizKMOutline_1460646971340322">Dependency 欄位</h3> <p>nuget package的好處之一是幫忙處理package之間的dependency。在這個欄位定義這個package會用到哪些其他nuget package和使用哪些<em>版本</em>。 </p> <p>如果Dependency欄位在往下一點，可以看到 Framework Assembly Reference，這些是說明那些.Net Framework的library會用到。 </p></section><section> <h2 id="WizKMOutline_1460646971340858">結語</h2> <p>在這篇介紹了NPE這個工具，並且介紹了package的結構。有了對於package的結構的基本知識，在下一篇，將會用這個知識搭配NPE來建立新的package。 </p></section>