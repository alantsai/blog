Title: "[git]為什麼常出現有修改但是比對不卻顯示不出差異？談談檔案斷行問題和如何達到不同平台正確一致化"
Published: 2017-07-02
Modified: 2017-08-22
Image: /posts/migrate/2017-07-02-git-normalize-line-ending_Asset/image_thumb(19).png
Tags: ["faq","git"]
RedirectFrom: 2017/07/git-normalize-line-ending.html
Series: []
---
用git之後，有時候遇到在檢查狀態的時候明明<em>顯示有修改</em>，但是實際比對的時候發現完全<em>沒有差異</em>。<p>通常來說發生這種情況就是檔案的<em>斷行跑掉了</em>，如果沒有好好解決到時候log會常常出現修改，但是實際上並不是真的修改，未來查找log很辛苦。</p><p>在這篇將會對於如何一勞永逸處理掉這個斷行問題做個說明。</p><section>             <a name="KMContentPageTopID" id="KMContentPageTopID"></a><div id="divKMOutline" style="border-style: groove none; margin: 10px 0px;"><ul style="margin: 0px 0px 0px 20px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498993868881444" ;="">問題描述</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498993868881120" ;="">解決方式</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498993868882389" ;="">設定</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498993868882392" ;="">一致化</a><br></li></ul><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498993868882738" ;="">問題發生的原因</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498993868882548" ;="">git 如何處理這個問題 - 自動轉換的時間點</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498993868882994" ;="">git 斷行自動轉換相關設定</a><br></li><ul style="margin: 0px 0px 0px 30px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498993868882552" ;="">git config core.autocrlf</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498993868882434" ;="">.gitattributes</a><br></li></ul><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498993868882386" ;="">結語</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1498993868882817" ;="">參考資料</a><br></li></ul></div></section>         <a name="more"></a>          <section><h2 id="WizKMOutline_1498993868881444">問題描述</h2><p>            有時候檢查檔案狀態，發現有變更，但是實際比對會發現其實什麼變更都沒有：         </p><figure><a href="https://lh3.googleusercontent.com/-JakOT29vhzw/WVjVqAiOQlI/AAAAAAAAV4Y/QSi05ioPgDka1iAVZuJY_SiWOXubwvXgQCHMYCw/s1600-h/image%255B2%255D"><img width="654" height="351" title="log有修改，但是比對發現沒有任何差異" style="display: inline; background-image: none;" alt="log有修改，但是比對發現沒有任何差異" src="/posts/migrate/2017-07-02-git-normalize-line-ending_Asset/image_thumb(19).png" border="0" class="img-responsive"></a><br><figcaption>log有修改，但是比對發現沒有任何差異</figcaption></figure><p>            當然，如果各位有在每次commit的時候認真比對的話，那麼一定不會把這個加到commit裡面，但是有時候如果漏看的話，不小心把這個commit上去，             只會造成未來在看的時候有更多雜訊，浪費時間。         </p></section><section><h2 id="WizKMOutline_1498993868881120">解決方式</h2><p>            首先要設定好讓git自動做斷行處理，再來如果專案裡面以前沒有設定過，很有可能斷行已經亂掉，這時候做一個一致化（Normalize line ending）的動作。         </p><section><h3 id="WizKMOutline_1498993868882389">設定</h3><p>            要一次解決這個問題，可以透過兩個設定：         </p><dl class="border-around"><dt>                 git config --global core.autocrlf             </dt><dd><ol><li><p>                            如果是windows設定為<code>true</code></p><p><code>git config --global core.autocrlf true</code> </p></li><li><p>                            如果是Unix系列設定為 <code>input</code></p><p><code>git config --global core.autocrlf input</code></p></li></ol></dd><dt>                 為專案加入 <code>.gitattributes</code>檔案             </dt><dd><p>檔案裡面要加入 <code>* text=auto</code></p><p>更多gitattribute關於斷行的設定可以參考這個github repo                      <a href="https://github.com/alexkaratarakis/gitattributes">一些不同語言的gitattributes範本</a></p><p>                    或者可以看我自己每一個專案都會放的gitattribute檔案：<a href="https://github.com/alantsai/mhat-common-boilerplate-repo/blob/master/.gitattributes">我的gitattribute</a></p></dd></dl></section><section><h3 id="WizKMOutline_1498993868882392">一致化</h3><p>                做好了以上設定，要把現行的斷行一致化就變得很簡單，只需要：             </p><dl><dt>                     假設有任何修改尚未commit，先commit                 </dt><dd><code>git commit -am "儲存目前修改"</code></dd><dt>                         把所有檔案刪掉（不包含.git）                 </dt><dd><code>                            git rm --cached -r .                         </code></dd><dt>                         重新從repo把刪除的修改revert掉                 </dt><dd><code>git reset .</code></dd><dt>                     加入index                 </dt><dd><code>git add -u</code> - 如果有看到很多warning提示會從crlf轉成lf是正常的。                 </dd><dt>                     commit上去                 </dt><dd><code>git commit -m "斷行一致化處理"</code></dd></dl></section><p>            如果對於這兩個設定的目的和用途為何，請繼續往下看。         </p></section><section><h2 id="WizKMOutline_1498993868882738">問題發生的原因</h2><p>            Windows 和 Unix（包含Linux和mac）代表斷行的字符是不一樣的。         </p><dl><dt>Windows</dt><dd><code>crlf</code> - 兩個字符代表斷行</dd><dt>Unix</dt><dd><code>lf</code> - 字符代表斷行</dd></dl><p>            還記得git是版控<em>檔案內容</em>，所以假設本來是<code>crlf</code>，如果被改成了<code>lf</code>那麼對於git來說就是一個修改。         </p><p>            但是因為斷行字符是<em>看不到的內容</em>，所以有些比對工具不會顯示出任何差異，造成混亂。         </p><p>            而本質上這些不應該算是修改，而是因為作業系統不同而導致的問題，所以git本身有考慮進去怎麼處理。         </p><p>            要解決這個問題其實很簡單，假設不管哪個作業系統都是<em><strong>用一樣的斷行作為儲存</strong></em>，那麼就不會有因為斷行不一樣的原因出現修改。         </p><p>           假設一開始沒有設定好，那麼很有可能有些檔案存成lf有些存成crlf，這個時候就需要做斷行一致化的動作（normalize line ending）         </p></section><section><h2 id="WizKMOutline_1498993868882548">git 如何處理這個問題 - 自動轉換的時間點</h2><p>            在git裡面，其實內建的時候就有考慮到這個事情，所以他有允許做自動轉換。         </p><p>            這個自動轉換發生在兩個時間點：             </p><dl><dt>當把檔案<em>寫到</em>repo的時候</dt><dd>發生的時間點如：<code>git add</code>、<code>git commit</code></dd><dt>當把檔案從repo<em>讀出</em>來的時候</dt><dd>發生的時間點如：<code>git checkout</code></dd></dl><p>            所以我們可以透過設定告訴git在這兩個時間點的時候，應該要怎麼轉換。         </p></section><section><h2 id="WizKMOutline_1498993868882994">git 斷行自動轉換相關設定</h2><p>            在git裡面有兩個設定是告訴git如何做這個斷行轉換：         </p><ol><li>git config 的 <code>core.autocrlf</code></li><li><code>.gitattributes</code>設定</li></ol><p>            這邊git config的設定對所有專案都有作用，但是只能夠對<em>自己有起作用</em>，換句話說如果在團隊裡面，有些人的電腦沒有設定好             那麼只靠這個設定是不夠的，因為很有可能就是有個別的電腦設定有問題導致斷行錯亂。         </p><p>            因此，<code>.gitattributes</code>的作用就出來了，這個是能夠<em>跟著專案走</em>的斷行處理設定，設定了就不用擔心有個別電腦沒有設定             <code>core.autocrlf</code>的問題。         </p><section><h3 id="WizKMOutline_1498993868882552">git config core.autocrlf</h3><p>                這個其實就是在設定讀和寫的時候自動轉換斷行的處理，總共有三個設定：             </p><ul><li>auto</li><li>input</li><li>false</li></ul><p>這三個設定分別為：</p><table class="table"><tbody><tr><td></td><th><em>讀</em>的時候轉換</th><th><em>寫</em>的時候轉換</th><th>建議</th></tr><tr><th>auto</th><td>lf 轉 crlf </td><td>crlf 轉 lf</td><td>Windows作業系統使用</td></tr><tr><th>input</th><td>不轉換</td><td>crlf 轉 lf</td><td>Unix作業系統使用</td></tr><tr><th>false</th><td>不轉換</td><td>不轉換</td><td>不建議使用</td></tr></tbody></table></section><section><h3 id="WizKMOutline_1498993868882434">.gitattributes</h3><p>這個檔案放在同<code>.git</code>資料夾層級，裡面可以設定一些檔案屬性，其中一個就是轉換的部分</p><p>                一個範例檔案可能長成如下：   </p><pre class="brush: csharp;"><code class="language-csharp line-numbers">  * text=auto
  *.md text
  *.csproj text eol=crlf</code></pre><p>                自動轉換的設定是<code>* text=auto</code> - 這個意思是只要是<em>text類型的檔案git會自動轉換</em>（類似於core.autocrlf但是更加智能）。             </p><p>                這個時候可能會好奇，到底哪些是屬於text檔案？git會自動判斷，不過也可以透過設定強制告訴git，例如：<code>*.md text</code>就是說md結尾的都是                 屬於text類型 - 換句話說就是會做轉換斷行的處理。             </p><p>                也有可能有些檔案要保持某一個斷行，例如<code>*.csrpoj</code>（C# 專案檔案，要保持crlf），這個時候也可以透過設定：<code>*.csproj     text eol=crlf</code></p><p>                如果想參考一些不同檔案的設定，可以參考這個repo：                 <a href="https://github.com/alexkaratarakis/gitattributes">一些不同語言的gitattributes範本</a></p><p>                我自己也有一個常用的設定，也可以參考一下：<a href="https://github.com/alantsai/mhat-common-boilerplate-repo/blob/master/.gitattributes">我的gitattribute</a></p><div class="bs-callout bs-callout-warning">      要注意一下，假設今天你不是使用指令的方式在執行git - 那麼有些gui其實不一定會吃.gitattributes的設定（有些ide的git套件不會吃這個設定 - 不確定是否目前還是如此，不過曾經有過像egit不吃這個設定）   所以最好還是要搭配git config的設定。      </div></section></section><section><h2 id="WizKMOutline_1498993868882386">結語</h2><p>斷行的部分其實還有幾個相關設定，不過那些設定基本上不會碰到，因此我就沒有提。</p><p>希望透過這篇也讓大家了解到斷行在不同作業系統會帶來的問題，並且怎麼樣能夠一勞永逸的解決。</p><p>gitattributes其實還有別的進階用途，未來有機會在和大家介紹</p></section><section><h2 id="WizKMOutline_1498993868882817">參考資料</h2><dl><dt><a href="http://adaptivepatchwork.com/2012/03/01/mind-the-end-of-your-line/">Mind the End of Your Line(英文)</a></dt><dd>一篇很詳細介紹關於斷行問題的文章</dd><dt><a href="http://schacon.github.io/git/gitattributes.html">gitattributes的官方說明(英文)</a></dt><dd>介紹整個gitattributes的其他應用</dd><dt><a href="https://help.github.com/articles/dealing-with-line-endings/">github介紹一致化斷行的處理(英文)</a></dt></dl></section>  <section> <div class="wlWriterEditableSmartContent" id="scid:77ECF5F8-D252-44F5-B4EB-D463C5396A79:9543e484-8b1d-4c43-91f3-552feb849c04" style="margin: 0px; padding: 0px; float: none; display: inline;">標籤: <a href="/tags/Git" rel="tag">Git</a></div></section>