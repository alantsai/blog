Title: "[git]重新命名檔案的方式和如何在log檢查到改檔名前的歷史記錄"
Published: 2017-06-18
Modified: 2017-06-18
Image: /posts/migrate/2017-06-18-git-properly-rename-file-show-rename-log_Asset/image_thumb[1](16).png
Tags: ["git"]
RedirectFrom: 2017/06/git-properly-rename-file-show-rename-log.html
Series: []
---
<section> <p style="display: none">how to properly rename in git and show the log of previous rename</p> <p>當持續在改檔案內容，容易發生當初為這個檔案取的名字已經不適合描述目前內容的情況，所以會對檔案名稱做修改。 </p> <p>最好的例子就是重構，當重構的時候很容易發生class名稱變換，這個時候會一起調整class的檔案檔名避免未來不好找。 </p> <p>不過當有天需要追蹤那個檔案的變更歷史的時候，會突然發現，只有 <strong><em>從新檔名那段開始有記錄，而舊檔名的記錄則看不到</em></strong>。這個對於從svn轉過來的使用者來說是無法理解的。 </p> <p>在這篇將會針對這個常見的問題來談到解決的方式和為什麼git會是這樣運作。 </p><figure><a href="https://lh3.googleusercontent.com/-0sMohXK6dQ4/WUZzzt2JpZI/AAAAAAAAVzQ/hiCIoNlcvEAxQbDmTSIeA6bvDJUcqAPMgCHMYCw/s1600-h/image%255B3%255D"><img title="rename以前的log不見了" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="rename以前的log不見了" src="/posts/migrate/2017-06-18-git-properly-rename-file-show-rename-log_Asset/image_thumb[1](16).png" width="654" height="244" class="img-responsive"></a><br><figcaption>rename以前的log不見了</figcaption></figure></section>  <div id="divKMOutline" style="border-top-style: groove; border-left-style: none; border-bottom-style: groove; border-right-style: none; margin: 10px 0px"> <ul style="margin: 0px 0px 0px 20px"> <li><a style="font-size: 15px; line-height: 1.6" href="#WizKMOutline_1497788288022805" ;="">問題重現</a><br> </li><li><a style="font-size: 15px; line-height: 1.6" href="#WizKMOutline_1497788288023506" ;="">解決方式</a>  <ul style="margin: 0px 0px 0px 30px"> <li><a style="font-size: 15px; line-height: 1.6" href="#WizKMOutline_1497788288023559" ;="">指令的方式</a><br> </li><li><a style="font-size: 15px; line-height: 1.6" href="#WizKMOutline_1497788288023932" ;="">TortoiseGit log 啟用方式</a>  <ul style="margin: 0px 0px 0px 30px"> <li><a style="font-size: 15px; line-height: 1.6" href="#WizKMOutline_1497788288023898" ;="">TortoiseGit blame啟用方式</a> </li></ul> </li><li><a style="font-size: 15px; line-height: 1.6" href="#WizKMOutline_1497788288023181" ;="">SourceTree log 啟用方式</a><br></li></ul> </li><li><a style="font-size: 15px; line-height: 1.6" href="#WizKMOutline_1497788288023430" ;="">發生原因 - git如何處理檔名變更</a>  <ul style="margin: 0px 0px 0px 30px"> <ul style="margin: 0px 0px 0px 30px"> <li><a style="font-size: 15px; line-height: 1.6" href="#WizKMOutline_1497788288023158" ;="">這個時候有些gui就容易誤導使用者</a> </li></ul></ul> </li><li><a style="font-size: 15px; line-height: 1.6" href="#WizKMOutline_1497788288023478" ;="">在git裡面重新命名怎麼做才正確</a>  <ul style="margin: 0px 0px 0px 30px"> <li><a style="font-size: 15px; line-height: 1.6" href="#WizKMOutline_1497788288023284" ;="">有沒有必要呼叫 git mv</a><br> </li><li><a style="font-size: 15px; line-height: 1.6" href="#WizKMOutline_1497788288023734" ;="">當檔案內容和檔案名稱都有修改的情況下是否會不同？</a>  <ul style="margin: 0px 0px 0px 30px"> <li><a style="font-size: 15px; line-height: 1.6" href="#WizKMOutline_1497788288023145" ;="">當有檔案修改又有檔名修改無法用follow和網上說法有點不同</a> </li></ul><br></li></ul> </li><li><a style="font-size: 15px; line-height: 1.6" href="#WizKMOutline_1497788288023198" ;="">結語</a> </li></ul></div> <a name="more"></a> <section> <h2 id="WizKMOutline_1497788288022805">問題重現</h2> <p>基本上我們可以用以下的方式來重現這個問題： </p> <ol> <li>先建立一個檔案 <code>file.txt</code><br> </li><li>把這個檔案<kbd>commit</kbd>上去<br> </li><li>把檔案改名字<code>change.txt</code><br> </li><li>這個時候看狀態會變成 <code>file.txt</code>在被<em>刪除</em>狀態，而<code>change.txt</code>則是<em>untrack</em>的狀態<br> </li><li>用 <kbd>add</kbd> 加入到index （注意到這邊狀態變成了 <em>renamed</em>）<br> </li><li>這個時候用小烏龜對那個檔案做看 <kbd>log</kbd> - 會發現歷史不見了<br></li></ol><figure> <p><a href="https://lh3.googleusercontent.com/-B3anHaRaGms/WUZz2Vn7GOI/AAAAAAAAVzY/aJFrkqXP3VEGVydfQ29iSfI_r-b0iBvoQCHMYCw/s1600-h/image%255B19%255D"><img title="建立的指令" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="建立的指令" src="/posts/migrate/2017-06-18-git-properly-rename-file-show-rename-log_Asset/image_thumb[15](1).png" width="654" height="557" class="img-responsive"></a> </p><figcaption>建立的指令<p></p> <p></p></figcaption></figure><figure><a href="https://lh3.googleusercontent.com/-e-mjpdaieJw/WUZz5uMxAAI/AAAAAAAAVzg/0hpvU_xSRWAQvREFax0Rp9SuBKlhtCK4gCHMYCw/s1600-h/image%255B23%255D"><img title="log看不到建立出file.txt的記錄" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="log看不到建立出file.txt的記錄" src="/posts/migrate/2017-06-18-git-properly-rename-file-show-rename-log_Asset/image_thumb[17](1).png" width="654" height="557" class="img-responsive"></a> <figcaption>log看不到建立出<code>file.txt</code>的記錄</figcaption></figure></section><section> <p></p> <h2 id="WizKMOutline_1497788288023506">解決方式</h2> <p>如果今天只是要看到包含改檔名前的日誌，下面是做法 - 如果對於為什麼會發生和git重命名的做法有興趣在往下看。 </p> <h3 id="WizKMOutline_1497788288023559">指令的方式</h3> <p>其實在git裡面針對某個檔案看日誌的時候，可以使用指令<code>follow</code>來包含變更名稱前的日誌： </p> <p><code>git log -follow filex.txt</code></p> <p>在各個ui裡面也有類似的設可以啟用： </p> <h3 id="WizKMOutline_1497788288023932">TortoiseGit log 啟用方式</h3> <p>選取要檢查的檔案（以我們例子是<code>change.txt</code>），呼叫log的部分並且在最下面第3個按鈕 <kbd>Walk Behaviour</kbd> -&gt; <kbd>Follow Renames</kbd>就可以看到。下面截圖就是有開啟的狀態，可以看到最早<code>file.txt</code>的建立也有看到了： </p><figure><a href="https://lh3.googleusercontent.com/-o6aC98_J5EQ/WUZ2RFDjCdI/AAAAAAAAV0w/IFfVeAHmVTMXe7NZwenYTOg0SyxkbibxQCHMYCw/s1600-h/image%255B2%255D"><img title="有follow參數的log" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="有follow參數的log" src="/posts/migrate/2017-06-18-git-properly-rename-file-show-rename-log_Asset/image_thumb[1](17).png" width="360" height="488" class="img-responsive"></a> <figcaption>有follow參數的log</figcaption></figure>  <h4 id="WizKMOutline_1497788288023898">TortoiseGit blame啟用方式</h4> <p>如果對一個檔案做<kbd>blame</kbd> - 下面的log清單也需要開啟在 <kbd>View</kbd> -&gt; <kbd>Folle Rename</kbd>才會看到 </p><figure><a href="https://lh3.googleusercontent.com/--44afV4T8Ac/WUZ2VO3RxuI/AAAAAAAAV04/RaGhfyKvrPYzHK3bqXpKFwX0o1bIgJ_BwCHMYCw/s1600-h/image%255B3%255D"><img title="在blame日誌也包含rename" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="在blame日誌也包含rename" src="/posts/migrate/2017-06-18-git-properly-rename-file-show-rename-log_Asset/image_thumb[2](11).png" width="377" height="473" class="img-responsive"></a> <figcaption>在blame日誌也包含rename</figcaption></figure>  <h3 id="WizKMOutline_1497788288023181">SourceTree log 啟用方式</h3> <p>在log裡面選<code>change.txt</code>，點<kbd>右鍵</kbd>，選擇 <kbd>Log Selected</kbd>，在左下角有個<kbd>Follow renamed file</kbd></p><figure><a href="https://lh3.googleusercontent.com/-ImN1W91-ETs/WUZ2ZOOaESI/AAAAAAAAV1A/ZZUpd3Vu3w4HGfZpA9BVXsfOQv8-NZEcwCHMYCw/s1600-h/image%255B4%255D"><img title="開啟單一檔案log" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="開啟單一檔案log" src="/posts/migrate/2017-06-18-git-properly-rename-file-show-rename-log_Asset/image_thumb[3](8).png" width="501" height="290" class="img-responsive"></a><a href="https://lh3.googleusercontent.com/-axCVo0tEdX4/WUZ2dUYdBWI/AAAAAAAAV1I/K3K690dcKw0Scoi2-iwXhqqNdr__P2BswCHMYCw/s1600-h/image%255B5%255D"><img title="開啟follow renamed files" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="開啟follow renamed files" src="/posts/migrate/2017-06-18-git-properly-rename-file-show-rename-log_Asset/image_thumb[4](9).png" width="188" height="316" class="img-responsive"></a> <figcaption>source tree裡面啟用方式</figcaption></figure> </section><section> <h2 id="WizKMOutline_1497788288023430">發生原因 - git如何處理檔名變更</h2> <p>大部分第一次遇到這種情況都是在想，會不會是rename方式錯誤，是不是需要透過git的指令來rename就沒問題？ </p> <p>如果深入在研究，會發現git有提供一個指令叫做<code>git mv</code>(TortoiseGit也有一個對應的刪除功能）- 但是如果你用那個指令來刪除，會發現其實還是看不到日誌。 </p> <p>要了解這個，首先有件事情一定要記得的是，git和其他版控不同在於，git記錄的是<strong><em>內容變更</em></strong>，而不是<strong><em>檔案變更</em></strong>。 </p> <p>所以其實git<em>不在乎檔名有沒有變更</em>，他看的是<em>檔案內容</em>的變更。所以在上面我們沒有透過git指令改名的時候，一開始在status顯示的是有個檔案被delete，然後有個檔案屬於untrack，但是當我們加到staging之後 （透過 <kbd>git add</kbd>）自動切換變成<code>renamed</code>狀態。 </p><figure> <p><a href="https://lh3.googleusercontent.com/-hhevfYNwpFk/WUZ0QgwwQrI/AAAAAAAAV0I/0aTiccbCDyQxnryevF19Kz0xpaNXzTGFACHMYCw/s1600-h/image%255B40%255D"><img title="add之前顯示的狀態" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="add之前顯示的狀態" src="/posts/migrate/2017-06-18-git-properly-rename-file-show-rename-log_Asset/image_thumb[24](1).png" width="654" height="562" class="img-responsive"></a> </p><figcaption>add之前顯示的狀態<p></p> <p></p></figcaption><a href="https://lh3.googleusercontent.com/-Rxz3L8wg22Y/WUZ0aC1f1_I/AAAAAAAAV0Q/4x9D9uNgPg4dBWUYD3rVNBAfUnmpCndAgCHMYCw/s1600-h/image%255B43%255D"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="/posts/migrate/2017-06-18-git-properly-rename-file-show-rename-log_Asset/image_thumb[25](1).png" width="654" height="557" class="img-responsive"></a> <figcaption>add之後變成rename</figcaption></figure> <p></p> <p>會有這種混搖是因為git觸發檢查的時間點不同，當status的時候還沒比對過資料，而在add等於進入準備建立commit，所以一比對，發現只是<em>檔名</em>不同（在git來說就是在不同的tree），因此它自動識別原來這是一個檔名變更。 </p> <div class="bs-callout bs-callout-warning"> <h4 id="WizKMOutline_1497788288023158">這個時候有些gui就容易誤導使用者</h4> <p>以TortoiseGit來說，他沒有staging概念（應該說有，但是commit的那個畫面沒有這種感覺）會造成使用者擔心為什麼不是顯示重改檔名，造成他們不敢commit： </p><figure><a href="https://lh3.googleusercontent.com/-HeFNZXzHn-Q/WUZ3Dw9Mp0I/AAAAAAAAV1g/u1OneGvFaBod-72tg29QgEvejPUUbgrhgCHMYCw/s1600-h/image%255B9%255D"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="/posts/migrate/2017-06-18-git-properly-rename-file-show-rename-log_Asset/image_thumb[8](2).png" width="333" height="323" class="img-responsive"></a><a href="https://lh3.googleusercontent.com/-5UCxYdnuQVk/WUZ2mhW3FaI/AAAAAAAAV1Y/sh80D2yACu4FuS0wa9DE0kLuCj7VEF1HgCHMYCw/s1600-h/image%255B8%255D"><img title="sourcetree commit畫面" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="sourcetree commit畫面" src="/posts/migrate/2017-06-18-git-properly-rename-file-show-rename-log_Asset/image_thumb[7](1).png" width="397" height="318" class="img-responsive"></a><figcaption>（左圖）TortoiseGit的commit畫面 - 看起來和status未add之前看到的內容，（右圖）sourcetree預設有個stage畫面，因此看起來比較明顯</figcaption></figure> </div></section><section> <h2 id="WizKMOutline_1497788288023478">在git裡面重新命名怎麼做才正確</h2> <ul> <li>當檔案<em>內容</em>沒有<em>修改或者少量</em>修改的時候，就依照喜歡的方式改檔名就好<br> </li><li>如果檔案內容有<em>大幅度</em>修改，建議改檔名和修改內容分<em>兩個</em>commit（一個改檔案內容，一個改檔名）<br></li></ul>詳細說明如下：  <h3 id="WizKMOutline_1497788288023284">有沒有必要呼叫 git mv</h3> <p>答案是：<strong><em>不需要</em></strong></p> <p><code>git mv</code> = 改完檔名然後呼叫 git add </p> <p>因為Windows使用者習慣直接透過檔案總管改檔名，因此專門為了省一個git add的指令而特意去呼叫<code>git mv</code>有點不方便，只是要知道顯示一個delete和一個untrack是正常即可。 </p> <h3 id="WizKMOutline_1497788288023734">當檔案內容和檔案名稱都有修改的情況下是否會不同？</h3> <p>假設檔案內容只改了<em>一些</em> - git會夠聰明的知道，其實這是一個修改檔名+修改檔案內容。 </p> <p>但是當修改檔案內容<em>很多</em>也有修改檔名，<code>git add</code>還是會顯示一個<em>delete和一個untrack</em>。 </p> <p>如果進入那種狀態，會有以下壞處： </p> <ol> <li>未來在看commit的時候，不那麼直覺能夠看出是一個檔名修改+檔案內容修改<br> </li><li><code>-follow</code>的參數就沒有用了 - 所以換檔名前的log沒法一次顯示  <div class="bs-callout bs-callout-warning"> <h4 id="WizKMOutline_1497788288023145">當有檔案修改又有檔名修改無法用follow和網上說法有點不同</h4> <p>以我解git是記錄檔案內容變更，理論上來說就算變成 一個delete一個untrack也應該要能夠用<code>follow</code>追蹤的到才對，但是實際上我測試的時候不行。 </p> <p>這個和網路上的一些說法不一致，因此為了未來看起來方便和容易追蹤，建議還是分兩個commit，一個改檔名，一個改檔案內容。 </p></div> <div class="bs-callout bs-callout-info"> <p>假設commit已經是一個delete和一個untrack，可以用<code>rebase</code>把它拆開成為兩個commit，一個改檔名，一個改檔案內容。 </p></div><br></li></ol> <h2 id="WizKMOutline_1497788288023198">結語</h2> <p>在第一次接觸到git的rename的時候容易進入到以前以<em>檔案修改</em>為記錄的版控思維影響，因此希望這篇能夠讓了解發生的原因，並且記得： </p> <ol> <li>如果<code>log</code>和<code>blame</code>需要看到包含改檔名前的記錄，記得找找和<code>follow</code>有關的關鍵字做切換<br> </li><li>改檔名不用擔心，可以直接用檔案總管修改然後add、commit即可<br> </li><li>如果檔案有大改，然後又要改檔名，建議分成兩個commit<br></li></ol></section><section> <h2>參考資料</h2> <ol> <li><a href="https://stackoverflow.com/questions/29706086/how-to-stage-a-rename-without-subsequent-edits-in-git">How to stage a rename without subsequent edits in git?</a> </li></ol></section> <div id="scid:77ECF5F8-D252-44F5-B4EB-D463C5396A79:d50a5557-0f39-432d-9b15-7dc098735800" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px">標籤: <a href="/tags/Git" rel="tag">Git</a></div>