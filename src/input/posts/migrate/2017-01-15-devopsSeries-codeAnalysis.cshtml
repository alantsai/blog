Title: "[iThome第8屆鐵人賽 19]靜態程式碼分析之Assembly品質分析 - Code Analysis(以前的FxCop)"
Published: 2017-01-15
Modified: 2017-12-12
Image: /posts/migrate/2017-01-15-devopsSeries-codeAnalysis_Asset/image_thumb(15).png
Tags: [".net","「ithome 第八屆鐵人賽」","devops","「從.net工程師的角度來看devops」","psake","powershell"]
RedirectFrom: 2017/01/devopsSeries-codeAnalysis.html
Series: ["「iThome 第八屆鐵人賽」","「從.Net工程師的角度來看DevOps」"]
---
<section> <p>在了解完如何分析測試碼的涵蓋率(也代表測試品質)之後，我們將來看另外一種保持程式碼品質的方式，也就是透過靜態程式碼分析。 </p><p>在.Net的世界里，從最早期的而外工具FxCop，到後來進化成為VS一部分的Code Analysis就是專門在做這個方面工作的工具。 </p><p>在這篇將會介紹如何使用Code Analysis，並且如何把它整并到我們的Build Script裡面。 </p><div class="bs-callout bs-callout-warning">廣義來說，靜態程式碼分析應該是針對源代碼(Source Code)作分析，實際上Code Analysis其實是對Assembly作分析，而Assembly也是IL，所以真的要叫做靜態程式碼分析應該也沒錯，只是 真的要嚴格說起來，Code Analysis應該不能夠稱之為靜態程式碼分析。不過以下我還是會稱之為靜態程式碼分析。(有點繞口) </div><div class="bs-callout bs-callout-default">sample 程式在 <a href="https://github.com/alantsai-samples/devops-psake/releases/tag/sample%2Fchapter19">github devops-psake sample/chapter19</a></div></section><section><a id="KMContentPageTopID" name="KMContentPageTopID"></a> <div id="divKMOutline" style="border-top-style: groove; border-bottom-style: groove; border-right-style: none; margin: 10px 0px; border-left-style: none"><ul style="margin: 0px 0px 0px 20px"><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1484409105643127" ;="">什麼是靜態程式碼分析？</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1484409105644841" ;="">.Net世界的靜態程式碼分析 - Code Analysis</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1484409105644501" ;="">如何在VS執行Code Analysis</a><br><ul style="margin: 0px 0px 0px 30px"><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1484409105644349" ;="">手動執行</a><br><ul style="margin: 0px 0px 0px 30px"><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1484409105644258" ;="">設定使用規則</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1484409105644126" ;="">執行靜態程式碼分析</a></li><br></ul></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1484409105644729" ;="">建制的時候自動執行</a></li></ul></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1484409105644944" ;="">在build的時候在執行靜態程式碼分析</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1484409105644434" ;="">結語</a></li><br></ul></div></section> <a name="more"></a><section> <h2 id="WizKMOutline_1484409105643127">什麼是靜態程式碼分析？</h2><p>靜態程式碼分析其實就是一個針對<em>原程式碼掃描</em>並且把裡面的結果和<em>規則(RuleSet)</em>做比對，如果有哪些程式碼不符合規則將會爆出訊息。 </p><p>舉例來說，資安風險裡面一個最常見的風險之一就是sql injection - 因此有專門規則是在找出程式碼那裡使用了可能導致sql injection的程式碼。 </p><p>從某種程度來說，靜態程式碼分析和聽到的白箱資安掃描其實是同一種類的東西。 </p><div class="bs-callout bs-callout-info">在各個語言基本上都有靜態程式碼分析的工具，尤其是像有些不需要編譯的語言(例如javascript)更是大量使用靜態程式碼分析來增強程式碼品質，這種分析工具在Javascript或者css 稱之為<code>lint</code></div></section><secction> <h2 id="WizKMOutline_1484409105644841">.Net世界的靜態程式碼分析 - Code Analysis</h2><p>在.net世界裡面，最早提供靜態程式碼分析的工具是FxCop。這個工具當初是一個另外下載的一個console程式，並且用它做執行。 </p><p>再後來，FxCop被微軟整合到了VS裡面，稱之為Code Analysis，並且在VS裡面提供了方法方便執行這些分析。 </p><p>因此，要使用靜態程式碼分析並不需要另外安裝什麼東西，VS就包含了這個工具。 </p><p>在接下來將會看看在VS裡面到底如何使用此工具。 </p><section> <h2 id="WizKMOutline_1484409105644501">如何在VS執行Code Analysis</h2><p>在VS裡面也有兩種執行的方式： </p><ol><li>手動執行<br></li><li>建制的時候自動執行</li><br></ol><h3 id="WizKMOutline_1484409105644349">手動執行</h3><p>在<code>Analyze</code>功能裡面可以先對每一個project用的規則做設定，然後就可以手動執行。 </p><h4 id="WizKMOutline_1484409105644258">設定使用規則</h4><ol><li>在Tool bar選擇：<code>Analyze -&gt; Configure Code Anaysis - &gt; For Solution</code><br></li><li>可以設定每一個專案所要使用的規則集<br></li><li>如果想自訂規則集也可以</li><br></ol><figure> <p><a href="https://lh3.googleusercontent.com/-2uXyPKcHbVw/WHpR_-EIpsI/AAAAAAAAVKI/GUxu0mYVlLI/s1600-h/image%25255B2%25255D.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="/posts/migrate/2017-01-15-devopsSeries-codeAnalysis_Asset/image_thumb(15).png" width="644" height="270" class="img-responsive"></a></p><figcaption>開啟設定規則集的畫面<p></p><p></p></figcaption></figure><figure><a href="https://lh3.googleusercontent.com/-5IgPyupyvCU/WHpSCVYn9_I/AAAAAAAAVKQ/dNODkBp1ZWY/s1600-h/image%25255B8%25255D.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="/posts/migrate/2017-01-15-devopsSeries-codeAnalysis_Asset/image_thumb[2](8).png" width="644" height="214" class="img-responsive"></a><figcaption>選擇專案使用的規則集</figcaption></figure> <p></p><h4 id="WizKMOutline_1484409105644126">執行靜態程式碼分析</h4><p>在<code>Analyze -&gt; Run Code Anaysis -&gt; For Solution</code></p><figure><a href="https://lh3.googleusercontent.com/-0Yjd38BnuNM/WHpSEKKnGTI/AAAAAAAAVKY/YagDeETRpvs/s1600-h/image%25255B11%25255D.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="/posts/migrate/2017-01-15-devopsSeries-codeAnalysis_Asset/image_thumb[3](7).png" width="644" height="193" class="img-responsive"></a><figcaption>執行靜態程式碼分析<a href="https://lh3.googleusercontent.com/-uAGK6iS2F4g/WHpSGsPnvBI/AAAAAAAAVKg/HS9YczAOeUo/s1600-h/image%25255B14%25255D.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="/posts/migrate/2017-01-15-devopsSeries-codeAnalysis_Asset/image_thumb[4](6).png" width="644" height="141" class="img-responsive"></a></figcaption></figure><figure><figcaption>執行結果有問題會出現在Erro List清單</figcaption></figure>  <div class="bs-callout bs-callout-info">預設的規則集沒有那麼嚴，所以應該不會看到任何Warning，如果這個時候把規則集改成<code>All</code>就會看到。 </div><h3 id="WizKMOutline_1484409105644729">建制的時候自動執行</h3><p>能夠手動執行當然好，但是不能夠自動執行嗎？ </p><p>在Visual Studio其實有提供設定讓Code Analysis在兼職的時候自動執行。 </p><p>對要設定建制自動執行的專案點 <code>右鍵 -&gt; Properties -&gt; Code Analysis</code> 然後把 <code>Enable Code Analysis on Build</code>打鉤即可 </p><p><a href="https://lh3.googleusercontent.com/-RUkK8gaTvL8/WHpSMaOykxI/AAAAAAAAVKo/1O-5UaCJetM/s1600-h/image%25255B17%25255D.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="/posts/migrate/2017-01-15-devopsSeries-codeAnalysis_Asset/image_thumb[5](4).png" width="501" height="484" class="img-responsive"></a></p><figure></figure><figure><a href="https://lh3.googleusercontent.com/--QR8RF09Mss/WHpSOAM22rI/AAAAAAAAVKw/TOmHYECZzIk/s1600-h/image%25255B20%25255D.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="/posts/migrate/2017-01-15-devopsSeries-codeAnalysis_Asset/image_thumb[6](1).png" width="644" height="428" class="img-responsive"></a><figcaption>設定畫面</figcaption></figure>  <p>在這邊也可以設定要用那個規則集和更詳細調整哪一個規則要開啟： </p><figure><a href="https://lh3.googleusercontent.com/-cYpBYMWonBc/WHpSRLBtMRI/AAAAAAAAVK4/uzX0pT1zDRk/s1600-h/image%25255B23%25255D.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="/posts/migrate/2017-01-15-devopsSeries-codeAnalysis_Asset/image_thumb[7](1).png" width="644" height="424" class="img-responsive"></a><figcaption>規則集調整設定</figcaption></figure><figure><a href="https://lh3.googleusercontent.com/-Rbno1h8J4zU/WHpSWLH2EFI/AAAAAAAAVLA/LIn7_yps_7s/s1600-h/image%25255B26%25255D.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="/posts/migrate/2017-01-15-devopsSeries-codeAnalysis_Asset/image_thumb[8](1).png" width="644" height="218" class="img-responsive"></a><figcaption>設定畫面</figcaption></figure></section><section>  <h2 id="WizKMOutline_1484409105644944">在build的時候在執行靜態程式碼分析</h2><p>既然能夠手動執行和在建制的時候自動執行，那為什麼不在那個時候執行就好？ </p><p>原因很簡單，<em>時間問題</em>。 </p><p>當專案越來越大，每跑一次靜態程式碼分析的時間會需要越來越長。在考慮到還要執行單元測試，整個加在一起會拖累整個開發速度。 </p><p>所以為了整個開發的速度能夠快，但是又不犧牲程式碼的品質，這種靜態程式碼分析通常都是在build server執行 - 因為那個時候要執行多久都不會打斷開發時間。 </p><p>要在build的時候執行靜態程式碼分析，需要設定三個參數： </p><ol><li><code>RunCodeAnalysis=true</code> - 表示要執行靜態程式碼分析<br></li><li><code>CodeAnalysisRuleSet=AllRules.ruleset</code> - 要用那個規則集執行 - 出入內建的規則集 如果有客製規則集，可以把規則集的路徑放入參數<br></li><li><code>CodeAnalysisTreatWarningsAsErrors=true</code> - 這個主要目的是把靜態程式碼分析出來有問題的部分當做Error而不是Warning。</li><br></ol><p>最後，<code>default.ps1</code>調整如下： </p><pre class="brush: csharp;highlight:11"><code class="language-csharp line-numbers">task Compile -depends Clean, Init -description "編譯程式碼" `
    -requiredVariables solutionFile, buildConfiguration, buildTarget, buildTempDirectory `
{ 
 Write-Host "開始建制檔案：$solutionFile"

 $buildParam = "Configuration=$buildConfiguration" +
     ";Platform=$buildTarget" + 
     ";OutDir=$buildTempDirectory"
 
 $buildParam = $buildParam + ";GenerateProjectSpecificOutputFolder=true"
 $buildParam = $buildParam + ";RunCodeAnalysis=true;CodeAnalysisRuleSet=AllRules.ruleset;CodeAnalysisTreatWarningsAsErrors=true"

 exec {msbuild $solutionFile "/p:$buildParam"}
}</code></pre></section><section> <h2 id="WizKMOutline_1484409105644434">結語</h2><p>這篇快速介紹了靜態程式碼分析，並且如何在VS和build script裡面使用。 </p><p>實際上這個可以更詳細的看每一個規則，和介紹一下一般來說那些要打開，不過這個畢竟不是這個系列的重點。 </p><p>希望透過這篇，就能夠立竿見影開始使用靜態程式碼分析來提升程式碼品質。 </p><p>在下一篇將會介紹另外一個角度的靜態程式碼分析 - 用來統一團隊開發風格的工具StyleCop。 </p></section></secction><section> <h2>相關資料</h2><ol><li><a href="http://stackoverflow.com/questions/6399014/disable-code-analysis-for-some-projects-using-msbuild">Disable Code Analysis for Some Projects using MSBuild</a><br></li><li><a href="http://stackoverflow.com/questions/3178537/how-do-i-specify-a-ruleset-from-msbuild">How do I specify a ruleset from MSBuild</a><br></li><li><a href="http://stackoverflow.com/questions/38050517/tfs-build-ignores-configured-code-analysis-ruleset">TFS Build ignores configured Code Analysis ruleset</a><br></li><li><a href="http://stackoverflow.com/questions/14366181/treat-warnings-as-errors-has-no-effect">Treat Warnings as Errors has no effect</a><br></li><li><a href="https://blogs.msdn.microsoft.com/hkamel/2013/10/24/visual-studio-2013-static-code-analysis-in-depth-what-when-and-how/">Visual Studio 2013 Static Code Analysis in depth: What? When and How?</a></li><br></ol></section>