Title: "[iThome第8屆鐵人賽 11]執行測試 2 - NUnit .Net"
Published: 2016-12-25
Modified: 2017-12-12
Image: /posts/migrate/2016-12-25-devopsSeries-runTest-Nunit_Asset/image_thumb(9).png
Tags: [".net","「ithome 第八屆鐵人賽」","devops","「從.net工程師的角度來看devops」","psake","powershell"]
RedirectFrom: 2016/12/devopsSeries-runTest-Nunit.html
Series: ["「iThome 第八屆鐵人賽」","「從.Net工程師的角度來看DevOps」"]
---
<section>在上篇介紹完如何整合Xunit做測試之後，在這篇我們將會看看在.Net世界裡面另外一個常用的測試Framework，NUnit。  <div class="bs-callout bs-callout-default">sample 程式在 <a href="https://github.com/alantsai-samples/devops-psake/releases/tag/sample%2Fchapter11">github devops-psake sample/chapter11</a> </div></section><section><a id="KMContentPageTopID" name="KMContentPageTopID"></a> <div id="divKMOutline" style="border-top-style: groove; border-bottom-style: groove; border-right-style: none; margin: 10px 0px; border-left-style: none"><ul style="margin: 0px 0px 0px 20px"><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1482627694588219" ;="">Nunit和Xunit有和不同？</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1482627694589555" ;="">準備Nunit測試專案</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1482627694589677" ;="">準備build script - task 定義</a><br><ul style="margin: 0px 0px 0px 30px"><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1482627694589540" ;="">1. 在build專案安裝Nunit Console</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1482627694589406" ;="">2. 定義NUnintTest的task</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1482627694589205" ;="">3. 準備build script - 參數定義</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1482627694589351" ;="">4. 準備執行 nunit console runner</a></li><br></ul></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1482627694589931" ;="">執行Nunit測試</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1482627694589826" ;="">結語</a></li><br></ul></div></section> <a name="more"></a><section> <h2 id="WizKMOutline_1482627694588219">Nunit和Xunit有和不同？</h2><p>再詳細介紹如何整合Nunit之前，我們要先了解，Nunit和Xunit到底有和不同？ </p><p>其實兩個的步奏基本一樣，只是參數不同（在Nunit 2.X系列 甚至連執行的參數也都一樣，只是參數一個用<code>-</code>來分割，一個用<code>/</code>而已，不過在這篇我們會使用Nunit 3.x） ，所以雖然這篇和上篇會很類似，但是為了完整性，這篇還是會完整介紹如何整并Nunit。 </p></section><section> <h2 id="WizKMOutline_1482627694589555">準備Nunit測試專案</h2><p>需要先建立一個Library專案，這個專案裡面要放一個Nunit的測試。 </p><p>建立好一個Library專案之後，要安裝兩個Nuget Package </p><ol><li><kbd>Install-Package nunit -Version 3.5.0</kbd> - 安裝nunit library<br></li><li><kbd>Install-Package Microsoft.AspNet.Mvc -Version 5.2.3</kbd> - 等一下要測試mvc的controller，所以要加入mvc的library </li><br></ol><p>Library建立好之後，我們就建立一個ControllerTest，這次就測試About的部分： </p><pre class="brush: csharp;"><code class="language-csharp line-numbers">[TestFixture]
public class HomeControllerTest
{
 [Test]
 public void About()
 {
  // Arrange
  HomeController controller = new HomeController();

  // Act
  ViewResult result = controller.About() as ViewResult;

  // Assert
  Assert.IsNotNull(result);
 }
}</code></pre><p>專案準備好之後，就到了準備script的部分 </p></section><section> <h2 id="WizKMOutline_1482627694589677">準備build script - task 定義</h2><p>接下來我們會調整我們的build script，我們會先在build專案安裝一個nunit的console runner，然後我們會在psake裡面取得那些需要跑test，並且最後執行nunit的測試。 </p><h3 id="WizKMOutline_1482627694589540">1. 在build專案安裝Nunit Console</h3><p>在build專案安裝Nunit Console: <kbd>Install-Package NUnit.Console</kbd></p><h3 id="WizKMOutline_1482627694589406">2. 定義NUnintTest的task</h3><p>先定義好要執行NUnitTest執行的task </p><pre class="brush: powershell;"><code class="language-powershell line-numbers">task NunitTest -depends Compile -description "執行Nunit測試" `
{

}</code></pre><h3 id="WizKMOutline_1482627694589205">3. 準備build script - 參數定義</h3><p>要執行build script之前，我們會需要幾個參數： </p><dl><dt>取得執行Nunit的Console Runner位置 - $nunitExe  </dt><dd>由於我們buildProject有加入nunit的 console runner，因此在package可以找到  </dd><dd><br></dd><dt>測試結果要儲存的位置 - $nunitTestResultDirectory  </dt><dd>我們 會把不同測試Framework分開放，所以會建立一個專門放nunit  </dd><dd><br></dd><dt>要執行測試的路徑確認 - $nunitTestPath  </dt><dd>這個邏輯是透過看看建制出來的專案有沒有 <code>nunit</code> 開頭的dll - 有就算是要被執行。這裡面取得的結果是DirectoryInfo，原因我們稍後提到。  </dd><dd></dd></dl><pre class="brush: powershell;"><code class="language-powershell line-numbers">$nunitExe = ((Get-ChildItem("$solutionDirectory\packages\NUnit.ConsoleRunner*")).FullName |
 Sort-Object $_ | select -Last 1) + "\tools\nunit3-console.exe"

$nunitTestResultDirectory = "$buildTestResultDirectory\Nunit
 
$nunitTestPath =  Get-ChildItem $buildTempDirectory -Recurse -Filter nunit*.dll | 
 Select -ExpandProperty DirectoryName -Unique | % { [io.directoryinfo]$_ }</code></pre><h3 id="WizKMOutline_1482627694589351">4. 準備執行 nunit console runner</h3><p>要執行console runner有些參數是必要傳入進去的，其中一個重要的就是要執行測試的dll清單。 </p><p>在上面參數定義我們已經找到了是nunit test專案的project清單，我們就可以用這個清單來產生出要執行的dll測試路徑。 </p><p>這裡面考慮到，如果有多個的話，每個用空格分開 </p><pre class="brush: powershell;"><code class="language-powershell line-numbers"># 組執行的dll
$testDlls = $nunitTestPath | % {$_.FullName + "\" + $_.Name + ".dll" }

$testDllsJoin = [string]::Join(" ", $testDlls)</code></pre><p>再來就是要確認執行console runne所會使用的參數： </p><dl class="dl-horizontal"><dt>$dll 路徑  </dt><dd>這個就是上面組出來的參數<br></dd><dt>-result $路徑 </dt><dd>執行結果要用 xml 格式 儲存在某個路徑 <p>最後，我們的<code>NunitTest</code>task變成： </p><pre class="brush: powershell;"><code class="language-powershell line-numbers"># 取得nunit project的路徑
$nunitTestPath =  Get-ChildItem $buildTempDirectory -Recurse -Filter nunit*.dll | 
     Select -ExpandProperty DirectoryName -Unique | % { [io.directoryinfo]$_ }

if(Test-Path $nunitTestPath){
 Write-Host "建立Nunit測試結果的資料夾 $nunitTestResultDirectory"
 New-Item $nunitTestResultDirectory -ItemType Directory | Out-Null

 Write-Host "總共有 $($nunitTestPath.Count) 個專案"

 Write-Host ($nunitTestPath | Select $_.Name)

 Write-Host "準備執行Nunit測試"
}

# 組執行的dll
$testDlls = $nunitTestPath | % {$_.FullName + "\" + $_.Name + ".dll" }

$testDllsJoin = [string]::Join(" ", $testDlls)

Write-Host "執行的 Dll: $testDllsJoin"

exec{ &amp; $nunitExe $testDllsJoin --result=$nunitTestResultDirectory\nUnit.xml}</code></pre><p>最後在<code>Test</code> task 加上 <code>NunitTest</code> 相依性 </p><pre class="brush: powershell;"><code class="language-powershell line-numbers">task Test -depends Compile, Clean, XunitTest, NunitTest -description "執行Test" { 
 Write-Host $testMsg
}</code></pre></dd></dl></section><section> <h2 id="WizKMOutline_1482627694589931">執行Nunit測試</h2><p>上面都準備好了之後，我們就可以執行我們的build語法： </p><figure><a href="https://lh3.googleusercontent.com/-adVMEUKX4P4/WF8cTWWs5-I/AAAAAAAAVEs/ejaLpmNQz4g/s1600-h/image%25255B2%25255D.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="/posts/migrate/2016-12-25-devopsSeries-runTest-Nunit_Asset/image_thumb(9).png" width="644" height="399" class="img-responsive"></a><figcaption>執行Nunit的結果</figcaption></figure> <p>然後我們能夠看到產出的結果是nunit3的xml結構格式： </p><figure><a href="https://lh3.googleusercontent.com/-sMfpowaRWW0/WF8cVFZN-GI/AAAAAAAAVE0/RO7u7pWk_Bk/s1600-h/image%25255B5%25255D.png"><img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="/posts/migrate/2016-12-25-devopsSeries-runTest-Nunit_Asset/image_thumb[1](9).png" width="415" height="143" class="img-responsive"></a><figcaption>執行結果</figcaption></figure></section><section> <h2 id="WizKMOutline_1482627694589826">結語</h2><p>到目前為止，NUnit的部分也完成了。Nunit和Xunit不同，內建並不支援匯出html的結果。所以，之後我們會需要使用別的方式產生出人比較看得懂的結果，不過以目前來說，我們 會進入下一個常見的測試工具，MSTest。 </p></section>