Title: "[iThome第8屆鐵人賽 09]建制失敗的處理 - 為什麼失敗了但是build server還是認為成功"
Published: 2016-12-20
Modified: 2017-12-12
Image: /posts/migrate/2016-12-20-devopsSeries-howToPropergateBuildError_Asset/image_thumb(7).png
Tags: [".net","「ithome 第八屆鐵人賽」","devops","「從.net工程師的角度來看devops」"]
RedirectFrom: 2016/12/devopsSeries-howToPropergateBuildError.html
Series: ["「iThome 第八屆鐵人賽」","「從.Net工程師的角度來看DevOps」"]
---
<section> <p>在進入下個階段之前（也就是開始執行Unit Test），有個部分一直沒有碰到，那就是當建制失敗的時候會發生什麼事情。 </p><p>整個CI的概念就是盡早發現建制有問題好去做一些處理，但是如果出錯了都發現不到，不就等於沒有意義了？ </p><p>這篇我們將會看看這方面的處理。 </p><div class="bs-callout bs-callout-default">sample 程式在 github <a href="https://github.com/alantsai-samples/devops-psake/releases/tag/sample%2Fchapter9">devops-psake sample/chapter9</a></div></section> <a name="more"></a><a id="KMContentPageTopID" name="KMContentPageTopID"></a> <div id="divKMOutline" style="border-top-style: groove; border-bottom-style: groove; border-right-style: none; margin: 10px 0px; border-left-style: none"><ul style="margin: 0px 0px 0px 20px"><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1482207199914421" ;="">當Build有錯會怎麼樣？</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1482207199914640" ;="">這會有什麼問題？</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1482207199914342" ;="">問題原因分析</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1482207199914235" ;="">解決方式 - exec</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1482207199914391" ;="">還有一道步奏</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1482207199914403" ;="">結語</a></li><br></ul></div><section> <h2 id="WizKMOutline_1482207199914421">當Build有錯會怎麼樣？</h2><p>我們首先來看看，當我們故意修改程式碼，讓他build不下去，會出現什麼內容。 </p><figure><a href="https://lh3.googleusercontent.com/-rsurwydVzfM/WFiwyNl7zqI/AAAAAAAAVC8/WDVNcN4_w4g/s1600-h/image%25255B2%25255D.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="/posts/migrate/2016-12-20-devopsSeries-howToPropergateBuildError_Asset/image_thumb(7).png" width="644" height="377" class="img-responsive"></a><figcaption>從圖片可以看到，雖然MSBuild說失敗了，但是psake還是認為成功了</figcaption></figure>  <h2 id="WizKMOutline_1482207199914640">這會有什麼問題？</h2><p>最大的問題會在，當我們要結合一些Build Server的時候，因為他呼叫的是psake，而psake告訴他成功（雖然MSBuild告訴他失敗），所以build server就認為成功。 </p><p>換句話說，<em>就算失敗了我們也永遠不會知道</em>。 </p><p>等於是整個建制scrip更本沒辦法使用了。 </p><h2 id="WizKMOutline_1482207199914342">問題原因分析</h2><p>這個問題，其實很簡單，有點像是程式裡面，如果出現了Exception，把它Tray catch不做任何事情是一樣的概念，當MSBuild出錯的時候，我們的psake就像是掩耳盜鈴一樣，管他是不是跑成功了， 他永遠回傳成功。 </p><p>所以，我們要面對現實，當建制失敗了，這個資訊要傳出去。 </p><p>但是另外一個問題來了，我們怎麼知道MSBuild建制失敗了？ </p><p>任何一個console程式，其實都有一個Exit Code的概念，就是當他執行完，他會回傳一個值，如果 = 0，表示<em>沒有問題</em>，不是0表示有問題。（話說，我寫console都沒有照這個原則） </p></section><section> <h2 id="WizKMOutline_1482207199914235">解決方式 - exec</h2><p>既然知道有exit code之後，我們可以讓psake檢查，如果是0，就表示沒問題，是0以外表示有問題，就拋出exception。 </p><p>可以想象當我們要呼叫的程式越來越多，每一個都要加上這個判斷真的不方便，所以psake提供了一個<code>exec</code>的方法，專門幫忙做上面的判斷。 </p><p>所以，我們調整 task Compile變成： </p><pre class="brush: powershell;highlight:12"><code class="language-powershell line-numbers">task Compile -depends Clean, Init -description "編譯程式碼" `
    -requiredVariables solutionFile, buildConfiguration, buildTarget, buildTempDirectory `
{ 
 Write-Host "開始建制檔案：$solutionFile"

 $buildParam = "Configuration=$buildConfiguration" +
     ";Platform=$buildTarget" + 
     ";OutDir=$buildTempDirectory"
 
 $buildParam = $buildParam + ";GenerateProjectSpecificOutputFolder=true"

 exec {msbuild $solutionFile "/p:$buildParam"}
} 
 </code></pre><figure><a href="https://lh3.googleusercontent.com/-Vv4Ns62cUFY/WFiwzrRhI-I/AAAAAAAAVDE/pBqz4Jcx9KU/s1600-h/image%25255B5%25255D.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="/posts/migrate/2016-12-20-devopsSeries-howToPropergateBuildError_Asset/image_thumb[1](7).png" width="644" height="154" class="img-responsive"></a><figcaption>psake 會報錯了</figcaption></figure>  <div class="bs-callout bs-callout-info">未來執行外部程式一定要記得呼叫exec包住 </div></section><section> <h2 id="WizKMOutline_1482207199914391">還有一道步奏</h2><p>最後，就算是這樣，我們build server還是不認為失敗，原因很簡單，同樣概念，builder server呼叫的是 build.ps1，可是報錯的是default.ps1，如果錯誤訊息沒有往上傳，build server還是認為成功。 </p><p>因此，我們要在build.ps1，把這個錯誤訊息往上傳： </p><pre class="brush: powershell;"><code class="language-powershell line-numbers">...

Write-Host "建制的Exit Code：$LastExitCode"

# 把錯誤碼往上傳
exit $LastExitCode 
 </code></pre><p><code>$LastExitCode</code>是powershell裡面記錄最後一個執行完回傳的結果，所以我們可以用這個值來呈現到我們build結果 </p></section><section> <h2 id="WizKMOutline_1482207199914403">結語</h2><p>在這篇我們了解到psake怎麼和其他console程式做結合，並且了解透過exit code的方式來知道是否執行成功。 </p><p>因此，下次在寫console程式的時候，別忘記最後都回傳一個exit code，未來如果自己程式要和這種build結合才有辦法達到 </p><p>下篇，我們正式進入另外一個部分，程式不是build起來就好了，還要確認所有檢查要通過，而這個檢查就是單元測試。 </p></section>