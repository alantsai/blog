Title: "如何用config管理多個網站的ssh key和如何不用每一組輸入ssh的Pass Phrase"
Published: 2016-03-07
Modified: 2016-03-07
Image: ""
Tags: ["ssh","git"]
RedirectFrom: 2016/03/ssh-config-ssh-agent-passphrase-management.html
Series: []
---
<a id="KMContentPageTopID" name="KMContentPageTopID"></a> <div id="divKMOutline" style="border-top-style: groove; border-bottom-style: groove; border-right-style: none; margin: 10px 0px; border-left-style: none"> <ul> <li><a href="#WizKMOutline_1457361341463918" ;="">建立另外一個ssh key</a>  <li><a href="#WizKMOutline_1457361341464709" ;="">config檔案的使用</a>  <ul> <li><a href="#WizKMOutline_1457361341464104" ;="">Config檔案的概念</a>  <ul> <li><a href="#WizKMOutline_1457361341464685" ;="">請注意config檔案本身的格式</a></li></ul> <li><a href="#WizKMOutline_1457361341465276" ;="">config檔案的建立</a>  <li><a href="#WizKMOutline_1457361341465950" ;="">config的alias作用</a></li></ul> <li><a href="#WizKMOutline_1457361341465254" ;="">ssh passphrase管理</a>  <ul> <li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1457361341465109" ;="">ssh-add指令總結</a></li></ul> <li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1457361341465203" ;="">測試config檔案的設定</a>  <li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1457361341465743" ;="">結語</a>  <li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1457361341465187" ;="">其他資料</a><br></li></ul></div> <p>在上一篇(<a href="http://blog.alantsai.net/2015/09/use-ssh-in-windows-for-github.html">何謂ssh，在Windows下如何使用ssh，如何在Windows透過ssh下載和上傳程式到github</a><span style="font-size: 14pt; line-height: 1.5">)介紹完了如何用ssh來和github做push和pull，接下來的問題會是：那如果我有多個站台ssh要連到怎麼辦？舉例來說，假設我的bitbucket也要用ssh聯繫，要怎麼做？</span></p> <p>另外一個問題是，每一次用ssh連線都要輸入pass phrase，上篇有介紹了ssh-agent來設定。在這篇將會在延伸ssh-agent的介紹，包括如何新增和刪除key的pass phrase，方便管理多個ssh key的pass phrase。 </p> <p>這篇會假設已經有用上篇的方式建立了一個ssh key給github用，而這篇將會在建立一個ssh key給bitbucket用。 </p> <a name='more'></a> <h2 id="WizKMOutline_1457361341463918">建立另外一個ssh key</h2> <p>在建立bitbucket用的ssh key之前，先來看一下ssh key的檔名的一些命名規則。 </p> <p>通常ssh key的檔名前面的部分會是：<code>id_rsa</code>，而在點的後面則會是這個ssh key的用途。因此，假設今天我要建立的ssh key是給bitbucket用的，我的檔名會變成： <code>id_rsa.bitbucket</code>。 </p> <p>有了這個概念之後，可以用下列指令來建立bitbucket要用的ssh key： </p><pre class="brush: ps;">ssh-keygen -f id_rsa.bitbucket -C "alan@@alantsai.net"</pre><p>將會產生以下的兩個檔案： </p><ol><li>id_rsa.bitbucket  <li>id_rsa.bitbucket.pub</li></ol><p>這個時候在<code>%userprofile%\.ssh</code>的下面應該就會有兩組key，一組是<code>id_rsa</code>(github用的)，一組是<code>id_rsa.bitbucket</code>(bitbucket用的)。 </p><p>下一步就是把產生的<code>id_rsa.bitbucket.pub</code>的key加入到bitbucket裏面的允許的ssh key裏面。 </p><h2 id="WizKMOutline_1457361341464709">config檔案的使用</h2><p>當ssh key越來越多，如何控制那裡要用那個key就是config在做的設定，接下來將會介紹如何使用config來方便做ssh連線。 </p><h3 id="WizKMOutline_1457361341464104">Config檔案的概念</h3><p>有了兩組key之後，我們會需要有一個東西告訴ssh，當我去github我要用<code>id_rsa</code>，當我去bitbucket，我要用<code>id_rsa.bitbucket</code>。而這個檔案，就是所謂的config檔案。 </p><p>config檔案裡面有個重要概念就是<code>hostname</code> - 使用連線到不同hostname的時候來切換使用的ssh key而config就在設定這件事情。 </p>config檔案的每一個hostname其中幾個重要格式如下：  <div><code style="box-sizing: border-box; font-size: 14px; border-top: rgb(221,221,221) 1px solid; font-family: menlo, monaco, consolas, 'Courier New', monospace; border-right: rgb(221,221,221) 1px solid; border-bottom: rgb(221,221,221) 1px solid; color: rgb(51,51,51); padding-bottom: 2px; padding-top: 2px; padding-left: 5px; margin: 0px; border-left: rgb(221,221,221) 1px solid; widows: 1; letter-spacing: 1px; line-height: 20px; padding-right: 5px; background-color: rgb(255,255,255); border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px">Host <em style="box-sizing: border-box; color: red; font-style: normal">alias</em></code><br style="box-sizing: border-box; font-size: 14px; font-family: 'Helvetica Neue', helvetica, arial, sans-serif; color: rgb(51,51,51); widows: 1; letter-spacing: 1px; line-height: 20px; background-color: rgb(255,255,255)"><code style="box-sizing: border-box; font-size: 14px; border-top: rgb(221,221,221) 1px solid; font-family: menlo, monaco, consolas, 'Courier New', monospace; border-right: rgb(221,221,221) 1px solid; border-bottom: rgb(221,221,221) 1px solid; color: rgb(51,51,51); padding-bottom: 2px; padding-top: 2px; padding-left: 5px; margin: 0px; border-left: rgb(221,221,221) 1px solid; widows: 1; letter-spacing: 1px; line-height: 20px; padding-right: 5px; background-color: rgb(255,255,255); border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px">HostName</code><code style="box-sizing: border-box; font-size: 14px; border-top: rgb(221,221,221) 1px solid; font-family: menlo, monaco, consolas, 'Courier New', monospace; border-right: rgb(221,221,221) 1px solid; border-bottom: rgb(221,221,221) 1px solid; padding-bottom: 2px; padding-top: 2px; padding-left: 5px; margin: 0px; border-left: rgb(221,221,221) 1px solid; widows: 1; letter-spacing: 1px; line-height: 20px; padding-right: 5px; background-color: rgb(255,255,255); border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px"><font color="#ff0000">hostname</font></code><br style="box-sizing: border-box; font-size: 14px; font-family: 'Helvetica Neue', helvetica, arial, sans-serif; color: rgb(51,51,51); widows: 1; letter-spacing: 1px; line-height: 20px; background-color: rgb(255,255,255)"><code style="box-sizing: border-box; font-size: 14px; border-top: rgb(221,221,221) 1px solid; font-family: menlo, monaco, consolas, 'Courier New', monospace; border-right: rgb(221,221,221) 1px solid; border-bottom: rgb(221,221,221) 1px solid; color: rgb(51,51,51); padding-bottom: 2px; padding-top: 2px; padding-left: 5px; margin: 0px; border-left: rgb(221,221,221) 1px solid; widows: 1; letter-spacing: 1px; line-height: 20px; padding-right: 5px; background-color: rgb(255,255,255); border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px">IdentityFile ~/.ssh/<em style="box-sizing: border-box; color: red; font-style: normal">identity</em></code><br></div><p>紅字是每一個可以設定的地方： </p><ol><li>alias - 這個和用ssh clone 使用的url有關係，等一下在加深說明  <li>hostname - 這個指的是我們連線過去服務的hostname。以我們例子來說，就會有github.com或者是bitbucket.org  <li>identity - 這個指的就是在這個hostname的情況下要用那個private key</li></ol><div class="bs-callout bs-callout-warning"><h4 id="WizKMOutline_1457361341464685">請注意config檔案本身的格式</h4><p>由於ssh屬於linux類型的工具，因此在檔案格式和line ending上面和windows不同，因此要注意： </p><ol><li>檔案的encoding要用<code>ANSI</code>或者要是utf-8不要有bom  <li>檔案的Line ending要用UNIX格式</li></ol>其中目前檔案的encoding和line ending在notepad++可以在右下角看到：  <p>如果自己建立的檔案設定完了還是不成功，那麼建議直接到ssh.exe的global config檔案，路徑(<code>%programfiles%\Git\etc\ssh\ssh_config</code>)去copy過來用，格式和line ending就都okay。 </p></div><h3 id="WizKMOutline_1457361341465276">config檔案的建立</h3><p>上面了解格式之後，config檔案的設定會如下： </p><pre class="brush: ps;"># GitHub user<br />Host github.com<br /> HostName github.com<br /> IdentityFile ~/.ssh/id_rsa<br /> <br /># Bitbucket<br />Host bitbucket.org<br /> HostName bitbucket.org<br /> IdentityFile ~/.ssh/id_rsa.bitbucket<br /></pre><h3 id="WizKMOutline_1457361341465950">config的alias作用</h3><p>在接下去測試之前，這邊先提一個很重要的config概念，就是<code>alias</code>的值。<code>alias</code>可以讓我們的git網址變得更加好記。 </p><table class="table"><tbody><tr><th>預設網址</th><th>使用alias的網址</th></tr><tr><td>git@@bitbucket.org:&lt;accountname&gt;/&lt;reponame&gt;.git </td><td>git@@<strong><em>alias</em></strong>:&lt;accountname&gt;/&lt;reponame&gt;.git </td></tr></tbody></table><p>所以，alias會對到config裏面的alias，然後用alias的hostname來作為實際連線的host。所以假設今天有個config是： </p><pre class="brush: ps;"># Bitbucket<br />Host personal<br /> HostName bitbucket.org<br /> IdentityFile ~/.ssh/id_rsa.bitbucket<br /></pre><p>那麼，clone的網址可以變成是：<code>git@@<strong><em>personal</em></strong>:&lt;accountname&gt;/&lt;reponame&gt;.git</code></p><h2 id="WizKMOutline_1457361341465254">ssh passphrase管理</h2><p>在之前<a href="http://blog.alantsai.net/2015/09/use-ssh-in-windows-for-github.html#WizKMOutline_1443285321782656">那篇</a>有介紹了如何透過<code>ssh-add -l</code>的 參數來看那些passphrase有記錄管理，然後可以透過 <code>ssh-add {key path}</code> 來加入某個key的passphrase，在這邊在介紹最後一個參數 <code>ssh-add -D</code>能夠把目前有管理的都刪除。 </p><p>這邊的刪除指的只是把ssh-agent對key的passphrase的記錄刪除 - 而不是真的把key刪除，因此不用擔心，要重新加回來只要在呼叫<code>ssh-add {key path}</code>就可以。 </p><div class="bs-callout bs-callout-info"><h4 id="WizKMOutline_1457361341465109">ssh-add指令總結</h4><table class="table"><tbody><tr><th>指令</th><th>作用</th></tr><tr><td><code>ssh-add -l</code></td><td>列出目前ssh agent有在管控的key passphrase</td></tr><tr><td><code>ssh-add {key path}</code></td><td>加入某一個key的passphrase</td></tr><tr><td><code>ssh-add -D</code></td><td>把所有目前ssh agent管控的key passphrase都清掉 - 如果要重新加入在用 <code>ssh-add {key path}</code></td></tr></tbody></table></div><h2 id="WizKMOutline_1457361341465203">測試config檔案的設定</h2><p>當bitbucket和github使用的ssh key在config設定好了之後，並且key的passphrase都透過<code>ssh-add</code>給ssh-agent管控了之後，會需要測試是否有問題。 </p><p>這個時候就可以用： </p><ul><li><kbd>ssh -T git@@github.com</kbd> - 測試github的連線  <li><kbd>ssh -T git@@bitbucket.org</kbd> - 測試bitbucket的連線 </li></ul><h2 id="WizKMOutline_1457361341465743">結語</h2><p>希望透過上篇和這篇的ssh介紹，能夠讓沒有用過ssh的Windows使用者在使用git和repository溝通的時候花的的時間更少，讓大家可以更專注在程式開發上面。 </p><h2 id="WizKMOutline_1457361341465187">其他資料</h2><ol><li><a href="http://blog.alantsai.net/2015/09/use-ssh-in-windows-for-github.html">何謂ssh，在Windows下如何使用ssh，如何在Windows透過ssh下載和上傳程式到github</a>  <li><a href="https://confluence.atlassian.com/bitbucket/configure-multiple-ssh-identities-for-gitbash-mac-osx-linux-271943168.html">Configure multiple SSH identities for GitBash, Mac OSX, &amp; Linux</a> - 介紹config裏面的多個alias設定  <li><a href="https://confluence.atlassian.com/bitbucket/set-up-ssh-for-git-728138079.html">Set up SSH for Git</a> - 介紹使用ssh</li></ol>