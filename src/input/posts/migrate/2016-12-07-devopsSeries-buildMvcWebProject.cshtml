Title: "[iThome第8屆鐵人賽 06]開始建制一個Asp .Net Mvc專案"
Published: 2016-12-07
Modified: 2017-12-12
Image: /posts/migrate/2016-12-07-devopsSeries-buildMvcWebProject_Asset/image_thumb(4).png
Tags: [".net","「ithome 第八屆鐵人賽」","devops","「從.net工程師的角度來看devops」","psake","powershell"]
RedirectFrom: 2016/12/devopsSeries-buildMvcWebProject.html
Series: ["「iThome 第八屆鐵人賽」","「從.Net工程師的角度來看DevOps」"]
---
<a id="KMContentPageTopID" name="KMContentPageTopID"></a> <div id="divKMOutline" style="border-top-style: groove; border-bottom-style: groove; border-right-style: none; margin: 10px 0px; border-left-style: none"><ul style="margin: 0px 0px 0px 20px"><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1481065368462822" ;="">MSBuild和Psake的關係</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1481065368462396" ;="">準備程式用於做建制測試</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1481065368462580" ;="">開始建制我們的專案</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1481065368462189" ;="">修正Compile時候出現的幾個小問題</a><br><ul style="margin: 0px 0px 0px 30px"><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1481065368462884" ;="">MSBuild使用的.Net版本錯了</a><br></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1481065368462248" ;="">Console看不出哪段是psake在執行</a></li><br></ul></li><li><a style="font-size: 14pt; line-height: 1.5" href="#WizKMOutline_1481065368462704" ;="">結語</a></li></ul></div><section> <p>經過了幾天的理論介紹，我們開始要進入建制專案的部分。 </p><p>我們會先拿一個Asp .net Mvc的網站作為第一個要建制的專案，所以我們會先建立出來，然後在使用MSBuild帶來的幫助，幫我們快速建立專案 </p><div class="bs-callout bs-callout-info">這次的建制我們都是focus在.net Framework的部分，或許.net core會有所不同，但是概念是一樣。 </div><p>（之後下面提到的code都可以從這邊看到內容：<a href="https://github.com/alantsai-samples/devops-psake">github repo</a>，這篇會是tag sample/chapter6）<br></p></section> <a name="more"></a><section> <h2 id="WizKMOutline_1481065368462822">MSBuild和Psake的關係</h2><p>在我們往下之前，有一個關係要在說明一下。我們使用psake並不是說要完全放棄MSBuild，反而是兩個結合在一起得到兩者的好處。 </p><p>首先，我們知道VS其實有很多不同類型的專案，而這些不同類型的專案在建制過程呼叫方式都完全不太一樣。因此，微軟提供了很多不同project的msbuild target（同等於task的概念）來處理 怎麼建制這些專案和要copy那些檔案。 </p><p>因此，我們不會重複造車輪，而是直接使用MSBuild所帶來的便利。 </p><p>不過這個時候會好奇，那當初不就直接用MSBuild就好？ </p><p>原因非常簡單，要擴充MSBuild非常麻煩。需要用C#才有辦法寫，然後又要處理一堆xml。 </p><p>反過來看psake，非常簡單，只要定義一個powershell script就好。 </p><p>所以，接下來我們會看到MSBuild被執行就沒什麼好奇怪。 </p></section><section> <h2 id="WizKMOutline_1481065368462396">準備程式用於做建制測試</h2><p>我們需要先把環境準備好方便接下來的測試。 </p><p>首先我們先建立一個Asp .net Mvc的專案，先看看有web專案情況會如何。 </p><p>我們會建立一個asp .net mvc的專案，並且包含預設的Test專案 </p><figure><a href="https://lh3.googleusercontent.com/-SNt_4TS1tX0/WEdEwGIaeoI/AAAAAAAAU-c/O3397nw-iks/s1600-h/image%25255B2%25255D.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="/posts/migrate/2016-12-07-devopsSeries-buildMvcWebProject_Asset/image_thumb(4).png" width="644" height="182" class="img-responsive"></a><br><figcaption>選擇asp .net web application<a href="https://lh3.googleusercontent.com/-jBHjjWmTg6w/WEdEzMUtbuI/AAAAAAAAU-k/BXbFiyTDpKU/s1600-h/image%25255B5%25255D.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="/posts/migrate/2016-12-07-devopsSeries-buildMvcWebProject_Asset/image_thumb[1](4).png" width="627" height="484" class="img-responsive"></a></figcaption></figure><figure><br><figcaption>選擇Mvc，然後勾選unit test</figcaption></figure></section><section>  <h2 id="WizKMOutline_1481065368462580">開始建制我們的專案</h2><p>基本上在建制專案的時候，有3個重要參數，說明一下： </p><ol><li>建制模式 - 一般我們都會設定要用Debug還是Release(預設模式)<br></li><li>目標的platform - 一般有三個值，x64、x86和Any Cpu<br></li><li>建制結果的位置 - 要把建制結果放在那裡，以我們來說就是 .build\temp 裡面</li><br><br><br></ol><div class="bs-callout bs-callout-info">1 和 2 其實 在VS裡面也可以設定，不過一般來說不怎麼調整就是 <a href="https://lh3.googleusercontent.com/--61p-bavWNM/WEdE3qRmG_I/AAAAAAAAU-s/yIPsIHmEAkU/s1600-h/image%25255B8%25255D.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="/posts/migrate/2016-12-07-devopsSeries-buildMvcWebProject_Asset/image_thumb[2](3).png" width="644" height="96" class="img-responsive"></a><figure> <figcaption>VS設定建制模式和目標platform的位置</figcaption></figure></div><p>有了這三個部分之後，我們就可以來調整我們Compile的Task </p><p>首先，剛剛提到的三個參數，第1和第2要增加，而第3我們已經有了。和其他參數一樣，我們會把這個加在<code>properties</code>裡面，這樣才有可能可以把值覆蓋。 </p><pre class="brush: powershell;"><code class="language-powershell line-numbers">Properties{
...
 $buildConfiguration = "Release"
 $buildTarget = "Any CPU"
}
   </code></pre><p>再來的會就是我們實際的<code>Compile</code> task： </p><pre class="brush: powershell;"><code class="language-powershell line-numbers">task Compile -depends Clean, Init -description "編譯程式碼" `
  -requiredVariables solutionFile, buildConfiguration, buildTarget, buildTempDirectory `
{ 
 Write-Host "開始建制檔案：$solutionFile"

 msbuild $solutionFile "/p:Configuration=$buildConfiguration;Platform=$buildTarget;OutDir=$buildTempDirectory"
}
   </code></pre><p>這邊使用到了<code>msbuild</code>做實際的編譯，然後用到了<code>requiredVariables</code>去做參數的驗證。 </p><p>這個時候我們就可以去執行<code>build.ps1</code>，會發現一切正常，但是有幾個小問題。 </p><figure><a href="https://lh3.googleusercontent.com/-NBc0Lm5ZPgQ/WEdFL3SyweI/AAAAAAAAU-0/p1nzzZV3FC0/s1600-h/image%25255B11%25255D.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="/posts/migrate/2016-12-07-devopsSeries-buildMvcWebProject_Asset/image_thumb[3](3).png" width="535" height="271" class="img-responsive"></a> <figcaption>建制成功</figcaption></figure></section><section>  <h2 id="WizKMOutline_1481065368462189">修正Compile時候出現的幾個小問題</h2><h3 id="WizKMOutline_1481065368462884">MSBuild使用的.Net版本錯了</h3><p>首先從build的日誌裡面可以看到，我們使用的MSBuild版本是4.6，但是我們的.Net Framework卻是<em>4.0</em>，但是實際上我們的project是用4.5.2寫的。如果用到4.5.2才有的功能， 很可能導致編譯錯誤。 </p><figure><a href="https://lh3.googleusercontent.com/-0Re3_D7TdmM/WEdFW_sqimI/AAAAAAAAU-8/3EtK9hcBSww/s1600-h/image%25255B14%25255D.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="/posts/migrate/2016-12-07-devopsSeries-buildMvcWebProject_Asset/image_thumb[4](3).png" width="644" height="114" class="img-responsive"></a> <figcaption>build到了4.0</figcaption></figure>  <p>這個很好解決，在<code>Invoke-psake</code>有個參數叫做<code>framework</code>，用這個可以設定build的target framework。 </p><p>所以在<code>build.ps1</code></p><pre class="brush: powershell;highlight:2"><code class="language-powershell line-numbers">Invoke-psake -buildFile .\default.ps1 -taskList Test `
    -framework "4.5.2" `
    -parameters @@{
    "solutionFile" = (Get-ChildItem("..\*.sln")).FullName |
     Sort-Object $_ | select -Last 1
    }`
    -properties @@{
    "testMsg"="測試訊息"
    }
   </code></pre><h3 id="WizKMOutline_1481065368462248">Console看不出哪段是psake在執行</h3><p>msbuild的內容比較多，造成看不太清楚那段屬於task記錄執行。不過psake有提供一個叫做<code>FormatTaskName</code>，能夠定義Task執行的時候顯示的內容。 </p><p>在<code>default.ps1</code>可以增加以下方法 </p><pre class="brush: powershell;"><code class="language-powershell line-numbers">FormatTaskName ("`r`n`r`n" + ("-"*25) + "[{0}]" + ("-"*25))</code></pre><figure><a href="https://lh3.googleusercontent.com/-Q0t43oE4qPU/WEdFqBa7l7I/AAAAAAAAU_E/Q0OdNA3MoDo/s1600-h/image%25255B17%25255D.png"><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="/posts/migrate/2016-12-07-devopsSeries-buildMvcWebProject_Asset/image_thumb[5](3).png" width="644" height="204" class="img-responsive"></a> <figcaption>看起來區分比較明顯</figcaption></figure></section><section>  <h2 id="WizKMOutline_1481065368462704">結語</h2><p>在這篇我們開始把psake和msbuild做了結合，並且把一個mvc網站建立了出來。 </p><p>在下篇，我們會看看被compile出來的結果，和加入console和library專案，看看建制結果是否有不同。 </p></section>