Title: "[.net framework工程師看.net core][01]開篇"
Published: 2017-10-15
Modified: 2017-10-15
Image: /posts/migrate/2017-10-15-net-framework-see-new-core01-introduction_Asset/image_thumb(46).png
Tags: ["「net framework工程師看net core」",".net","net-core"]
RedirectFrom: 2017/10/net-framework-see-new-core01-introduction.html
Series: ["「net framework工程師看net core」"]
---
<section><figure><a href="https://lh3.googleusercontent.com/-vcbsVV46QTM/WeKpoY_4yUI/AAAAAAAAWpQ/2qgHjgzNZ4E7kWcsMhQdLpZ7R9ERPmv-QCHMYCw/s1600-h/image%255B2%255D"><img width="654" height="290" title="image" style="margin: 0px; display: inline; background-image: none;" alt="image" src="/posts/migrate/2017-10-15-net-framework-see-new-core01-introduction_Asset/image_thumb(46).png" border="0" class="img-responsive"></a><br></figure></section><section><p>  作為.net 工程師來說，最近最夯的應該就是.net core 2.0的正式發佈。   </p><p>  如果你和我一樣，是一個從頭到尾只使用Windows並且以開發C# .net為主的工程師，那麼.net core最明顯的<em>真</em>跨平台可能沒什麼吸引力，畢竟只用Windows還需要夸平台嗎？   </p><p>  那麼是否.net core就不重要了呢？是否應該花時間學習呢？在這個系列希望能夠給目前.net為主的工程師節省一些查資料的時間，並且了解.net core的重要性。   </p></section>   <section>   <a name="KMContentPageTopID" id="KMContentPageTopID"></a><div id="divKMOutline" style="border-style: groove none; margin: 10px 0px;"><ul style="margin: 0px 0px 0px 20px;"><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1508026429086247" ;="">為什麼要寫這個系列</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1508026429086964" ;="">這個系列會包含什麼內容</a><br></li><li><a style="line-height: 1.6; font-size: 15px;" href="#WizKMOutline_1508026429086244" ;="">結語</a><br></li></ul></div></section>   <a name="more"></a>   <section><h2 id="WizKMOutline_1508026429086247">為什麼要寫這個系列</h2><p>  首先，先給各位一點我的背景，我正式寫.net (專案上面使用.net) 至少有了4~5年的時間，如果加上從大學時代開始學習並且寫.net，那麼也可以說快10年了。   </p><p>  我只會使用Windows的作業系統，並且很習慣使用地表上最強的IDE：Visual Studio。   </p><p>  因此對於我來說，.net core的跨平台好處對我個人來說吸引力並不大，畢竟都用.net了，那麼架設在Windows Server裡面的IIS不是很一般的事情嗎？那麼是否有必要花時間去學習呢？   </p><p>  其實答案非常明確，那就是<strong><em>要</em></strong>。原因是.net Core的目的和組成方式和.net Framework不同，因此使用情境也不同。   </p><p>  如果有接觸過.net core 1.x就會知道一件事情，和所有專案一樣，不變的事情就是<em>一直在變</em>。   </p><p>  那麼.net core 2.0是否也會如此呢？   </p><p>  基本上.net core 2.0相較於.net core 1.x來說，成熟很多因此可以考慮進場了。   </p><p>  這系列的文章將會以一個.net framework工程師的角度，來了解.net core對一個現行的.net framework工程師來說到底帶來了什麼變換，並且如何讓我們的code更future proof。   </p></section><section><h2 id="WizKMOutline_1508026429086964">這個系列會包含什麼內容</h2><p>  這個系列會包含我自己對於.net Framework的一個重新檢視先了解歷史，在了解未來，所以內容大約包含：   </p><ul><li>Review一下在沒有.net core之前，.net framework是個什麼情況，並且做一個簡單的總結</li><li>介紹一些.net core所帶來執行上面的差異</li><li>介紹一下.net Standard 2.0的到來 - 擁抱.net core先從擁抱.net standard做起</li><li>介紹tooling 部分的改變 - 其中template模式會和之前另外一個系列接上      (<a href="/tags/%E3%80%8C%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84template-%E5%BB%BA%E7%AB%8B%E4%B8%80%E8%87%B4%E6%80%A7%E7%A8%8B%E5%BC%8F%E7%A2%BC%E3%80%8D">「打造自己的template-建立一致性程式碼」</a>)</li><li>介紹一下asp .net core - 不過不會太多，這個應該會是另外一個系列</li><li>介紹一下UWP - 一樣不會太多，詳細應該會是另外一個系列</li></ul></section><section><h2 id="WizKMOutline_1508026429086244">結語</h2><p>  作為程式設計師的好處是，永遠有新的東西可以學，作為程式設計師的壞處也是<em>永遠</em>有新東西可以學。因此，什麼<em>時候</em>學和學<em>什麼</em>非常重要。   </p><p>  我相信.net core是肯定值得投資時間的技術，並且現在時間點比之前適合很多，因為2.0相比1.0穩定了很多，並且.net standard也基本上涵蓋了所有.net Framework的api。   </p><p>  在下篇將會從review開始，所謂知己知彼，百戰百勝，先了解現有有什麼，並且有什麼問題，再來了解.net core的出現就會變得比較簡單。   </p></section><section>   <div class="wlWriterEditableSmartContent" id="scid:77ECF5F8-D252-44F5-B4EB-D463C5396A79:c22e86bb-24fd-481e-9e5b-65a5bbbbec0a" style="margin: 0px; padding: 0px; float: none; display: inline;">標籤: <a href="/tags/%e3%80%8cnet+framework%e5%b7%a5%e7%a8%8b%e5%b8%ab%e7%9c%8bnet+core%e3%80%8d" rel="tag">「net framework工程師看net core」</a>,<a href="/tags/net-core" rel="tag">net-core</a>,<a href="/tags/.net" rel="tag">.net</a></div></section>